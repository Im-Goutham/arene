# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  _count: AddressCount
  address_line1: String
  address_line2: String
  city: String
  country: Country!
  country_id: String!
  id: String!
  postal_code: String
  region: String
  street_number: String
  unit_number: String
  userAddress(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): [UserAddress!]!
}

type AddressCount {
  userAddress: Int!
}

type AddressCountAggregate {
  _all: Int!
  address_line1: Int!
  address_line2: Int!
  city: Int!
  country_id: Int!
  id: Int!
  postal_code: Int!
  region: Int!
  street_number: Int!
  unit_number: Int!
}

input AddressCountOrderByAggregateInput {
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
}

input AddressCreateInput {
  address_line1: String
  address_line2: String
  city: String
  country: CountryCreateNestedOneWithoutAddressInput!
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
  userAddress: UserAddressCreateNestedManyWithoutAddressInput
}

input AddressCreateManyCountryInput {
  address_line1: String
  address_line2: String
  city: String
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

input AddressCreateManyCountryInputEnvelope {
  data: [AddressCreateManyCountryInput!]!
  skipDuplicates: Boolean
}

input AddressCreateManyInput {
  address_line1: String
  address_line2: String
  city: String
  country_id: String!
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

input AddressCreateNestedManyWithoutCountryInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutCountryInput!]
  create: [AddressCreateWithoutCountryInput!]
  createMany: AddressCreateManyCountryInputEnvelope
}

input AddressCreateNestedOneWithoutUserAddressInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserAddressInput
  create: AddressCreateWithoutUserAddressInput
}

input AddressCreateOrConnectWithoutCountryInput {
  create: AddressCreateWithoutCountryInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutUserAddressInput {
  create: AddressCreateWithoutUserAddressInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutCountryInput {
  address_line1: String
  address_line2: String
  city: String
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
  userAddress: UserAddressCreateNestedManyWithoutAddressInput
}

input AddressCreateWithoutUserAddressInput {
  address_line1: String
  address_line2: String
  city: String
  country: CountryCreateNestedOneWithoutAddressInput!
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

type AddressGroupBy {
  _count: AddressCountAggregate
  _max: AddressMaxAggregate
  _min: AddressMinAggregate
  address_line1: String
  address_line2: String
  city: String
  country_id: String!
  id: String!
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

input AddressListRelationFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

type AddressMaxAggregate {
  address_line1: String
  address_line2: String
  city: String
  country_id: String
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

input AddressMaxOrderByAggregateInput {
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
}

type AddressMinAggregate {
  address_line1: String
  address_line2: String
  city: String
  country_id: String
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

input AddressMinOrderByAggregateInput {
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
}

input AddressOrderByRelationAggregateInput {
  _count: SortOrder
}

input AddressOrderByWithAggregationInput {
  _count: AddressCountOrderByAggregateInput
  _max: AddressMaxOrderByAggregateInput
  _min: AddressMinOrderByAggregateInput
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
}

input AddressOrderByWithRelationInput {
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country: CountryOrderByWithRelationInput
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
  userAddress: UserAddressOrderByRelationAggregateInput
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum {
  address_line1
  address_line2
  city
  country_id
  id
  postal_code
  region
  street_number
  unit_number
}

input AddressScalarWhereInput {
  AND: [AddressScalarWhereInput!]
  NOT: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  address_line1: StringNullableFilter
  address_line2: StringNullableFilter
  city: StringNullableFilter
  country_id: StringFilter
  id: StringFilter
  postal_code: StringNullableFilter
  region: StringNullableFilter
  street_number: StringNullableFilter
  unit_number: StringNullableFilter
}

input AddressScalarWhereWithAggregatesInput {
  AND: [AddressScalarWhereWithAggregatesInput!]
  NOT: [AddressScalarWhereWithAggregatesInput!]
  OR: [AddressScalarWhereWithAggregatesInput!]
  address_line1: StringNullableWithAggregatesFilter
  address_line2: StringNullableWithAggregatesFilter
  city: StringNullableWithAggregatesFilter
  country_id: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  postal_code: StringNullableWithAggregatesFilter
  region: StringNullableWithAggregatesFilter
  street_number: StringNullableWithAggregatesFilter
  unit_number: StringNullableWithAggregatesFilter
}

input AddressUpdateInput {
  address_line1: NullableStringFieldUpdateOperationsInput
  address_line2: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  country: CountryUpdateOneRequiredWithoutAddressNestedInput
  id: StringFieldUpdateOperationsInput
  postal_code: NullableStringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  street_number: NullableStringFieldUpdateOperationsInput
  unit_number: NullableStringFieldUpdateOperationsInput
  userAddress: UserAddressUpdateManyWithoutAddressNestedInput
}

input AddressUpdateManyMutationInput {
  address_line1: NullableStringFieldUpdateOperationsInput
  address_line2: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  postal_code: NullableStringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  street_number: NullableStringFieldUpdateOperationsInput
  unit_number: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateManyWithWhereWithoutCountryInput {
  data: AddressUpdateManyMutationInput!
  where: AddressScalarWhereInput!
}

input AddressUpdateManyWithoutCountryNestedInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutCountryInput!]
  create: [AddressCreateWithoutCountryInput!]
  createMany: AddressCreateManyCountryInputEnvelope
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [AddressUpdateManyWithWhereWithoutCountryInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutCountryInput!]
}

input AddressUpdateOneRequiredWithoutUserAddressNestedInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserAddressInput
  create: AddressCreateWithoutUserAddressInput
  update: AddressUpdateWithoutUserAddressInput
  upsert: AddressUpsertWithoutUserAddressInput
}

input AddressUpdateWithWhereUniqueWithoutCountryInput {
  data: AddressUpdateWithoutCountryInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithoutCountryInput {
  address_line1: NullableStringFieldUpdateOperationsInput
  address_line2: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  postal_code: NullableStringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  street_number: NullableStringFieldUpdateOperationsInput
  unit_number: NullableStringFieldUpdateOperationsInput
  userAddress: UserAddressUpdateManyWithoutAddressNestedInput
}

input AddressUpdateWithoutUserAddressInput {
  address_line1: NullableStringFieldUpdateOperationsInput
  address_line2: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  country: CountryUpdateOneRequiredWithoutAddressNestedInput
  id: StringFieldUpdateOperationsInput
  postal_code: NullableStringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  street_number: NullableStringFieldUpdateOperationsInput
  unit_number: NullableStringFieldUpdateOperationsInput
}

input AddressUpsertWithWhereUniqueWithoutCountryInput {
  create: AddressCreateWithoutCountryInput!
  update: AddressUpdateWithoutCountryInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithoutUserAddressInput {
  create: AddressCreateWithoutUserAddressInput!
  update: AddressUpdateWithoutUserAddressInput!
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  address_line1: StringNullableFilter
  address_line2: StringNullableFilter
  city: StringNullableFilter
  country: CountryRelationFilter
  country_id: StringFilter
  id: StringFilter
  postal_code: StringNullableFilter
  region: StringNullableFilter
  street_number: StringNullableFilter
  unit_number: StringNullableFilter
  userAddress: UserAddressListRelationFilter
}

input AddressWhereUniqueInput {
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAddress {
  _count: AddressCountAggregate
  _max: AddressMaxAggregate
  _min: AddressMinAggregate
}

type AggregateCategory {
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
}

type AggregateCountry {
  _count: CountryCountAggregate
  _max: CountryMaxAggregate
  _min: CountryMinAggregate
}

type AggregateOrderLine {
  _avg: OrderLineAvgAggregate
  _count: OrderLineCountAggregate
  _max: OrderLineMaxAggregate
  _min: OrderLineMinAggregate
  _sum: OrderLineSumAggregate
}

type AggregateOrderStatus {
  _count: OrderStatusCountAggregate
  _max: OrderStatusMaxAggregate
  _min: OrderStatusMinAggregate
}

type AggregatePaymentType {
  _count: PaymentTypeCountAggregate
  _max: PaymentTypeMaxAggregate
  _min: PaymentTypeMinAggregate
}

type AggregateProduct {
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
}

type AggregateProductConfiguration {
  _count: ProductConfigurationCountAggregate
  _max: ProductConfigurationMaxAggregate
  _min: ProductConfigurationMinAggregate
}

type AggregateProductItem {
  _avg: ProductItemAvgAggregate
  _count: ProductItemCountAggregate
  _max: ProductItemMaxAggregate
  _min: ProductItemMinAggregate
  _sum: ProductItemSumAggregate
}

type AggregatePromotion {
  _avg: PromotionAvgAggregate
  _count: PromotionCountAggregate
  _max: PromotionMaxAggregate
  _min: PromotionMinAggregate
  _sum: PromotionSumAggregate
}

type AggregatePromotionCategory {
  _count: PromotionCategoryCountAggregate
  _max: PromotionCategoryMaxAggregate
  _min: PromotionCategoryMinAggregate
}

type AggregateShippingMethod {
  _avg: ShippingMethodAvgAggregate
  _count: ShippingMethodCountAggregate
  _max: ShippingMethodMaxAggregate
  _min: ShippingMethodMinAggregate
  _sum: ShippingMethodSumAggregate
}

type AggregateShopOrder {
  _avg: ShopOrderAvgAggregate
  _count: ShopOrderCountAggregate
  _max: ShopOrderMaxAggregate
  _min: ShopOrderMinAggregate
  _sum: ShopOrderSumAggregate
}

type AggregateShoppingCart {
  _count: ShoppingCartCountAggregate
  _max: ShoppingCartMaxAggregate
  _min: ShoppingCartMinAggregate
}

type AggregateShoppingCartItem {
  _avg: ShoppingCartItemAvgAggregate
  _count: ShoppingCartItemCountAggregate
  _max: ShoppingCartItemMaxAggregate
  _min: ShoppingCartItemMinAggregate
  _sum: ShoppingCartItemSumAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AggregateUserAddress {
  _avg: UserAddressAvgAggregate
  _count: UserAddressCountAggregate
  _max: UserAddressMaxAggregate
  _min: UserAddressMinAggregate
  _sum: UserAddressSumAggregate
}

type AggregateUserPaymentMethod {
  _count: UserPaymentMethodCountAggregate
  _max: UserPaymentMethodMaxAggregate
  _min: UserPaymentMethodMinAggregate
}

type AggregateUserReview {
  _avg: UserReviewAvgAggregate
  _count: UserReviewCountAggregate
  _max: UserReviewMaxAggregate
  _min: UserReviewMinAggregate
  _sum: UserReviewSumAggregate
}

type AggregateVariation {
  _count: VariationCountAggregate
  _max: VariationMaxAggregate
  _min: VariationMinAggregate
}

type AggregateVariationOption {
  _count: VariationOptionCountAggregate
  _max: VariationOptionMaxAggregate
  _min: VariationOptionMinAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Category {
  _count: CategoryCount
  description: String
  id: String!
  is_deleted: Boolean!
  name: String!
  parent_category_id: String
  product(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  promotionCategory(cursor: PromotionCategoryWhereUniqueInput, distinct: [PromotionCategoryScalarFieldEnum!], orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): [PromotionCategory!]!
  variation(cursor: VariationWhereUniqueInput, distinct: [VariationScalarFieldEnum!], orderBy: [VariationOrderByWithRelationInput!], skip: Int, take: Int, where: VariationWhereInput): [Variation!]!
}

type CategoryCount {
  product: Int!
  promotionCategory: Int!
  variation: Int!
}

type CategoryCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  is_deleted: Int!
  name: Int!
  parent_category_id: Int!
}

input CategoryCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  parent_category_id: SortOrder
}

input CategoryCreateInput {
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  parent_category_id: String
  product: ProductCreateNestedManyWithoutCategoryInput
  promotionCategory: PromotionCategoryCreateNestedManyWithoutCategoryInput
  variation: VariationCreateNestedManyWithoutCategoryInput
}

input CategoryCreateManyInput {
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  parent_category_id: String
}

input CategoryCreateNestedOneWithoutProductInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutProductInput
  create: CategoryCreateWithoutProductInput
}

input CategoryCreateNestedOneWithoutPromotionCategoryInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutPromotionCategoryInput
  create: CategoryCreateWithoutPromotionCategoryInput
}

input CategoryCreateNestedOneWithoutVariationInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutVariationInput
  create: CategoryCreateWithoutVariationInput
}

input CategoryCreateOrConnectWithoutProductInput {
  create: CategoryCreateWithoutProductInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutPromotionCategoryInput {
  create: CategoryCreateWithoutPromotionCategoryInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutVariationInput {
  create: CategoryCreateWithoutVariationInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutProductInput {
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  parent_category_id: String
  promotionCategory: PromotionCategoryCreateNestedManyWithoutCategoryInput
  variation: VariationCreateNestedManyWithoutCategoryInput
}

input CategoryCreateWithoutPromotionCategoryInput {
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  parent_category_id: String
  product: ProductCreateNestedManyWithoutCategoryInput
  variation: VariationCreateNestedManyWithoutCategoryInput
}

input CategoryCreateWithoutVariationInput {
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  parent_category_id: String
  product: ProductCreateNestedManyWithoutCategoryInput
  promotionCategory: PromotionCategoryCreateNestedManyWithoutCategoryInput
}

type CategoryGroupBy {
  _count: CategoryCountAggregate
  _max: CategoryMaxAggregate
  _min: CategoryMinAggregate
  description: String
  id: String!
  is_deleted: Boolean!
  name: String!
  parent_category_id: String
}

type CategoryMaxAggregate {
  description: String
  id: String
  is_deleted: Boolean
  name: String
  parent_category_id: String
}

input CategoryMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  parent_category_id: SortOrder
}

type CategoryMinAggregate {
  description: String
  id: String
  is_deleted: Boolean
  name: String
  parent_category_id: String
}

input CategoryMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  parent_category_id: SortOrder
}

input CategoryOrderByWithAggregationInput {
  _count: CategoryCountOrderByAggregateInput
  _max: CategoryMaxOrderByAggregateInput
  _min: CategoryMinOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  parent_category_id: SortOrder
}

input CategoryOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  parent_category_id: SortOrder
  product: ProductOrderByRelationAggregateInput
  promotionCategory: PromotionCategoryOrderByRelationAggregateInput
  variation: VariationOrderByRelationAggregateInput
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

enum CategoryScalarFieldEnum {
  description
  id
  is_deleted
  name
  parent_category_id
}

input CategoryScalarWhereWithAggregatesInput {
  AND: [CategoryScalarWhereWithAggregatesInput!]
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  is_deleted: BoolWithAggregatesFilter
  name: StringWithAggregatesFilter
  parent_category_id: StringNullableWithAggregatesFilter
}

input CategoryUpdateInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent_category_id: NullableStringFieldUpdateOperationsInput
  product: ProductUpdateManyWithoutCategoryNestedInput
  promotionCategory: PromotionCategoryUpdateManyWithoutCategoryNestedInput
  variation: VariationUpdateManyWithoutCategoryNestedInput
}

input CategoryUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent_category_id: NullableStringFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutProductNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutProductInput
  create: CategoryCreateWithoutProductInput
  update: CategoryUpdateWithoutProductInput
  upsert: CategoryUpsertWithoutProductInput
}

input CategoryUpdateOneRequiredWithoutPromotionCategoryNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutPromotionCategoryInput
  create: CategoryCreateWithoutPromotionCategoryInput
  update: CategoryUpdateWithoutPromotionCategoryInput
  upsert: CategoryUpsertWithoutPromotionCategoryInput
}

input CategoryUpdateOneRequiredWithoutVariationNestedInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutVariationInput
  create: CategoryCreateWithoutVariationInput
  update: CategoryUpdateWithoutVariationInput
  upsert: CategoryUpsertWithoutVariationInput
}

input CategoryUpdateWithoutProductInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent_category_id: NullableStringFieldUpdateOperationsInput
  promotionCategory: PromotionCategoryUpdateManyWithoutCategoryNestedInput
  variation: VariationUpdateManyWithoutCategoryNestedInput
}

input CategoryUpdateWithoutPromotionCategoryInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent_category_id: NullableStringFieldUpdateOperationsInput
  product: ProductUpdateManyWithoutCategoryNestedInput
  variation: VariationUpdateManyWithoutCategoryNestedInput
}

input CategoryUpdateWithoutVariationInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parent_category_id: NullableStringFieldUpdateOperationsInput
  product: ProductUpdateManyWithoutCategoryNestedInput
  promotionCategory: PromotionCategoryUpdateManyWithoutCategoryNestedInput
}

input CategoryUpsertWithoutProductInput {
  create: CategoryCreateWithoutProductInput!
  update: CategoryUpdateWithoutProductInput!
}

input CategoryUpsertWithoutPromotionCategoryInput {
  create: CategoryCreateWithoutPromotionCategoryInput!
  update: CategoryUpdateWithoutPromotionCategoryInput!
}

input CategoryUpsertWithoutVariationInput {
  create: CategoryCreateWithoutVariationInput!
  update: CategoryUpdateWithoutVariationInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  description: StringNullableFilter
  id: StringFilter
  is_deleted: BoolFilter
  name: StringFilter
  parent_category_id: StringNullableFilter
  product: ProductListRelationFilter
  promotionCategory: PromotionCategoryListRelationFilter
  variation: VariationListRelationFilter
}

input CategoryWhereUniqueInput {
  id: String
}

type Country {
  Address(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  _count: CountryCount
  country_name: String
  id: String!
}

type CountryCount {
  Address: Int!
}

type CountryCountAggregate {
  _all: Int!
  country_name: Int!
  id: Int!
}

input CountryCountOrderByAggregateInput {
  country_name: SortOrder
  id: SortOrder
}

input CountryCreateInput {
  Address: AddressCreateNestedManyWithoutCountryInput
  country_name: String
  id: String
}

input CountryCreateManyInput {
  country_name: String
  id: String
}

input CountryCreateNestedOneWithoutAddressInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutAddressInput
  create: CountryCreateWithoutAddressInput
}

input CountryCreateOrConnectWithoutAddressInput {
  create: CountryCreateWithoutAddressInput!
  where: CountryWhereUniqueInput!
}

input CountryCreateWithoutAddressInput {
  country_name: String
  id: String
}

type CountryGroupBy {
  _count: CountryCountAggregate
  _max: CountryMaxAggregate
  _min: CountryMinAggregate
  country_name: String
  id: String!
}

type CountryMaxAggregate {
  country_name: String
  id: String
}

input CountryMaxOrderByAggregateInput {
  country_name: SortOrder
  id: SortOrder
}

type CountryMinAggregate {
  country_name: String
  id: String
}

input CountryMinOrderByAggregateInput {
  country_name: SortOrder
  id: SortOrder
}

input CountryOrderByWithAggregationInput {
  _count: CountryCountOrderByAggregateInput
  _max: CountryMaxOrderByAggregateInput
  _min: CountryMinOrderByAggregateInput
  country_name: SortOrder
  id: SortOrder
}

input CountryOrderByWithRelationInput {
  Address: AddressOrderByRelationAggregateInput
  country_name: SortOrder
  id: SortOrder
}

input CountryRelationFilter {
  is: CountryWhereInput
  isNot: CountryWhereInput
}

enum CountryScalarFieldEnum {
  country_name
  id
}

input CountryScalarWhereWithAggregatesInput {
  AND: [CountryScalarWhereWithAggregatesInput!]
  NOT: [CountryScalarWhereWithAggregatesInput!]
  OR: [CountryScalarWhereWithAggregatesInput!]
  country_name: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
}

input CountryUpdateInput {
  Address: AddressUpdateManyWithoutCountryNestedInput
  country_name: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input CountryUpdateManyMutationInput {
  country_name: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input CountryUpdateOneRequiredWithoutAddressNestedInput {
  connect: CountryWhereUniqueInput
  connectOrCreate: CountryCreateOrConnectWithoutAddressInput
  create: CountryCreateWithoutAddressInput
  update: CountryUpdateWithoutAddressInput
  upsert: CountryUpsertWithoutAddressInput
}

input CountryUpdateWithoutAddressInput {
  country_name: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input CountryUpsertWithoutAddressInput {
  create: CountryCreateWithoutAddressInput!
  update: CountryUpdateWithoutAddressInput!
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  Address: AddressListRelationFilter
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  country_name: StringNullableFilter
  id: StringFilter
}

input CountryWhereUniqueInput {
  id: String
}

input CreateCategoryInput {
  description: String
  name: String
  parent_category_id: String
}

input CreateProductInput {
  categoryId: String
  description: String
  is_deleted: Boolean
  name: String
  productImage: String
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  adminDeleteUserById(id: String): User
  createAdminCategory(data: CreateCategoryInput): Category
  createAdminProduct(data: CreateProductInput): Product
  createManyAddress(data: [AddressCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCategory(data: [CategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCountry(data: [CountryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyOrderLine(data: [OrderLineCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyOrderStatus(data: [OrderStatusCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPaymentType(data: [PaymentTypeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProduct(data: [ProductCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProductConfiguration(data: [ProductConfigurationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProductItem(data: [ProductItemCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPromotion(data: [PromotionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPromotionCategory(data: [PromotionCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShippingMethod(data: [ShippingMethodCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShopOrder(data: [ShopOrderCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShoppingCart(data: [ShoppingCartCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShoppingCartItem(data: [ShoppingCartItemCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserAddress(data: [UserAddressCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserPaymentMethod(data: [UserPaymentMethodCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserReview(data: [UserReviewCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVariation(data: [VariationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVariationOption(data: [VariationOptionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAddress(data: AddressCreateInput!): Address!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneCountry(data: CountryCreateInput!): Country!
  createOneOrderLine(data: OrderLineCreateInput!): OrderLine!
  createOneOrderStatus(data: OrderStatusCreateInput!): OrderStatus!
  createOnePaymentType(data: PaymentTypeCreateInput!): PaymentType!
  createOneProduct(data: ProductCreateInput!): Product!
  createOneProductConfiguration(data: ProductConfigurationCreateInput!): ProductConfiguration!
  createOneProductItem(data: ProductItemCreateInput!): ProductItem!
  createOnePromotion(data: PromotionCreateInput!): Promotion!
  createOnePromotionCategory(data: PromotionCategoryCreateInput!): PromotionCategory!
  createOneShippingMethod(data: ShippingMethodCreateInput!): ShippingMethod!
  createOneShopOrder(data: ShopOrderCreateInput!): ShopOrder!
  createOneShoppingCart(data: ShoppingCartCreateInput!): ShoppingCart!
  createOneShoppingCartItem(data: ShoppingCartItemCreateInput!): ShoppingCartItem!
  createOneUser(data: UserCreateInput!): User!
  createOneUserAddress(data: UserAddressCreateInput!): UserAddress!
  createOneUserPaymentMethod(data: UserPaymentMethodCreateInput!): UserPaymentMethod!
  createOneUserReview(data: UserReviewCreateInput!): UserReview!
  createOneVariation(data: VariationCreateInput!): Variation!
  createOneVariationOption(data: VariationOptionCreateInput!): VariationOption!
  deleteManyAddress(where: AddressWhereInput): AffectedRowsOutput!
  deleteManyCategory(where: CategoryWhereInput): AffectedRowsOutput!
  deleteManyCountry(where: CountryWhereInput): AffectedRowsOutput!
  deleteManyOrderLine(where: OrderLineWhereInput): AffectedRowsOutput!
  deleteManyOrderStatus(where: OrderStatusWhereInput): AffectedRowsOutput!
  deleteManyPaymentType(where: PaymentTypeWhereInput): AffectedRowsOutput!
  deleteManyProduct(where: ProductWhereInput): AffectedRowsOutput!
  deleteManyProductConfiguration(where: ProductConfigurationWhereInput): AffectedRowsOutput!
  deleteManyProductItem(where: ProductItemWhereInput): AffectedRowsOutput!
  deleteManyPromotion(where: PromotionWhereInput): AffectedRowsOutput!
  deleteManyPromotionCategory(where: PromotionCategoryWhereInput): AffectedRowsOutput!
  deleteManyShippingMethod(where: ShippingMethodWhereInput): AffectedRowsOutput!
  deleteManyShopOrder(where: ShopOrderWhereInput): AffectedRowsOutput!
  deleteManyShoppingCart(where: ShoppingCartWhereInput): AffectedRowsOutput!
  deleteManyShoppingCartItem(where: ShoppingCartItemWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyUserAddress(where: UserAddressWhereInput): AffectedRowsOutput!
  deleteManyUserPaymentMethod(where: UserPaymentMethodWhereInput): AffectedRowsOutput!
  deleteManyUserReview(where: UserReviewWhereInput): AffectedRowsOutput!
  deleteManyVariation(where: VariationWhereInput): AffectedRowsOutput!
  deleteManyVariationOption(where: VariationOptionWhereInput): AffectedRowsOutput!
  deleteOneAddress(where: AddressWhereUniqueInput!): Address
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneCountry(where: CountryWhereUniqueInput!): Country
  deleteOneOrderLine(where: OrderLineWhereUniqueInput!): OrderLine
  deleteOneOrderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  deleteOnePaymentType(where: PaymentTypeWhereUniqueInput!): PaymentType
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  deleteOneProductConfiguration(where: ProductConfigurationWhereUniqueInput!): ProductConfiguration
  deleteOneProductItem(where: ProductItemWhereUniqueInput!): ProductItem
  deleteOnePromotion(where: PromotionWhereUniqueInput!): Promotion
  deleteOnePromotionCategory(where: PromotionCategoryWhereUniqueInput!): PromotionCategory
  deleteOneShippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  deleteOneShopOrder(where: ShopOrderWhereUniqueInput!): ShopOrder
  deleteOneShoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  deleteOneShoppingCartItem(where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneUserAddress(where: UserAddressWhereUniqueInput!): UserAddress
  deleteOneUserPaymentMethod(where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod
  deleteOneUserReview(where: UserReviewWhereUniqueInput!): UserReview
  deleteOneVariation(where: VariationWhereUniqueInput!): Variation
  deleteOneVariationOption(where: VariationOptionWhereUniqueInput!): VariationOption
  deleteUser(id: String): User
  updateAdminCategory(data: UpdateCategoryInput, id: String): Category
  updateAdminProduct(data: UpdateProductInput, id: String): Product
  updateManyAddress(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): AffectedRowsOutput!
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): AffectedRowsOutput!
  updateManyCountry(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): AffectedRowsOutput!
  updateManyOrderLine(data: OrderLineUpdateManyMutationInput!, where: OrderLineWhereInput): AffectedRowsOutput!
  updateManyOrderStatus(data: OrderStatusUpdateManyMutationInput!, where: OrderStatusWhereInput): AffectedRowsOutput!
  updateManyPaymentType(data: PaymentTypeUpdateManyMutationInput!, where: PaymentTypeWhereInput): AffectedRowsOutput!
  updateManyProduct(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): AffectedRowsOutput!
  updateManyProductConfiguration(data: ProductConfigurationUpdateManyMutationInput!, where: ProductConfigurationWhereInput): AffectedRowsOutput!
  updateManyProductItem(data: ProductItemUpdateManyMutationInput!, where: ProductItemWhereInput): AffectedRowsOutput!
  updateManyPromotion(data: PromotionUpdateManyMutationInput!, where: PromotionWhereInput): AffectedRowsOutput!
  updateManyPromotionCategory(data: PromotionCategoryUpdateManyMutationInput!, where: PromotionCategoryWhereInput): AffectedRowsOutput!
  updateManyShippingMethod(data: ShippingMethodUpdateManyMutationInput!, where: ShippingMethodWhereInput): AffectedRowsOutput!
  updateManyShopOrder(data: ShopOrderUpdateManyMutationInput!, where: ShopOrderWhereInput): AffectedRowsOutput!
  updateManyShoppingCart(data: ShoppingCartUpdateManyMutationInput!, where: ShoppingCartWhereInput): AffectedRowsOutput!
  updateManyShoppingCartItem(data: ShoppingCartItemUpdateManyMutationInput!, where: ShoppingCartItemWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyUserAddress(data: UserAddressUpdateManyMutationInput!, where: UserAddressWhereInput): AffectedRowsOutput!
  updateManyUserPaymentMethod(data: UserPaymentMethodUpdateManyMutationInput!, where: UserPaymentMethodWhereInput): AffectedRowsOutput!
  updateManyUserReview(data: UserReviewUpdateManyMutationInput!, where: UserReviewWhereInput): AffectedRowsOutput!
  updateManyVariation(data: VariationUpdateManyMutationInput!, where: VariationWhereInput): AffectedRowsOutput!
  updateManyVariationOption(data: VariationOptionUpdateManyMutationInput!, where: VariationOptionWhereInput): AffectedRowsOutput!
  updateOneAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateOneOrderLine(data: OrderLineUpdateInput!, where: OrderLineWhereUniqueInput!): OrderLine
  updateOneOrderStatus(data: OrderStatusUpdateInput!, where: OrderStatusWhereUniqueInput!): OrderStatus
  updateOnePaymentType(data: PaymentTypeUpdateInput!, where: PaymentTypeWhereUniqueInput!): PaymentType
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateOneProductConfiguration(data: ProductConfigurationUpdateInput!, where: ProductConfigurationWhereUniqueInput!): ProductConfiguration
  updateOneProductItem(data: ProductItemUpdateInput!, where: ProductItemWhereUniqueInput!): ProductItem
  updateOnePromotion(data: PromotionUpdateInput!, where: PromotionWhereUniqueInput!): Promotion
  updateOnePromotionCategory(data: PromotionCategoryUpdateInput!, where: PromotionCategoryWhereUniqueInput!): PromotionCategory
  updateOneShippingMethod(data: ShippingMethodUpdateInput!, where: ShippingMethodWhereUniqueInput!): ShippingMethod
  updateOneShopOrder(data: ShopOrderUpdateInput!, where: ShopOrderWhereUniqueInput!): ShopOrder
  updateOneShoppingCart(data: ShoppingCartUpdateInput!, where: ShoppingCartWhereUniqueInput!): ShoppingCart
  updateOneShoppingCartItem(data: ShoppingCartItemUpdateInput!, where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneUserAddress(data: UserAddressUpdateInput!, where: UserAddressWhereUniqueInput!): UserAddress
  updateOneUserPaymentMethod(data: UserPaymentMethodUpdateInput!, where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod
  updateOneUserReview(data: UserReviewUpdateInput!, where: UserReviewWhereUniqueInput!): UserReview
  updateOneVariation(data: VariationUpdateInput!, where: VariationWhereUniqueInput!): Variation
  updateOneVariationOption(data: VariationOptionUpdateInput!, where: VariationOptionWhereUniqueInput!): VariationOption
  upsertOneAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertOneCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertOneCountry(create: CountryCreateInput!, update: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country!
  upsertOneOrderLine(create: OrderLineCreateInput!, update: OrderLineUpdateInput!, where: OrderLineWhereUniqueInput!): OrderLine!
  upsertOneOrderStatus(create: OrderStatusCreateInput!, update: OrderStatusUpdateInput!, where: OrderStatusWhereUniqueInput!): OrderStatus!
  upsertOnePaymentType(create: PaymentTypeCreateInput!, update: PaymentTypeUpdateInput!, where: PaymentTypeWhereUniqueInput!): PaymentType!
  upsertOneProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  upsertOneProductConfiguration(create: ProductConfigurationCreateInput!, update: ProductConfigurationUpdateInput!, where: ProductConfigurationWhereUniqueInput!): ProductConfiguration!
  upsertOneProductItem(create: ProductItemCreateInput!, update: ProductItemUpdateInput!, where: ProductItemWhereUniqueInput!): ProductItem!
  upsertOnePromotion(create: PromotionCreateInput!, update: PromotionUpdateInput!, where: PromotionWhereUniqueInput!): Promotion!
  upsertOnePromotionCategory(create: PromotionCategoryCreateInput!, update: PromotionCategoryUpdateInput!, where: PromotionCategoryWhereUniqueInput!): PromotionCategory!
  upsertOneShippingMethod(create: ShippingMethodCreateInput!, update: ShippingMethodUpdateInput!, where: ShippingMethodWhereUniqueInput!): ShippingMethod!
  upsertOneShopOrder(create: ShopOrderCreateInput!, update: ShopOrderUpdateInput!, where: ShopOrderWhereUniqueInput!): ShopOrder!
  upsertOneShoppingCart(create: ShoppingCartCreateInput!, update: ShoppingCartUpdateInput!, where: ShoppingCartWhereUniqueInput!): ShoppingCart!
  upsertOneShoppingCartItem(create: ShoppingCartItemCreateInput!, update: ShoppingCartItemUpdateInput!, where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneUserAddress(create: UserAddressCreateInput!, update: UserAddressUpdateInput!, where: UserAddressWhereUniqueInput!): UserAddress!
  upsertOneUserPaymentMethod(create: UserPaymentMethodCreateInput!, update: UserPaymentMethodUpdateInput!, where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod!
  upsertOneUserReview(create: UserReviewCreateInput!, update: UserReviewUpdateInput!, where: UserReviewWhereUniqueInput!): UserReview!
  upsertOneVariation(create: VariationCreateInput!, update: VariationUpdateInput!, where: VariationWhereUniqueInput!): Variation!
  upsertOneVariationOption(create: VariationOptionCreateInput!, update: VariationOptionUpdateInput!, where: VariationOptionWhereUniqueInput!): VariationOption!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type OrderLine {
  id: String!
  order_id: String!
  price: Int
  productItem: ProductItem!
  product_item_id: String!
  qty: Int
  shopOrder: ShopOrder!
}

type OrderLineAvgAggregate {
  price: Float
  qty: Float
}

input OrderLineAvgOrderByAggregateInput {
  price: SortOrder
  qty: SortOrder
}

type OrderLineCountAggregate {
  _all: Int!
  id: Int!
  order_id: Int!
  price: Int!
  product_item_id: Int!
  qty: Int!
}

input OrderLineCountOrderByAggregateInput {
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input OrderLineCreateInput {
  id: String
  price: Int
  productItem: ProductItemCreateNestedOneWithoutOrderLineInput!
  qty: Int
  shopOrder: ShopOrderCreateNestedOneWithoutOrderLineInput!
}

input OrderLineCreateManyInput {
  id: String
  order_id: String!
  price: Int
  product_item_id: String!
  qty: Int
}

input OrderLineCreateManyProductItemInput {
  id: String
  order_id: String!
  price: Int
  qty: Int
}

input OrderLineCreateManyProductItemInputEnvelope {
  data: [OrderLineCreateManyProductItemInput!]!
  skipDuplicates: Boolean
}

input OrderLineCreateManyShopOrderInput {
  id: String
  price: Int
  product_item_id: String!
  qty: Int
}

input OrderLineCreateManyShopOrderInputEnvelope {
  data: [OrderLineCreateManyShopOrderInput!]!
  skipDuplicates: Boolean
}

input OrderLineCreateNestedManyWithoutProductItemInput {
  connect: [OrderLineWhereUniqueInput!]
  connectOrCreate: [OrderLineCreateOrConnectWithoutProductItemInput!]
  create: [OrderLineCreateWithoutProductItemInput!]
  createMany: OrderLineCreateManyProductItemInputEnvelope
}

input OrderLineCreateNestedManyWithoutShopOrderInput {
  connect: [OrderLineWhereUniqueInput!]
  connectOrCreate: [OrderLineCreateOrConnectWithoutShopOrderInput!]
  create: [OrderLineCreateWithoutShopOrderInput!]
  createMany: OrderLineCreateManyShopOrderInputEnvelope
}

input OrderLineCreateOrConnectWithoutProductItemInput {
  create: OrderLineCreateWithoutProductItemInput!
  where: OrderLineWhereUniqueInput!
}

input OrderLineCreateOrConnectWithoutShopOrderInput {
  create: OrderLineCreateWithoutShopOrderInput!
  where: OrderLineWhereUniqueInput!
}

input OrderLineCreateWithoutProductItemInput {
  id: String
  price: Int
  qty: Int
  shopOrder: ShopOrderCreateNestedOneWithoutOrderLineInput!
}

input OrderLineCreateWithoutShopOrderInput {
  id: String
  price: Int
  productItem: ProductItemCreateNestedOneWithoutOrderLineInput!
  qty: Int
}

type OrderLineGroupBy {
  _avg: OrderLineAvgAggregate
  _count: OrderLineCountAggregate
  _max: OrderLineMaxAggregate
  _min: OrderLineMinAggregate
  _sum: OrderLineSumAggregate
  id: String!
  order_id: String!
  price: Int
  product_item_id: String!
  qty: Int
}

input OrderLineListRelationFilter {
  every: OrderLineWhereInput
  none: OrderLineWhereInput
  some: OrderLineWhereInput
}

type OrderLineMaxAggregate {
  id: String
  order_id: String
  price: Int
  product_item_id: String
  qty: Int
}

input OrderLineMaxOrderByAggregateInput {
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

type OrderLineMinAggregate {
  id: String
  order_id: String
  price: Int
  product_item_id: String
  qty: Int
}

input OrderLineMinOrderByAggregateInput {
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input OrderLineOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderLineOrderByWithAggregationInput {
  _avg: OrderLineAvgOrderByAggregateInput
  _count: OrderLineCountOrderByAggregateInput
  _max: OrderLineMaxOrderByAggregateInput
  _min: OrderLineMinOrderByAggregateInput
  _sum: OrderLineSumOrderByAggregateInput
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input OrderLineOrderByWithRelationInput {
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  productItem: ProductItemOrderByWithRelationInput
  product_item_id: SortOrder
  qty: SortOrder
  shopOrder: ShopOrderOrderByWithRelationInput
}

enum OrderLineScalarFieldEnum {
  id
  order_id
  price
  product_item_id
  qty
}

input OrderLineScalarWhereInput {
  AND: [OrderLineScalarWhereInput!]
  NOT: [OrderLineScalarWhereInput!]
  OR: [OrderLineScalarWhereInput!]
  id: StringFilter
  order_id: StringFilter
  price: IntNullableFilter
  product_item_id: StringFilter
  qty: IntNullableFilter
}

input OrderLineScalarWhereWithAggregatesInput {
  AND: [OrderLineScalarWhereWithAggregatesInput!]
  NOT: [OrderLineScalarWhereWithAggregatesInput!]
  OR: [OrderLineScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  order_id: StringWithAggregatesFilter
  price: IntNullableWithAggregatesFilter
  product_item_id: StringWithAggregatesFilter
  qty: IntNullableWithAggregatesFilter
}

type OrderLineSumAggregate {
  price: Int
  qty: Int
}

input OrderLineSumOrderByAggregateInput {
  price: SortOrder
  qty: SortOrder
}

input OrderLineUpdateInput {
  id: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  productItem: ProductItemUpdateOneRequiredWithoutOrderLineNestedInput
  qty: NullableIntFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateOneRequiredWithoutOrderLineNestedInput
}

input OrderLineUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
}

input OrderLineUpdateManyWithWhereWithoutProductItemInput {
  data: OrderLineUpdateManyMutationInput!
  where: OrderLineScalarWhereInput!
}

input OrderLineUpdateManyWithWhereWithoutShopOrderInput {
  data: OrderLineUpdateManyMutationInput!
  where: OrderLineScalarWhereInput!
}

input OrderLineUpdateManyWithoutProductItemNestedInput {
  connect: [OrderLineWhereUniqueInput!]
  connectOrCreate: [OrderLineCreateOrConnectWithoutProductItemInput!]
  create: [OrderLineCreateWithoutProductItemInput!]
  createMany: OrderLineCreateManyProductItemInputEnvelope
  delete: [OrderLineWhereUniqueInput!]
  deleteMany: [OrderLineScalarWhereInput!]
  disconnect: [OrderLineWhereUniqueInput!]
  set: [OrderLineWhereUniqueInput!]
  update: [OrderLineUpdateWithWhereUniqueWithoutProductItemInput!]
  updateMany: [OrderLineUpdateManyWithWhereWithoutProductItemInput!]
  upsert: [OrderLineUpsertWithWhereUniqueWithoutProductItemInput!]
}

input OrderLineUpdateManyWithoutShopOrderNestedInput {
  connect: [OrderLineWhereUniqueInput!]
  connectOrCreate: [OrderLineCreateOrConnectWithoutShopOrderInput!]
  create: [OrderLineCreateWithoutShopOrderInput!]
  createMany: OrderLineCreateManyShopOrderInputEnvelope
  delete: [OrderLineWhereUniqueInput!]
  deleteMany: [OrderLineScalarWhereInput!]
  disconnect: [OrderLineWhereUniqueInput!]
  set: [OrderLineWhereUniqueInput!]
  update: [OrderLineUpdateWithWhereUniqueWithoutShopOrderInput!]
  updateMany: [OrderLineUpdateManyWithWhereWithoutShopOrderInput!]
  upsert: [OrderLineUpsertWithWhereUniqueWithoutShopOrderInput!]
}

input OrderLineUpdateWithWhereUniqueWithoutProductItemInput {
  data: OrderLineUpdateWithoutProductItemInput!
  where: OrderLineWhereUniqueInput!
}

input OrderLineUpdateWithWhereUniqueWithoutShopOrderInput {
  data: OrderLineUpdateWithoutShopOrderInput!
  where: OrderLineWhereUniqueInput!
}

input OrderLineUpdateWithoutProductItemInput {
  id: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateOneRequiredWithoutOrderLineNestedInput
}

input OrderLineUpdateWithoutShopOrderInput {
  id: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  productItem: ProductItemUpdateOneRequiredWithoutOrderLineNestedInput
  qty: NullableIntFieldUpdateOperationsInput
}

input OrderLineUpsertWithWhereUniqueWithoutProductItemInput {
  create: OrderLineCreateWithoutProductItemInput!
  update: OrderLineUpdateWithoutProductItemInput!
  where: OrderLineWhereUniqueInput!
}

input OrderLineUpsertWithWhereUniqueWithoutShopOrderInput {
  create: OrderLineCreateWithoutShopOrderInput!
  update: OrderLineUpdateWithoutShopOrderInput!
  where: OrderLineWhereUniqueInput!
}

input OrderLineWhereInput {
  AND: [OrderLineWhereInput!]
  NOT: [OrderLineWhereInput!]
  OR: [OrderLineWhereInput!]
  id: StringFilter
  order_id: StringFilter
  price: IntNullableFilter
  productItem: ProductItemRelationFilter
  product_item_id: StringFilter
  qty: IntNullableFilter
  shopOrder: ShopOrderRelationFilter
}

input OrderLineWhereUniqueInput {
  id: String
}

type OrderStatus {
  id: String!
  status: String
}

type OrderStatusCountAggregate {
  _all: Int!
  id: Int!
  status: Int!
}

input OrderStatusCountOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
}

input OrderStatusCreateInput {
  id: String
  status: String
}

input OrderStatusCreateManyInput {
  id: String
  status: String
}

type OrderStatusGroupBy {
  _count: OrderStatusCountAggregate
  _max: OrderStatusMaxAggregate
  _min: OrderStatusMinAggregate
  id: String!
  status: String
}

type OrderStatusMaxAggregate {
  id: String
  status: String
}

input OrderStatusMaxOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
}

type OrderStatusMinAggregate {
  id: String
  status: String
}

input OrderStatusMinOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
}

input OrderStatusOrderByWithAggregationInput {
  _count: OrderStatusCountOrderByAggregateInput
  _max: OrderStatusMaxOrderByAggregateInput
  _min: OrderStatusMinOrderByAggregateInput
  id: SortOrder
  status: SortOrder
}

input OrderStatusOrderByWithRelationInput {
  id: SortOrder
  status: SortOrder
}

enum OrderStatusScalarFieldEnum {
  id
  status
}

input OrderStatusScalarWhereWithAggregatesInput {
  AND: [OrderStatusScalarWhereWithAggregatesInput!]
  NOT: [OrderStatusScalarWhereWithAggregatesInput!]
  OR: [OrderStatusScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  status: StringNullableWithAggregatesFilter
}

input OrderStatusUpdateInput {
  id: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
}

input OrderStatusUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
}

input OrderStatusWhereInput {
  AND: [OrderStatusWhereInput!]
  NOT: [OrderStatusWhereInput!]
  OR: [OrderStatusWhereInput!]
  id: StringFilter
  status: StringNullableFilter
}

input OrderStatusWhereUniqueInput {
  id: String
}

type PaymentType {
  _count: PaymentTypeCount
  id: String!
  userPaymentMethod(cursor: UserPaymentMethodWhereUniqueInput, distinct: [UserPaymentMethodScalarFieldEnum!], orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): [UserPaymentMethod!]!
  value: String!
}

type PaymentTypeCount {
  userPaymentMethod: Int!
}

type PaymentTypeCountAggregate {
  _all: Int!
  id: Int!
  value: Int!
}

input PaymentTypeCountOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
}

input PaymentTypeCreateInput {
  id: String
  userPaymentMethod: UserPaymentMethodCreateNestedManyWithoutPaymentTypeInput
  value: String!
}

input PaymentTypeCreateManyInput {
  id: String
  value: String!
}

input PaymentTypeCreateNestedOneWithoutUserPaymentMethodInput {
  connect: PaymentTypeWhereUniqueInput
  connectOrCreate: PaymentTypeCreateOrConnectWithoutUserPaymentMethodInput
  create: PaymentTypeCreateWithoutUserPaymentMethodInput
}

input PaymentTypeCreateOrConnectWithoutUserPaymentMethodInput {
  create: PaymentTypeCreateWithoutUserPaymentMethodInput!
  where: PaymentTypeWhereUniqueInput!
}

input PaymentTypeCreateWithoutUserPaymentMethodInput {
  id: String
  value: String!
}

type PaymentTypeGroupBy {
  _count: PaymentTypeCountAggregate
  _max: PaymentTypeMaxAggregate
  _min: PaymentTypeMinAggregate
  id: String!
  value: String!
}

type PaymentTypeMaxAggregate {
  id: String
  value: String
}

input PaymentTypeMaxOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
}

type PaymentTypeMinAggregate {
  id: String
  value: String
}

input PaymentTypeMinOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
}

input PaymentTypeOrderByWithAggregationInput {
  _count: PaymentTypeCountOrderByAggregateInput
  _max: PaymentTypeMaxOrderByAggregateInput
  _min: PaymentTypeMinOrderByAggregateInput
  id: SortOrder
  value: SortOrder
}

input PaymentTypeOrderByWithRelationInput {
  id: SortOrder
  userPaymentMethod: UserPaymentMethodOrderByRelationAggregateInput
  value: SortOrder
}

input PaymentTypeRelationFilter {
  is: PaymentTypeWhereInput
  isNot: PaymentTypeWhereInput
}

enum PaymentTypeScalarFieldEnum {
  id
  value
}

input PaymentTypeScalarWhereWithAggregatesInput {
  AND: [PaymentTypeScalarWhereWithAggregatesInput!]
  NOT: [PaymentTypeScalarWhereWithAggregatesInput!]
  OR: [PaymentTypeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  value: StringWithAggregatesFilter
}

input PaymentTypeUpdateInput {
  id: StringFieldUpdateOperationsInput
  userPaymentMethod: UserPaymentMethodUpdateManyWithoutPaymentTypeNestedInput
  value: StringFieldUpdateOperationsInput
}

input PaymentTypeUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input PaymentTypeUpdateOneRequiredWithoutUserPaymentMethodNestedInput {
  connect: PaymentTypeWhereUniqueInput
  connectOrCreate: PaymentTypeCreateOrConnectWithoutUserPaymentMethodInput
  create: PaymentTypeCreateWithoutUserPaymentMethodInput
  update: PaymentTypeUpdateWithoutUserPaymentMethodInput
  upsert: PaymentTypeUpsertWithoutUserPaymentMethodInput
}

input PaymentTypeUpdateWithoutUserPaymentMethodInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input PaymentTypeUpsertWithoutUserPaymentMethodInput {
  create: PaymentTypeCreateWithoutUserPaymentMethodInput!
  update: PaymentTypeUpdateWithoutUserPaymentMethodInput!
}

input PaymentTypeWhereInput {
  AND: [PaymentTypeWhereInput!]
  NOT: [PaymentTypeWhereInput!]
  OR: [PaymentTypeWhereInput!]
  id: StringFilter
  userPaymentMethod: UserPaymentMethodListRelationFilter
  value: StringFilter
}

input PaymentTypeWhereUniqueInput {
  id: String
}

type Product {
  _count: ProductCount
  category: Category!
  category_id: String!
  description: String
  id: String!
  is_deleted: Boolean!
  name: String!
  productItem(cursor: ProductItemWhereUniqueInput, distinct: [ProductItemScalarFieldEnum!], orderBy: [ProductItemOrderByWithRelationInput!], skip: Int, take: Int, where: ProductItemWhereInput): [ProductItem!]!
  product_image: String
}

type ProductConfiguration {
  id: String!
  productItem: ProductItem!
  product_item_id: String!
  variationOption: VariationOption!
  variation_option_id: String!
}

type ProductConfigurationCountAggregate {
  _all: Int!
  id: Int!
  product_item_id: Int!
  variation_option_id: Int!
}

input ProductConfigurationCountOrderByAggregateInput {
  id: SortOrder
  product_item_id: SortOrder
  variation_option_id: SortOrder
}

input ProductConfigurationCreateInput {
  id: String
  productItem: ProductItemCreateNestedOneWithoutProductConfigurationInput!
  variationOption: VariationOptionCreateNestedOneWithoutProductConfigurationInput!
}

input ProductConfigurationCreateManyInput {
  id: String
  product_item_id: String!
  variation_option_id: String!
}

input ProductConfigurationCreateManyProductItemInput {
  id: String
  variation_option_id: String!
}

input ProductConfigurationCreateManyProductItemInputEnvelope {
  data: [ProductConfigurationCreateManyProductItemInput!]!
  skipDuplicates: Boolean
}

input ProductConfigurationCreateManyVariationOptionInput {
  id: String
  product_item_id: String!
}

input ProductConfigurationCreateManyVariationOptionInputEnvelope {
  data: [ProductConfigurationCreateManyVariationOptionInput!]!
  skipDuplicates: Boolean
}

input ProductConfigurationCreateNestedManyWithoutProductItemInput {
  connect: [ProductConfigurationWhereUniqueInput!]
  connectOrCreate: [ProductConfigurationCreateOrConnectWithoutProductItemInput!]
  create: [ProductConfigurationCreateWithoutProductItemInput!]
  createMany: ProductConfigurationCreateManyProductItemInputEnvelope
}

input ProductConfigurationCreateNestedManyWithoutVariationOptionInput {
  connect: [ProductConfigurationWhereUniqueInput!]
  connectOrCreate: [ProductConfigurationCreateOrConnectWithoutVariationOptionInput!]
  create: [ProductConfigurationCreateWithoutVariationOptionInput!]
  createMany: ProductConfigurationCreateManyVariationOptionInputEnvelope
}

input ProductConfigurationCreateOrConnectWithoutProductItemInput {
  create: ProductConfigurationCreateWithoutProductItemInput!
  where: ProductConfigurationWhereUniqueInput!
}

input ProductConfigurationCreateOrConnectWithoutVariationOptionInput {
  create: ProductConfigurationCreateWithoutVariationOptionInput!
  where: ProductConfigurationWhereUniqueInput!
}

input ProductConfigurationCreateWithoutProductItemInput {
  id: String
  variationOption: VariationOptionCreateNestedOneWithoutProductConfigurationInput!
}

input ProductConfigurationCreateWithoutVariationOptionInput {
  id: String
  productItem: ProductItemCreateNestedOneWithoutProductConfigurationInput!
}

type ProductConfigurationGroupBy {
  _count: ProductConfigurationCountAggregate
  _max: ProductConfigurationMaxAggregate
  _min: ProductConfigurationMinAggregate
  id: String!
  product_item_id: String!
  variation_option_id: String!
}

input ProductConfigurationListRelationFilter {
  every: ProductConfigurationWhereInput
  none: ProductConfigurationWhereInput
  some: ProductConfigurationWhereInput
}

type ProductConfigurationMaxAggregate {
  id: String
  product_item_id: String
  variation_option_id: String
}

input ProductConfigurationMaxOrderByAggregateInput {
  id: SortOrder
  product_item_id: SortOrder
  variation_option_id: SortOrder
}

type ProductConfigurationMinAggregate {
  id: String
  product_item_id: String
  variation_option_id: String
}

input ProductConfigurationMinOrderByAggregateInput {
  id: SortOrder
  product_item_id: SortOrder
  variation_option_id: SortOrder
}

input ProductConfigurationOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductConfigurationOrderByWithAggregationInput {
  _count: ProductConfigurationCountOrderByAggregateInput
  _max: ProductConfigurationMaxOrderByAggregateInput
  _min: ProductConfigurationMinOrderByAggregateInput
  id: SortOrder
  product_item_id: SortOrder
  variation_option_id: SortOrder
}

input ProductConfigurationOrderByWithRelationInput {
  id: SortOrder
  productItem: ProductItemOrderByWithRelationInput
  product_item_id: SortOrder
  variationOption: VariationOptionOrderByWithRelationInput
  variation_option_id: SortOrder
}

enum ProductConfigurationScalarFieldEnum {
  id
  product_item_id
  variation_option_id
}

input ProductConfigurationScalarWhereInput {
  AND: [ProductConfigurationScalarWhereInput!]
  NOT: [ProductConfigurationScalarWhereInput!]
  OR: [ProductConfigurationScalarWhereInput!]
  id: StringFilter
  product_item_id: StringFilter
  variation_option_id: StringFilter
}

input ProductConfigurationScalarWhereWithAggregatesInput {
  AND: [ProductConfigurationScalarWhereWithAggregatesInput!]
  NOT: [ProductConfigurationScalarWhereWithAggregatesInput!]
  OR: [ProductConfigurationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  product_item_id: StringWithAggregatesFilter
  variation_option_id: StringWithAggregatesFilter
}

input ProductConfigurationUpdateInput {
  id: StringFieldUpdateOperationsInput
  productItem: ProductItemUpdateOneRequiredWithoutProductConfigurationNestedInput
  variationOption: VariationOptionUpdateOneRequiredWithoutProductConfigurationNestedInput
}

input ProductConfigurationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input ProductConfigurationUpdateManyWithWhereWithoutProductItemInput {
  data: ProductConfigurationUpdateManyMutationInput!
  where: ProductConfigurationScalarWhereInput!
}

input ProductConfigurationUpdateManyWithWhereWithoutVariationOptionInput {
  data: ProductConfigurationUpdateManyMutationInput!
  where: ProductConfigurationScalarWhereInput!
}

input ProductConfigurationUpdateManyWithoutProductItemNestedInput {
  connect: [ProductConfigurationWhereUniqueInput!]
  connectOrCreate: [ProductConfigurationCreateOrConnectWithoutProductItemInput!]
  create: [ProductConfigurationCreateWithoutProductItemInput!]
  createMany: ProductConfigurationCreateManyProductItemInputEnvelope
  delete: [ProductConfigurationWhereUniqueInput!]
  deleteMany: [ProductConfigurationScalarWhereInput!]
  disconnect: [ProductConfigurationWhereUniqueInput!]
  set: [ProductConfigurationWhereUniqueInput!]
  update: [ProductConfigurationUpdateWithWhereUniqueWithoutProductItemInput!]
  updateMany: [ProductConfigurationUpdateManyWithWhereWithoutProductItemInput!]
  upsert: [ProductConfigurationUpsertWithWhereUniqueWithoutProductItemInput!]
}

input ProductConfigurationUpdateManyWithoutVariationOptionNestedInput {
  connect: [ProductConfigurationWhereUniqueInput!]
  connectOrCreate: [ProductConfigurationCreateOrConnectWithoutVariationOptionInput!]
  create: [ProductConfigurationCreateWithoutVariationOptionInput!]
  createMany: ProductConfigurationCreateManyVariationOptionInputEnvelope
  delete: [ProductConfigurationWhereUniqueInput!]
  deleteMany: [ProductConfigurationScalarWhereInput!]
  disconnect: [ProductConfigurationWhereUniqueInput!]
  set: [ProductConfigurationWhereUniqueInput!]
  update: [ProductConfigurationUpdateWithWhereUniqueWithoutVariationOptionInput!]
  updateMany: [ProductConfigurationUpdateManyWithWhereWithoutVariationOptionInput!]
  upsert: [ProductConfigurationUpsertWithWhereUniqueWithoutVariationOptionInput!]
}

input ProductConfigurationUpdateWithWhereUniqueWithoutProductItemInput {
  data: ProductConfigurationUpdateWithoutProductItemInput!
  where: ProductConfigurationWhereUniqueInput!
}

input ProductConfigurationUpdateWithWhereUniqueWithoutVariationOptionInput {
  data: ProductConfigurationUpdateWithoutVariationOptionInput!
  where: ProductConfigurationWhereUniqueInput!
}

input ProductConfigurationUpdateWithoutProductItemInput {
  id: StringFieldUpdateOperationsInput
  variationOption: VariationOptionUpdateOneRequiredWithoutProductConfigurationNestedInput
}

input ProductConfigurationUpdateWithoutVariationOptionInput {
  id: StringFieldUpdateOperationsInput
  productItem: ProductItemUpdateOneRequiredWithoutProductConfigurationNestedInput
}

input ProductConfigurationUpsertWithWhereUniqueWithoutProductItemInput {
  create: ProductConfigurationCreateWithoutProductItemInput!
  update: ProductConfigurationUpdateWithoutProductItemInput!
  where: ProductConfigurationWhereUniqueInput!
}

input ProductConfigurationUpsertWithWhereUniqueWithoutVariationOptionInput {
  create: ProductConfigurationCreateWithoutVariationOptionInput!
  update: ProductConfigurationUpdateWithoutVariationOptionInput!
  where: ProductConfigurationWhereUniqueInput!
}

input ProductConfigurationWhereInput {
  AND: [ProductConfigurationWhereInput!]
  NOT: [ProductConfigurationWhereInput!]
  OR: [ProductConfigurationWhereInput!]
  id: StringFilter
  productItem: ProductItemRelationFilter
  product_item_id: StringFilter
  variationOption: VariationOptionRelationFilter
  variation_option_id: StringFilter
}

input ProductConfigurationWhereUniqueInput {
  id: String
}

type ProductCount {
  productItem: Int!
}

type ProductCountAggregate {
  _all: Int!
  category_id: Int!
  description: Int!
  id: Int!
  is_deleted: Int!
  name: Int!
  product_image: Int!
}

input ProductCountOrderByAggregateInput {
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  product_image: SortOrder
}

input ProductCreateInput {
  category: CategoryCreateNestedOneWithoutProductInput!
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  productItem: ProductItemCreateNestedManyWithoutProductInput
  product_image: String
}

input ProductCreateManyCategoryInput {
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  product_image: String
}

input ProductCreateManyCategoryInputEnvelope {
  data: [ProductCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyInput {
  category_id: String!
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  product_image: String
}

input ProductCreateNestedManyWithoutCategoryInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput!]
  create: [ProductCreateWithoutCategoryInput!]
  createMany: ProductCreateManyCategoryInputEnvelope
}

input ProductCreateNestedOneWithoutProductItemInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutProductItemInput
  create: ProductCreateWithoutProductItemInput
}

input ProductCreateOrConnectWithoutCategoryInput {
  create: ProductCreateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutProductItemInput {
  create: ProductCreateWithoutProductItemInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutCategoryInput {
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  productItem: ProductItemCreateNestedManyWithoutProductInput
  product_image: String
}

input ProductCreateWithoutProductItemInput {
  category: CategoryCreateNestedOneWithoutProductInput!
  description: String
  id: String
  is_deleted: Boolean
  name: String!
  product_image: String
}

type ProductGroupBy {
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  category_id: String!
  description: String
  id: String!
  is_deleted: Boolean!
  name: String!
  product_image: String
}

type ProductItem {
  _count: ProductItemCount
  id: String!
  is_deleted: Boolean!
  orderLine(cursor: OrderLineWhereUniqueInput, distinct: [OrderLineScalarFieldEnum!], orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): [OrderLine!]!
  price: Int
  product: Product!
  productConfiguration(cursor: ProductConfigurationWhereUniqueInput, distinct: [ProductConfigurationScalarFieldEnum!], orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): [ProductConfiguration!]!
  product_id: String!
  product_image: String
  qty_in_stock: Int
  shoppingCartItem(cursor: ShoppingCartItemWhereUniqueInput, distinct: [ShoppingCartItemScalarFieldEnum!], orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): [ShoppingCartItem!]!
  sku: String
  userReview(cursor: UserReviewWhereUniqueInput, distinct: [UserReviewScalarFieldEnum!], orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): [UserReview!]!
}

type ProductItemAvgAggregate {
  price: Float
  qty_in_stock: Float
}

input ProductItemAvgOrderByAggregateInput {
  price: SortOrder
  qty_in_stock: SortOrder
}

type ProductItemCount {
  orderLine: Int!
  productConfiguration: Int!
  shoppingCartItem: Int!
  userReview: Int!
}

type ProductItemCountAggregate {
  _all: Int!
  id: Int!
  is_deleted: Int!
  price: Int!
  product_id: Int!
  product_image: Int!
  qty_in_stock: Int!
  sku: Int!
}

input ProductItemCountOrderByAggregateInput {
  id: SortOrder
  is_deleted: SortOrder
  price: SortOrder
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  sku: SortOrder
}

input ProductItemCreateInput {
  id: String
  is_deleted: Boolean
  orderLine: OrderLineCreateNestedManyWithoutProductItemInput
  price: Int
  product: ProductCreateNestedOneWithoutProductItemInput!
  productConfiguration: ProductConfigurationCreateNestedManyWithoutProductItemInput
  product_image: String
  qty_in_stock: Int
  shoppingCartItem: ShoppingCartItemCreateNestedManyWithoutProductItemInput
  sku: String
  userReview: UserReviewCreateNestedManyWithoutOrdered_productInput
}

input ProductItemCreateManyInput {
  id: String
  is_deleted: Boolean
  price: Int
  product_id: String!
  product_image: String
  qty_in_stock: Int
  sku: String
}

input ProductItemCreateManyProductInput {
  id: String
  is_deleted: Boolean
  price: Int
  product_image: String
  qty_in_stock: Int
  sku: String
}

input ProductItemCreateManyProductInputEnvelope {
  data: [ProductItemCreateManyProductInput!]!
  skipDuplicates: Boolean
}

input ProductItemCreateNestedManyWithoutProductInput {
  connect: [ProductItemWhereUniqueInput!]
  connectOrCreate: [ProductItemCreateOrConnectWithoutProductInput!]
  create: [ProductItemCreateWithoutProductInput!]
  createMany: ProductItemCreateManyProductInputEnvelope
}

input ProductItemCreateNestedOneWithoutOrderLineInput {
  connect: ProductItemWhereUniqueInput
  connectOrCreate: ProductItemCreateOrConnectWithoutOrderLineInput
  create: ProductItemCreateWithoutOrderLineInput
}

input ProductItemCreateNestedOneWithoutProductConfigurationInput {
  connect: ProductItemWhereUniqueInput
  connectOrCreate: ProductItemCreateOrConnectWithoutProductConfigurationInput
  create: ProductItemCreateWithoutProductConfigurationInput
}

input ProductItemCreateNestedOneWithoutShoppingCartItemInput {
  connect: ProductItemWhereUniqueInput
  connectOrCreate: ProductItemCreateOrConnectWithoutShoppingCartItemInput
  create: ProductItemCreateWithoutShoppingCartItemInput
}

input ProductItemCreateNestedOneWithoutUserReviewInput {
  connect: ProductItemWhereUniqueInput
  connectOrCreate: ProductItemCreateOrConnectWithoutUserReviewInput
  create: ProductItemCreateWithoutUserReviewInput
}

input ProductItemCreateOrConnectWithoutOrderLineInput {
  create: ProductItemCreateWithoutOrderLineInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemCreateOrConnectWithoutProductConfigurationInput {
  create: ProductItemCreateWithoutProductConfigurationInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemCreateOrConnectWithoutProductInput {
  create: ProductItemCreateWithoutProductInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemCreateOrConnectWithoutShoppingCartItemInput {
  create: ProductItemCreateWithoutShoppingCartItemInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemCreateOrConnectWithoutUserReviewInput {
  create: ProductItemCreateWithoutUserReviewInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemCreateWithoutOrderLineInput {
  id: String
  is_deleted: Boolean
  price: Int
  product: ProductCreateNestedOneWithoutProductItemInput!
  productConfiguration: ProductConfigurationCreateNestedManyWithoutProductItemInput
  product_image: String
  qty_in_stock: Int
  shoppingCartItem: ShoppingCartItemCreateNestedManyWithoutProductItemInput
  sku: String
  userReview: UserReviewCreateNestedManyWithoutOrdered_productInput
}

input ProductItemCreateWithoutProductConfigurationInput {
  id: String
  is_deleted: Boolean
  orderLine: OrderLineCreateNestedManyWithoutProductItemInput
  price: Int
  product: ProductCreateNestedOneWithoutProductItemInput!
  product_image: String
  qty_in_stock: Int
  shoppingCartItem: ShoppingCartItemCreateNestedManyWithoutProductItemInput
  sku: String
  userReview: UserReviewCreateNestedManyWithoutOrdered_productInput
}

input ProductItemCreateWithoutProductInput {
  id: String
  is_deleted: Boolean
  orderLine: OrderLineCreateNestedManyWithoutProductItemInput
  price: Int
  productConfiguration: ProductConfigurationCreateNestedManyWithoutProductItemInput
  product_image: String
  qty_in_stock: Int
  shoppingCartItem: ShoppingCartItemCreateNestedManyWithoutProductItemInput
  sku: String
  userReview: UserReviewCreateNestedManyWithoutOrdered_productInput
}

input ProductItemCreateWithoutShoppingCartItemInput {
  id: String
  is_deleted: Boolean
  orderLine: OrderLineCreateNestedManyWithoutProductItemInput
  price: Int
  product: ProductCreateNestedOneWithoutProductItemInput!
  productConfiguration: ProductConfigurationCreateNestedManyWithoutProductItemInput
  product_image: String
  qty_in_stock: Int
  sku: String
  userReview: UserReviewCreateNestedManyWithoutOrdered_productInput
}

input ProductItemCreateWithoutUserReviewInput {
  id: String
  is_deleted: Boolean
  orderLine: OrderLineCreateNestedManyWithoutProductItemInput
  price: Int
  product: ProductCreateNestedOneWithoutProductItemInput!
  productConfiguration: ProductConfigurationCreateNestedManyWithoutProductItemInput
  product_image: String
  qty_in_stock: Int
  shoppingCartItem: ShoppingCartItemCreateNestedManyWithoutProductItemInput
  sku: String
}

type ProductItemGroupBy {
  _avg: ProductItemAvgAggregate
  _count: ProductItemCountAggregate
  _max: ProductItemMaxAggregate
  _min: ProductItemMinAggregate
  _sum: ProductItemSumAggregate
  id: String!
  is_deleted: Boolean!
  price: Int
  product_id: String!
  product_image: String
  qty_in_stock: Int
  sku: String
}

input ProductItemListRelationFilter {
  every: ProductItemWhereInput
  none: ProductItemWhereInput
  some: ProductItemWhereInput
}

type ProductItemMaxAggregate {
  id: String
  is_deleted: Boolean
  price: Int
  product_id: String
  product_image: String
  qty_in_stock: Int
  sku: String
}

input ProductItemMaxOrderByAggregateInput {
  id: SortOrder
  is_deleted: SortOrder
  price: SortOrder
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  sku: SortOrder
}

type ProductItemMinAggregate {
  id: String
  is_deleted: Boolean
  price: Int
  product_id: String
  product_image: String
  qty_in_stock: Int
  sku: String
}

input ProductItemMinOrderByAggregateInput {
  id: SortOrder
  is_deleted: SortOrder
  price: SortOrder
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  sku: SortOrder
}

input ProductItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductItemOrderByWithAggregationInput {
  _avg: ProductItemAvgOrderByAggregateInput
  _count: ProductItemCountOrderByAggregateInput
  _max: ProductItemMaxOrderByAggregateInput
  _min: ProductItemMinOrderByAggregateInput
  _sum: ProductItemSumOrderByAggregateInput
  id: SortOrder
  is_deleted: SortOrder
  price: SortOrder
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  sku: SortOrder
}

input ProductItemOrderByWithRelationInput {
  id: SortOrder
  is_deleted: SortOrder
  orderLine: OrderLineOrderByRelationAggregateInput
  price: SortOrder
  product: ProductOrderByWithRelationInput
  productConfiguration: ProductConfigurationOrderByRelationAggregateInput
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  shoppingCartItem: ShoppingCartItemOrderByRelationAggregateInput
  sku: SortOrder
  userReview: UserReviewOrderByRelationAggregateInput
}

input ProductItemRelationFilter {
  is: ProductItemWhereInput
  isNot: ProductItemWhereInput
}

enum ProductItemScalarFieldEnum {
  id
  is_deleted
  price
  product_id
  product_image
  qty_in_stock
  sku
}

input ProductItemScalarWhereInput {
  AND: [ProductItemScalarWhereInput!]
  NOT: [ProductItemScalarWhereInput!]
  OR: [ProductItemScalarWhereInput!]
  id: StringFilter
  is_deleted: BoolFilter
  price: IntNullableFilter
  product_id: StringFilter
  product_image: StringNullableFilter
  qty_in_stock: IntNullableFilter
  sku: StringNullableFilter
}

input ProductItemScalarWhereWithAggregatesInput {
  AND: [ProductItemScalarWhereWithAggregatesInput!]
  NOT: [ProductItemScalarWhereWithAggregatesInput!]
  OR: [ProductItemScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  is_deleted: BoolWithAggregatesFilter
  price: IntNullableWithAggregatesFilter
  product_id: StringWithAggregatesFilter
  product_image: StringNullableWithAggregatesFilter
  qty_in_stock: IntNullableWithAggregatesFilter
  sku: StringNullableWithAggregatesFilter
}

type ProductItemSumAggregate {
  price: Int
  qty_in_stock: Int
}

input ProductItemSumOrderByAggregateInput {
  price: SortOrder
  qty_in_stock: SortOrder
}

input ProductItemUpdateInput {
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  orderLine: OrderLineUpdateManyWithoutProductItemNestedInput
  price: NullableIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutProductItemNestedInput
  productConfiguration: ProductConfigurationUpdateManyWithoutProductItemNestedInput
  product_image: NullableStringFieldUpdateOperationsInput
  qty_in_stock: NullableIntFieldUpdateOperationsInput
  shoppingCartItem: ShoppingCartItemUpdateManyWithoutProductItemNestedInput
  sku: NullableStringFieldUpdateOperationsInput
  userReview: UserReviewUpdateManyWithoutOrdered_productNestedInput
}

input ProductItemUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_image: NullableStringFieldUpdateOperationsInput
  qty_in_stock: NullableIntFieldUpdateOperationsInput
  sku: NullableStringFieldUpdateOperationsInput
}

input ProductItemUpdateManyWithWhereWithoutProductInput {
  data: ProductItemUpdateManyMutationInput!
  where: ProductItemScalarWhereInput!
}

input ProductItemUpdateManyWithoutProductNestedInput {
  connect: [ProductItemWhereUniqueInput!]
  connectOrCreate: [ProductItemCreateOrConnectWithoutProductInput!]
  create: [ProductItemCreateWithoutProductInput!]
  createMany: ProductItemCreateManyProductInputEnvelope
  delete: [ProductItemWhereUniqueInput!]
  deleteMany: [ProductItemScalarWhereInput!]
  disconnect: [ProductItemWhereUniqueInput!]
  set: [ProductItemWhereUniqueInput!]
  update: [ProductItemUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ProductItemUpdateManyWithWhereWithoutProductInput!]
  upsert: [ProductItemUpsertWithWhereUniqueWithoutProductInput!]
}

input ProductItemUpdateOneRequiredWithoutOrderLineNestedInput {
  connect: ProductItemWhereUniqueInput
  connectOrCreate: ProductItemCreateOrConnectWithoutOrderLineInput
  create: ProductItemCreateWithoutOrderLineInput
  update: ProductItemUpdateWithoutOrderLineInput
  upsert: ProductItemUpsertWithoutOrderLineInput
}

input ProductItemUpdateOneRequiredWithoutProductConfigurationNestedInput {
  connect: ProductItemWhereUniqueInput
  connectOrCreate: ProductItemCreateOrConnectWithoutProductConfigurationInput
  create: ProductItemCreateWithoutProductConfigurationInput
  update: ProductItemUpdateWithoutProductConfigurationInput
  upsert: ProductItemUpsertWithoutProductConfigurationInput
}

input ProductItemUpdateOneRequiredWithoutShoppingCartItemNestedInput {
  connect: ProductItemWhereUniqueInput
  connectOrCreate: ProductItemCreateOrConnectWithoutShoppingCartItemInput
  create: ProductItemCreateWithoutShoppingCartItemInput
  update: ProductItemUpdateWithoutShoppingCartItemInput
  upsert: ProductItemUpsertWithoutShoppingCartItemInput
}

input ProductItemUpdateOneRequiredWithoutUserReviewNestedInput {
  connect: ProductItemWhereUniqueInput
  connectOrCreate: ProductItemCreateOrConnectWithoutUserReviewInput
  create: ProductItemCreateWithoutUserReviewInput
  update: ProductItemUpdateWithoutUserReviewInput
  upsert: ProductItemUpsertWithoutUserReviewInput
}

input ProductItemUpdateWithWhereUniqueWithoutProductInput {
  data: ProductItemUpdateWithoutProductInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemUpdateWithoutOrderLineInput {
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutProductItemNestedInput
  productConfiguration: ProductConfigurationUpdateManyWithoutProductItemNestedInput
  product_image: NullableStringFieldUpdateOperationsInput
  qty_in_stock: NullableIntFieldUpdateOperationsInput
  shoppingCartItem: ShoppingCartItemUpdateManyWithoutProductItemNestedInput
  sku: NullableStringFieldUpdateOperationsInput
  userReview: UserReviewUpdateManyWithoutOrdered_productNestedInput
}

input ProductItemUpdateWithoutProductConfigurationInput {
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  orderLine: OrderLineUpdateManyWithoutProductItemNestedInput
  price: NullableIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutProductItemNestedInput
  product_image: NullableStringFieldUpdateOperationsInput
  qty_in_stock: NullableIntFieldUpdateOperationsInput
  shoppingCartItem: ShoppingCartItemUpdateManyWithoutProductItemNestedInput
  sku: NullableStringFieldUpdateOperationsInput
  userReview: UserReviewUpdateManyWithoutOrdered_productNestedInput
}

input ProductItemUpdateWithoutProductInput {
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  orderLine: OrderLineUpdateManyWithoutProductItemNestedInput
  price: NullableIntFieldUpdateOperationsInput
  productConfiguration: ProductConfigurationUpdateManyWithoutProductItemNestedInput
  product_image: NullableStringFieldUpdateOperationsInput
  qty_in_stock: NullableIntFieldUpdateOperationsInput
  shoppingCartItem: ShoppingCartItemUpdateManyWithoutProductItemNestedInput
  sku: NullableStringFieldUpdateOperationsInput
  userReview: UserReviewUpdateManyWithoutOrdered_productNestedInput
}

input ProductItemUpdateWithoutShoppingCartItemInput {
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  orderLine: OrderLineUpdateManyWithoutProductItemNestedInput
  price: NullableIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutProductItemNestedInput
  productConfiguration: ProductConfigurationUpdateManyWithoutProductItemNestedInput
  product_image: NullableStringFieldUpdateOperationsInput
  qty_in_stock: NullableIntFieldUpdateOperationsInput
  sku: NullableStringFieldUpdateOperationsInput
  userReview: UserReviewUpdateManyWithoutOrdered_productNestedInput
}

input ProductItemUpdateWithoutUserReviewInput {
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  orderLine: OrderLineUpdateManyWithoutProductItemNestedInput
  price: NullableIntFieldUpdateOperationsInput
  product: ProductUpdateOneRequiredWithoutProductItemNestedInput
  productConfiguration: ProductConfigurationUpdateManyWithoutProductItemNestedInput
  product_image: NullableStringFieldUpdateOperationsInput
  qty_in_stock: NullableIntFieldUpdateOperationsInput
  shoppingCartItem: ShoppingCartItemUpdateManyWithoutProductItemNestedInput
  sku: NullableStringFieldUpdateOperationsInput
}

input ProductItemUpsertWithWhereUniqueWithoutProductInput {
  create: ProductItemCreateWithoutProductInput!
  update: ProductItemUpdateWithoutProductInput!
  where: ProductItemWhereUniqueInput!
}

input ProductItemUpsertWithoutOrderLineInput {
  create: ProductItemCreateWithoutOrderLineInput!
  update: ProductItemUpdateWithoutOrderLineInput!
}

input ProductItemUpsertWithoutProductConfigurationInput {
  create: ProductItemCreateWithoutProductConfigurationInput!
  update: ProductItemUpdateWithoutProductConfigurationInput!
}

input ProductItemUpsertWithoutShoppingCartItemInput {
  create: ProductItemCreateWithoutShoppingCartItemInput!
  update: ProductItemUpdateWithoutShoppingCartItemInput!
}

input ProductItemUpsertWithoutUserReviewInput {
  create: ProductItemCreateWithoutUserReviewInput!
  update: ProductItemUpdateWithoutUserReviewInput!
}

input ProductItemWhereInput {
  AND: [ProductItemWhereInput!]
  NOT: [ProductItemWhereInput!]
  OR: [ProductItemWhereInput!]
  id: StringFilter
  is_deleted: BoolFilter
  orderLine: OrderLineListRelationFilter
  price: IntNullableFilter
  product: ProductRelationFilter
  productConfiguration: ProductConfigurationListRelationFilter
  product_id: StringFilter
  product_image: StringNullableFilter
  qty_in_stock: IntNullableFilter
  shoppingCartItem: ShoppingCartItemListRelationFilter
  sku: StringNullableFilter
  userReview: UserReviewListRelationFilter
}

input ProductItemWhereUniqueInput {
  id: String
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

type ProductMaxAggregate {
  category_id: String
  description: String
  id: String
  is_deleted: Boolean
  name: String
  product_image: String
}

input ProductMaxOrderByAggregateInput {
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  product_image: SortOrder
}

type ProductMinAggregate {
  category_id: String
  description: String
  id: String
  is_deleted: Boolean
  name: String
  product_image: String
}

input ProductMinOrderByAggregateInput {
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  product_image: SortOrder
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderByWithAggregationInput {
  _count: ProductCountOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  product_image: SortOrder
}

input ProductOrderByWithRelationInput {
  category: CategoryOrderByWithRelationInput
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  name: SortOrder
  productItem: ProductItemOrderByRelationAggregateInput
  product_image: SortOrder
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

enum ProductScalarFieldEnum {
  category_id
  description
  id
  is_deleted
  name
  product_image
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  category_id: StringFilter
  description: StringNullableFilter
  id: StringFilter
  is_deleted: BoolFilter
  name: StringFilter
  product_image: StringNullableFilter
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput!]
  NOT: [ProductScalarWhereWithAggregatesInput!]
  OR: [ProductScalarWhereWithAggregatesInput!]
  category_id: StringWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  is_deleted: BoolWithAggregatesFilter
  name: StringWithAggregatesFilter
  product_image: StringNullableWithAggregatesFilter
}

input ProductUpdateInput {
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  productItem: ProductItemUpdateManyWithoutProductNestedInput
  product_image: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  product_image: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateManyWithWhereWithoutCategoryInput {
  data: ProductUpdateManyMutationInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateManyWithoutCategoryNestedInput {
  connect: [ProductWhereUniqueInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCategoryInput!]
  create: [ProductCreateWithoutCategoryInput!]
  createMany: ProductCreateManyCategoryInputEnvelope
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ProductUpdateOneRequiredWithoutProductItemNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutProductItemInput
  create: ProductCreateWithoutProductItemInput
  update: ProductUpdateWithoutProductItemInput
  upsert: ProductUpsertWithoutProductItemInput
}

input ProductUpdateWithWhereUniqueWithoutCategoryInput {
  data: ProductUpdateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithoutCategoryInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  productItem: ProductItemUpdateManyWithoutProductNestedInput
  product_image: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutProductItemInput {
  category: CategoryUpdateOneRequiredWithoutProductNestedInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  product_image: NullableStringFieldUpdateOperationsInput
}

input ProductUpsertWithWhereUniqueWithoutCategoryInput {
  create: ProductCreateWithoutCategoryInput!
  update: ProductUpdateWithoutCategoryInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithoutProductItemInput {
  create: ProductCreateWithoutProductItemInput!
  update: ProductUpdateWithoutProductItemInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  category: CategoryRelationFilter
  category_id: StringFilter
  description: StringNullableFilter
  id: StringFilter
  is_deleted: BoolFilter
  name: StringFilter
  productItem: ProductItemListRelationFilter
  product_image: StringNullableFilter
}

input ProductWhereUniqueInput {
  id: String
}

type Promotion {
  _count: PromotionCount
  description: String
  discount_rate: Int
  end_date: String
  id: String!
  name: String!
  promotionCategory(cursor: PromotionCategoryWhereUniqueInput, distinct: [PromotionCategoryScalarFieldEnum!], orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): [PromotionCategory!]!
  start_date: String
}

type PromotionAvgAggregate {
  discount_rate: Float
}

input PromotionAvgOrderByAggregateInput {
  discount_rate: SortOrder
}

type PromotionCategory {
  category: Category!
  category_id: String!
  id: String!
  promotion: Promotion!
  promotion_id: String!
}

type PromotionCategoryCountAggregate {
  _all: Int!
  category_id: Int!
  id: Int!
  promotion_id: Int!
}

input PromotionCategoryCountOrderByAggregateInput {
  category_id: SortOrder
  id: SortOrder
  promotion_id: SortOrder
}

input PromotionCategoryCreateInput {
  category: CategoryCreateNestedOneWithoutPromotionCategoryInput!
  id: String
  promotion: PromotionCreateNestedOneWithoutPromotionCategoryInput!
}

input PromotionCategoryCreateManyCategoryInput {
  id: String
  promotion_id: String!
}

input PromotionCategoryCreateManyCategoryInputEnvelope {
  data: [PromotionCategoryCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input PromotionCategoryCreateManyInput {
  category_id: String!
  id: String
  promotion_id: String!
}

input PromotionCategoryCreateManyPromotionInput {
  category_id: String!
  id: String
}

input PromotionCategoryCreateManyPromotionInputEnvelope {
  data: [PromotionCategoryCreateManyPromotionInput!]!
  skipDuplicates: Boolean
}

input PromotionCategoryCreateNestedManyWithoutCategoryInput {
  connect: [PromotionCategoryWhereUniqueInput!]
  connectOrCreate: [PromotionCategoryCreateOrConnectWithoutCategoryInput!]
  create: [PromotionCategoryCreateWithoutCategoryInput!]
  createMany: PromotionCategoryCreateManyCategoryInputEnvelope
}

input PromotionCategoryCreateNestedManyWithoutPromotionInput {
  connect: [PromotionCategoryWhereUniqueInput!]
  connectOrCreate: [PromotionCategoryCreateOrConnectWithoutPromotionInput!]
  create: [PromotionCategoryCreateWithoutPromotionInput!]
  createMany: PromotionCategoryCreateManyPromotionInputEnvelope
}

input PromotionCategoryCreateOrConnectWithoutCategoryInput {
  create: PromotionCategoryCreateWithoutCategoryInput!
  where: PromotionCategoryWhereUniqueInput!
}

input PromotionCategoryCreateOrConnectWithoutPromotionInput {
  create: PromotionCategoryCreateWithoutPromotionInput!
  where: PromotionCategoryWhereUniqueInput!
}

input PromotionCategoryCreateWithoutCategoryInput {
  id: String
  promotion: PromotionCreateNestedOneWithoutPromotionCategoryInput!
}

input PromotionCategoryCreateWithoutPromotionInput {
  category: CategoryCreateNestedOneWithoutPromotionCategoryInput!
  id: String
}

type PromotionCategoryGroupBy {
  _count: PromotionCategoryCountAggregate
  _max: PromotionCategoryMaxAggregate
  _min: PromotionCategoryMinAggregate
  category_id: String!
  id: String!
  promotion_id: String!
}

input PromotionCategoryListRelationFilter {
  every: PromotionCategoryWhereInput
  none: PromotionCategoryWhereInput
  some: PromotionCategoryWhereInput
}

type PromotionCategoryMaxAggregate {
  category_id: String
  id: String
  promotion_id: String
}

input PromotionCategoryMaxOrderByAggregateInput {
  category_id: SortOrder
  id: SortOrder
  promotion_id: SortOrder
}

type PromotionCategoryMinAggregate {
  category_id: String
  id: String
  promotion_id: String
}

input PromotionCategoryMinOrderByAggregateInput {
  category_id: SortOrder
  id: SortOrder
  promotion_id: SortOrder
}

input PromotionCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input PromotionCategoryOrderByWithAggregationInput {
  _count: PromotionCategoryCountOrderByAggregateInput
  _max: PromotionCategoryMaxOrderByAggregateInput
  _min: PromotionCategoryMinOrderByAggregateInput
  category_id: SortOrder
  id: SortOrder
  promotion_id: SortOrder
}

input PromotionCategoryOrderByWithRelationInput {
  category: CategoryOrderByWithRelationInput
  category_id: SortOrder
  id: SortOrder
  promotion: PromotionOrderByWithRelationInput
  promotion_id: SortOrder
}

enum PromotionCategoryScalarFieldEnum {
  category_id
  id
  promotion_id
}

input PromotionCategoryScalarWhereInput {
  AND: [PromotionCategoryScalarWhereInput!]
  NOT: [PromotionCategoryScalarWhereInput!]
  OR: [PromotionCategoryScalarWhereInput!]
  category_id: StringFilter
  id: StringFilter
  promotion_id: StringFilter
}

input PromotionCategoryScalarWhereWithAggregatesInput {
  AND: [PromotionCategoryScalarWhereWithAggregatesInput!]
  NOT: [PromotionCategoryScalarWhereWithAggregatesInput!]
  OR: [PromotionCategoryScalarWhereWithAggregatesInput!]
  category_id: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  promotion_id: StringWithAggregatesFilter
}

input PromotionCategoryUpdateInput {
  category: CategoryUpdateOneRequiredWithoutPromotionCategoryNestedInput
  id: StringFieldUpdateOperationsInput
  promotion: PromotionUpdateOneRequiredWithoutPromotionCategoryNestedInput
}

input PromotionCategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input PromotionCategoryUpdateManyWithWhereWithoutCategoryInput {
  data: PromotionCategoryUpdateManyMutationInput!
  where: PromotionCategoryScalarWhereInput!
}

input PromotionCategoryUpdateManyWithWhereWithoutPromotionInput {
  data: PromotionCategoryUpdateManyMutationInput!
  where: PromotionCategoryScalarWhereInput!
}

input PromotionCategoryUpdateManyWithoutCategoryNestedInput {
  connect: [PromotionCategoryWhereUniqueInput!]
  connectOrCreate: [PromotionCategoryCreateOrConnectWithoutCategoryInput!]
  create: [PromotionCategoryCreateWithoutCategoryInput!]
  createMany: PromotionCategoryCreateManyCategoryInputEnvelope
  delete: [PromotionCategoryWhereUniqueInput!]
  deleteMany: [PromotionCategoryScalarWhereInput!]
  disconnect: [PromotionCategoryWhereUniqueInput!]
  set: [PromotionCategoryWhereUniqueInput!]
  update: [PromotionCategoryUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [PromotionCategoryUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [PromotionCategoryUpsertWithWhereUniqueWithoutCategoryInput!]
}

input PromotionCategoryUpdateManyWithoutPromotionNestedInput {
  connect: [PromotionCategoryWhereUniqueInput!]
  connectOrCreate: [PromotionCategoryCreateOrConnectWithoutPromotionInput!]
  create: [PromotionCategoryCreateWithoutPromotionInput!]
  createMany: PromotionCategoryCreateManyPromotionInputEnvelope
  delete: [PromotionCategoryWhereUniqueInput!]
  deleteMany: [PromotionCategoryScalarWhereInput!]
  disconnect: [PromotionCategoryWhereUniqueInput!]
  set: [PromotionCategoryWhereUniqueInput!]
  update: [PromotionCategoryUpdateWithWhereUniqueWithoutPromotionInput!]
  updateMany: [PromotionCategoryUpdateManyWithWhereWithoutPromotionInput!]
  upsert: [PromotionCategoryUpsertWithWhereUniqueWithoutPromotionInput!]
}

input PromotionCategoryUpdateWithWhereUniqueWithoutCategoryInput {
  data: PromotionCategoryUpdateWithoutCategoryInput!
  where: PromotionCategoryWhereUniqueInput!
}

input PromotionCategoryUpdateWithWhereUniqueWithoutPromotionInput {
  data: PromotionCategoryUpdateWithoutPromotionInput!
  where: PromotionCategoryWhereUniqueInput!
}

input PromotionCategoryUpdateWithoutCategoryInput {
  id: StringFieldUpdateOperationsInput
  promotion: PromotionUpdateOneRequiredWithoutPromotionCategoryNestedInput
}

input PromotionCategoryUpdateWithoutPromotionInput {
  category: CategoryUpdateOneRequiredWithoutPromotionCategoryNestedInput
  id: StringFieldUpdateOperationsInput
}

input PromotionCategoryUpsertWithWhereUniqueWithoutCategoryInput {
  create: PromotionCategoryCreateWithoutCategoryInput!
  update: PromotionCategoryUpdateWithoutCategoryInput!
  where: PromotionCategoryWhereUniqueInput!
}

input PromotionCategoryUpsertWithWhereUniqueWithoutPromotionInput {
  create: PromotionCategoryCreateWithoutPromotionInput!
  update: PromotionCategoryUpdateWithoutPromotionInput!
  where: PromotionCategoryWhereUniqueInput!
}

input PromotionCategoryWhereInput {
  AND: [PromotionCategoryWhereInput!]
  NOT: [PromotionCategoryWhereInput!]
  OR: [PromotionCategoryWhereInput!]
  category: CategoryRelationFilter
  category_id: StringFilter
  id: StringFilter
  promotion: PromotionRelationFilter
  promotion_id: StringFilter
}

input PromotionCategoryWhereUniqueInput {
  id: String
}

type PromotionCount {
  promotionCategory: Int!
}

type PromotionCountAggregate {
  _all: Int!
  description: Int!
  discount_rate: Int!
  end_date: Int!
  id: Int!
  name: Int!
  start_date: Int!
}

input PromotionCountOrderByAggregateInput {
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  start_date: SortOrder
}

input PromotionCreateInput {
  description: String
  discount_rate: Int
  end_date: String
  id: String
  name: String!
  promotionCategory: PromotionCategoryCreateNestedManyWithoutPromotionInput
  start_date: String
}

input PromotionCreateManyInput {
  description: String
  discount_rate: Int
  end_date: String
  id: String
  name: String!
  start_date: String
}

input PromotionCreateNestedOneWithoutPromotionCategoryInput {
  connect: PromotionWhereUniqueInput
  connectOrCreate: PromotionCreateOrConnectWithoutPromotionCategoryInput
  create: PromotionCreateWithoutPromotionCategoryInput
}

input PromotionCreateOrConnectWithoutPromotionCategoryInput {
  create: PromotionCreateWithoutPromotionCategoryInput!
  where: PromotionWhereUniqueInput!
}

input PromotionCreateWithoutPromotionCategoryInput {
  description: String
  discount_rate: Int
  end_date: String
  id: String
  name: String!
  start_date: String
}

type PromotionGroupBy {
  _avg: PromotionAvgAggregate
  _count: PromotionCountAggregate
  _max: PromotionMaxAggregate
  _min: PromotionMinAggregate
  _sum: PromotionSumAggregate
  description: String
  discount_rate: Int
  end_date: String
  id: String!
  name: String!
  start_date: String
}

type PromotionMaxAggregate {
  description: String
  discount_rate: Int
  end_date: String
  id: String
  name: String
  start_date: String
}

input PromotionMaxOrderByAggregateInput {
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  start_date: SortOrder
}

type PromotionMinAggregate {
  description: String
  discount_rate: Int
  end_date: String
  id: String
  name: String
  start_date: String
}

input PromotionMinOrderByAggregateInput {
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  start_date: SortOrder
}

input PromotionOrderByWithAggregationInput {
  _avg: PromotionAvgOrderByAggregateInput
  _count: PromotionCountOrderByAggregateInput
  _max: PromotionMaxOrderByAggregateInput
  _min: PromotionMinOrderByAggregateInput
  _sum: PromotionSumOrderByAggregateInput
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  start_date: SortOrder
}

input PromotionOrderByWithRelationInput {
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  promotionCategory: PromotionCategoryOrderByRelationAggregateInput
  start_date: SortOrder
}

input PromotionRelationFilter {
  is: PromotionWhereInput
  isNot: PromotionWhereInput
}

enum PromotionScalarFieldEnum {
  description
  discount_rate
  end_date
  id
  name
  start_date
}

input PromotionScalarWhereWithAggregatesInput {
  AND: [PromotionScalarWhereWithAggregatesInput!]
  NOT: [PromotionScalarWhereWithAggregatesInput!]
  OR: [PromotionScalarWhereWithAggregatesInput!]
  description: StringNullableWithAggregatesFilter
  discount_rate: IntNullableWithAggregatesFilter
  end_date: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  start_date: StringNullableWithAggregatesFilter
}

type PromotionSumAggregate {
  discount_rate: Int
}

input PromotionSumOrderByAggregateInput {
  discount_rate: SortOrder
}

input PromotionUpdateInput {
  description: NullableStringFieldUpdateOperationsInput
  discount_rate: NullableIntFieldUpdateOperationsInput
  end_date: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  promotionCategory: PromotionCategoryUpdateManyWithoutPromotionNestedInput
  start_date: NullableStringFieldUpdateOperationsInput
}

input PromotionUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  discount_rate: NullableIntFieldUpdateOperationsInput
  end_date: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  start_date: NullableStringFieldUpdateOperationsInput
}

input PromotionUpdateOneRequiredWithoutPromotionCategoryNestedInput {
  connect: PromotionWhereUniqueInput
  connectOrCreate: PromotionCreateOrConnectWithoutPromotionCategoryInput
  create: PromotionCreateWithoutPromotionCategoryInput
  update: PromotionUpdateWithoutPromotionCategoryInput
  upsert: PromotionUpsertWithoutPromotionCategoryInput
}

input PromotionUpdateWithoutPromotionCategoryInput {
  description: NullableStringFieldUpdateOperationsInput
  discount_rate: NullableIntFieldUpdateOperationsInput
  end_date: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  start_date: NullableStringFieldUpdateOperationsInput
}

input PromotionUpsertWithoutPromotionCategoryInput {
  create: PromotionCreateWithoutPromotionCategoryInput!
  update: PromotionUpdateWithoutPromotionCategoryInput!
}

input PromotionWhereInput {
  AND: [PromotionWhereInput!]
  NOT: [PromotionWhereInput!]
  OR: [PromotionWhereInput!]
  description: StringNullableFilter
  discount_rate: IntNullableFilter
  end_date: StringNullableFilter
  id: StringFilter
  name: StringFilter
  promotionCategory: PromotionCategoryListRelationFilter
  start_date: StringNullableFilter
}

input PromotionWhereUniqueInput {
  id: String
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  aggregateAddress(cursor: AddressWhereUniqueInput, orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): AggregateAddress!
  aggregateCategory(cursor: CategoryWhereUniqueInput, orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): AggregateCategory!
  aggregateCountry(cursor: CountryWhereUniqueInput, orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): AggregateCountry!
  aggregateOrderLine(cursor: OrderLineWhereUniqueInput, orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): AggregateOrderLine!
  aggregateOrderStatus(cursor: OrderStatusWhereUniqueInput, orderBy: [OrderStatusOrderByWithRelationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): AggregateOrderStatus!
  aggregatePaymentType(cursor: PaymentTypeWhereUniqueInput, orderBy: [PaymentTypeOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): AggregatePaymentType!
  aggregateProduct(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): AggregateProduct!
  aggregateProductConfiguration(cursor: ProductConfigurationWhereUniqueInput, orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): AggregateProductConfiguration!
  aggregateProductItem(cursor: ProductItemWhereUniqueInput, orderBy: [ProductItemOrderByWithRelationInput!], skip: Int, take: Int, where: ProductItemWhereInput): AggregateProductItem!
  aggregatePromotion(cursor: PromotionWhereUniqueInput, orderBy: [PromotionOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionWhereInput): AggregatePromotion!
  aggregatePromotionCategory(cursor: PromotionCategoryWhereUniqueInput, orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): AggregatePromotionCategory!
  aggregateShippingMethod(cursor: ShippingMethodWhereUniqueInput, orderBy: [ShippingMethodOrderByWithRelationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): AggregateShippingMethod!
  aggregateShopOrder(cursor: ShopOrderWhereUniqueInput, orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): AggregateShopOrder!
  aggregateShoppingCart(cursor: ShoppingCartWhereUniqueInput, orderBy: [ShoppingCartOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): AggregateShoppingCart!
  aggregateShoppingCartItem(cursor: ShoppingCartItemWhereUniqueInput, orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): AggregateShoppingCartItem!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateUserAddress(cursor: UserAddressWhereUniqueInput, orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): AggregateUserAddress!
  aggregateUserPaymentMethod(cursor: UserPaymentMethodWhereUniqueInput, orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): AggregateUserPaymentMethod!
  aggregateUserReview(cursor: UserReviewWhereUniqueInput, orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): AggregateUserReview!
  aggregateVariation(cursor: VariationWhereUniqueInput, orderBy: [VariationOrderByWithRelationInput!], skip: Int, take: Int, where: VariationWhereInput): AggregateVariation!
  aggregateVariationOption(cursor: VariationOptionWhereUniqueInput, orderBy: [VariationOptionOrderByWithRelationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): AggregateVariationOption!
  allCategories: [Category]
  allProducts: [Product]
  categories(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  categoryById(id: String): Category
  countries(cursor: CountryWhereUniqueInput, distinct: [CountryScalarFieldEnum!], orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): [Country!]!
  country(where: CountryWhereUniqueInput!): Country
  findFirstAddress(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstAddressOrThrow(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstCategory(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstCategoryOrThrow(cursor: CategoryWhereUniqueInput, distinct: [CategoryScalarFieldEnum!], orderBy: [CategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryWhereInput): Category
  findFirstCountry(cursor: CountryWhereUniqueInput, distinct: [CountryScalarFieldEnum!], orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): Country
  findFirstCountryOrThrow(cursor: CountryWhereUniqueInput, distinct: [CountryScalarFieldEnum!], orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): Country
  findFirstOrderLine(cursor: OrderLineWhereUniqueInput, distinct: [OrderLineScalarFieldEnum!], orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): OrderLine
  findFirstOrderLineOrThrow(cursor: OrderLineWhereUniqueInput, distinct: [OrderLineScalarFieldEnum!], orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): OrderLine
  findFirstOrderStatus(cursor: OrderStatusWhereUniqueInput, distinct: [OrderStatusScalarFieldEnum!], orderBy: [OrderStatusOrderByWithRelationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): OrderStatus
  findFirstOrderStatusOrThrow(cursor: OrderStatusWhereUniqueInput, distinct: [OrderStatusScalarFieldEnum!], orderBy: [OrderStatusOrderByWithRelationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): OrderStatus
  findFirstPaymentType(cursor: PaymentTypeWhereUniqueInput, distinct: [PaymentTypeScalarFieldEnum!], orderBy: [PaymentTypeOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): PaymentType
  findFirstPaymentTypeOrThrow(cursor: PaymentTypeWhereUniqueInput, distinct: [PaymentTypeScalarFieldEnum!], orderBy: [PaymentTypeOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): PaymentType
  findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstProductConfiguration(cursor: ProductConfigurationWhereUniqueInput, distinct: [ProductConfigurationScalarFieldEnum!], orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): ProductConfiguration
  findFirstProductConfigurationOrThrow(cursor: ProductConfigurationWhereUniqueInput, distinct: [ProductConfigurationScalarFieldEnum!], orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): ProductConfiguration
  findFirstProductItem(cursor: ProductItemWhereUniqueInput, distinct: [ProductItemScalarFieldEnum!], orderBy: [ProductItemOrderByWithRelationInput!], skip: Int, take: Int, where: ProductItemWhereInput): ProductItem
  findFirstProductItemOrThrow(cursor: ProductItemWhereUniqueInput, distinct: [ProductItemScalarFieldEnum!], orderBy: [ProductItemOrderByWithRelationInput!], skip: Int, take: Int, where: ProductItemWhereInput): ProductItem
  findFirstProductOrThrow(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstPromotion(cursor: PromotionWhereUniqueInput, distinct: [PromotionScalarFieldEnum!], orderBy: [PromotionOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionWhereInput): Promotion
  findFirstPromotionCategory(cursor: PromotionCategoryWhereUniqueInput, distinct: [PromotionCategoryScalarFieldEnum!], orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): PromotionCategory
  findFirstPromotionCategoryOrThrow(cursor: PromotionCategoryWhereUniqueInput, distinct: [PromotionCategoryScalarFieldEnum!], orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): PromotionCategory
  findFirstPromotionOrThrow(cursor: PromotionWhereUniqueInput, distinct: [PromotionScalarFieldEnum!], orderBy: [PromotionOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionWhereInput): Promotion
  findFirstShippingMethod(cursor: ShippingMethodWhereUniqueInput, distinct: [ShippingMethodScalarFieldEnum!], orderBy: [ShippingMethodOrderByWithRelationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): ShippingMethod
  findFirstShippingMethodOrThrow(cursor: ShippingMethodWhereUniqueInput, distinct: [ShippingMethodScalarFieldEnum!], orderBy: [ShippingMethodOrderByWithRelationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): ShippingMethod
  findFirstShopOrder(cursor: ShopOrderWhereUniqueInput, distinct: [ShopOrderScalarFieldEnum!], orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): ShopOrder
  findFirstShopOrderOrThrow(cursor: ShopOrderWhereUniqueInput, distinct: [ShopOrderScalarFieldEnum!], orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): ShopOrder
  findFirstShoppingCart(cursor: ShoppingCartWhereUniqueInput, distinct: [ShoppingCartScalarFieldEnum!], orderBy: [ShoppingCartOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): ShoppingCart
  findFirstShoppingCartItem(cursor: ShoppingCartItemWhereUniqueInput, distinct: [ShoppingCartItemScalarFieldEnum!], orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): ShoppingCartItem
  findFirstShoppingCartItemOrThrow(cursor: ShoppingCartItemWhereUniqueInput, distinct: [ShoppingCartItemScalarFieldEnum!], orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): ShoppingCartItem
  findFirstShoppingCartOrThrow(cursor: ShoppingCartWhereUniqueInput, distinct: [ShoppingCartScalarFieldEnum!], orderBy: [ShoppingCartOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): ShoppingCart
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserAddress(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): UserAddress
  findFirstUserAddressOrThrow(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): UserAddress
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserPaymentMethod(cursor: UserPaymentMethodWhereUniqueInput, distinct: [UserPaymentMethodScalarFieldEnum!], orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): UserPaymentMethod
  findFirstUserPaymentMethodOrThrow(cursor: UserPaymentMethodWhereUniqueInput, distinct: [UserPaymentMethodScalarFieldEnum!], orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): UserPaymentMethod
  findFirstUserReview(cursor: UserReviewWhereUniqueInput, distinct: [UserReviewScalarFieldEnum!], orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): UserReview
  findFirstUserReviewOrThrow(cursor: UserReviewWhereUniqueInput, distinct: [UserReviewScalarFieldEnum!], orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): UserReview
  findFirstVariation(cursor: VariationWhereUniqueInput, distinct: [VariationScalarFieldEnum!], orderBy: [VariationOrderByWithRelationInput!], skip: Int, take: Int, where: VariationWhereInput): Variation
  findFirstVariationOption(cursor: VariationOptionWhereUniqueInput, distinct: [VariationOptionScalarFieldEnum!], orderBy: [VariationOptionOrderByWithRelationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): VariationOption
  findFirstVariationOptionOrThrow(cursor: VariationOptionWhereUniqueInput, distinct: [VariationOptionScalarFieldEnum!], orderBy: [VariationOptionOrderByWithRelationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): VariationOption
  findFirstVariationOrThrow(cursor: VariationWhereUniqueInput, distinct: [VariationScalarFieldEnum!], orderBy: [VariationOrderByWithRelationInput!], skip: Int, take: Int, where: VariationWhereInput): Variation
  getAddress(where: AddressWhereUniqueInput!): Address
  getAdminCategoryById(id: String): Category
  getAdminProductById(id: String): Product
  getAdminUserById(id: String): User
  getAdminUsers: [User]
  getAllAdminCategories: [Category]
  getAllAdminProducts(categoryId: String): [Product]
  getCategory(where: CategoryWhereUniqueInput!): Category
  getCountry(where: CountryWhereUniqueInput!): Country
  getOrderLine(where: OrderLineWhereUniqueInput!): OrderLine
  getOrderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  getPaymentType(where: PaymentTypeWhereUniqueInput!): PaymentType
  getProduct(where: ProductWhereUniqueInput!): Product
  getProductConfiguration(where: ProductConfigurationWhereUniqueInput!): ProductConfiguration
  getProductItem(where: ProductItemWhereUniqueInput!): ProductItem
  getPromotion(where: PromotionWhereUniqueInput!): Promotion
  getPromotionCategory(where: PromotionCategoryWhereUniqueInput!): PromotionCategory
  getShippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  getShopOrder(where: ShopOrderWhereUniqueInput!): ShopOrder
  getShoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  getShoppingCartItem(where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  getUser(where: UserWhereUniqueInput!): User
  getUserAddress(where: UserAddressWhereUniqueInput!): UserAddress
  getUserPaymentMethod(where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod
  getUserReview(where: UserReviewWhereUniqueInput!): UserReview
  getVariation(where: VariationWhereUniqueInput!): Variation
  getVariationOption(where: VariationOptionWhereUniqueInput!): VariationOption
  groupByAddress(by: [AddressScalarFieldEnum!]!, having: AddressScalarWhereWithAggregatesInput, orderBy: [AddressOrderByWithAggregationInput!], skip: Int, take: Int, where: AddressWhereInput): [AddressGroupBy!]!
  groupByCategory(by: [CategoryScalarFieldEnum!]!, having: CategoryScalarWhereWithAggregatesInput, orderBy: [CategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: CategoryWhereInput): [CategoryGroupBy!]!
  groupByCountry(by: [CountryScalarFieldEnum!]!, having: CountryScalarWhereWithAggregatesInput, orderBy: [CountryOrderByWithAggregationInput!], skip: Int, take: Int, where: CountryWhereInput): [CountryGroupBy!]!
  groupByOrderLine(by: [OrderLineScalarFieldEnum!]!, having: OrderLineScalarWhereWithAggregatesInput, orderBy: [OrderLineOrderByWithAggregationInput!], skip: Int, take: Int, where: OrderLineWhereInput): [OrderLineGroupBy!]!
  groupByOrderStatus(by: [OrderStatusScalarFieldEnum!]!, having: OrderStatusScalarWhereWithAggregatesInput, orderBy: [OrderStatusOrderByWithAggregationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): [OrderStatusGroupBy!]!
  groupByPaymentType(by: [PaymentTypeScalarFieldEnum!]!, having: PaymentTypeScalarWhereWithAggregatesInput, orderBy: [PaymentTypeOrderByWithAggregationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): [PaymentTypeGroupBy!]!
  groupByProduct(by: [ProductScalarFieldEnum!]!, having: ProductScalarWhereWithAggregatesInput, orderBy: [ProductOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductWhereInput): [ProductGroupBy!]!
  groupByProductConfiguration(by: [ProductConfigurationScalarFieldEnum!]!, having: ProductConfigurationScalarWhereWithAggregatesInput, orderBy: [ProductConfigurationOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): [ProductConfigurationGroupBy!]!
  groupByProductItem(by: [ProductItemScalarFieldEnum!]!, having: ProductItemScalarWhereWithAggregatesInput, orderBy: [ProductItemOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductItemWhereInput): [ProductItemGroupBy!]!
  groupByPromotion(by: [PromotionScalarFieldEnum!]!, having: PromotionScalarWhereWithAggregatesInput, orderBy: [PromotionOrderByWithAggregationInput!], skip: Int, take: Int, where: PromotionWhereInput): [PromotionGroupBy!]!
  groupByPromotionCategory(by: [PromotionCategoryScalarFieldEnum!]!, having: PromotionCategoryScalarWhereWithAggregatesInput, orderBy: [PromotionCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): [PromotionCategoryGroupBy!]!
  groupByShippingMethod(by: [ShippingMethodScalarFieldEnum!]!, having: ShippingMethodScalarWhereWithAggregatesInput, orderBy: [ShippingMethodOrderByWithAggregationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): [ShippingMethodGroupBy!]!
  groupByShopOrder(by: [ShopOrderScalarFieldEnum!]!, having: ShopOrderScalarWhereWithAggregatesInput, orderBy: [ShopOrderOrderByWithAggregationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): [ShopOrderGroupBy!]!
  groupByShoppingCart(by: [ShoppingCartScalarFieldEnum!]!, having: ShoppingCartScalarWhereWithAggregatesInput, orderBy: [ShoppingCartOrderByWithAggregationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): [ShoppingCartGroupBy!]!
  groupByShoppingCartItem(by: [ShoppingCartItemScalarFieldEnum!]!, having: ShoppingCartItemScalarWhereWithAggregatesInput, orderBy: [ShoppingCartItemOrderByWithAggregationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): [ShoppingCartItemGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByUserAddress(by: [UserAddressScalarFieldEnum!]!, having: UserAddressScalarWhereWithAggregatesInput, orderBy: [UserAddressOrderByWithAggregationInput!], skip: Int, take: Int, where: UserAddressWhereInput): [UserAddressGroupBy!]!
  groupByUserPaymentMethod(by: [UserPaymentMethodScalarFieldEnum!]!, having: UserPaymentMethodScalarWhereWithAggregatesInput, orderBy: [UserPaymentMethodOrderByWithAggregationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): [UserPaymentMethodGroupBy!]!
  groupByUserReview(by: [UserReviewScalarFieldEnum!]!, having: UserReviewScalarWhereWithAggregatesInput, orderBy: [UserReviewOrderByWithAggregationInput!], skip: Int, take: Int, where: UserReviewWhereInput): [UserReviewGroupBy!]!
  groupByVariation(by: [VariationScalarFieldEnum!]!, having: VariationScalarWhereWithAggregatesInput, orderBy: [VariationOrderByWithAggregationInput!], skip: Int, take: Int, where: VariationWhereInput): [VariationGroupBy!]!
  groupByVariationOption(by: [VariationOptionScalarFieldEnum!]!, having: VariationOptionScalarWhereWithAggregatesInput, orderBy: [VariationOptionOrderByWithAggregationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): [VariationOptionGroupBy!]!
  orderLine(where: OrderLineWhereUniqueInput!): OrderLine
  orderLines(cursor: OrderLineWhereUniqueInput, distinct: [OrderLineScalarFieldEnum!], orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): [OrderLine!]!
  orderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  orderStatuses(cursor: OrderStatusWhereUniqueInput, distinct: [OrderStatusScalarFieldEnum!], orderBy: [OrderStatusOrderByWithRelationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): [OrderStatus!]!
  paymentType(where: PaymentTypeWhereUniqueInput!): PaymentType
  paymentTypes(cursor: PaymentTypeWhereUniqueInput, distinct: [PaymentTypeScalarFieldEnum!], orderBy: [PaymentTypeOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): [PaymentType!]!
  product(where: ProductWhereUniqueInput!): Product
  productById(id: String): Product
  productConfiguration(where: ProductConfigurationWhereUniqueInput!): ProductConfiguration
  productConfigurations(cursor: ProductConfigurationWhereUniqueInput, distinct: [ProductConfigurationScalarFieldEnum!], orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): [ProductConfiguration!]!
  productItem(where: ProductItemWhereUniqueInput!): ProductItem
  productItems(cursor: ProductItemWhereUniqueInput, distinct: [ProductItemScalarFieldEnum!], orderBy: [ProductItemOrderByWithRelationInput!], skip: Int, take: Int, where: ProductItemWhereInput): [ProductItem!]!
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  promotion(where: PromotionWhereUniqueInput!): Promotion
  promotionCategories(cursor: PromotionCategoryWhereUniqueInput, distinct: [PromotionCategoryScalarFieldEnum!], orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): [PromotionCategory!]!
  promotionCategory(where: PromotionCategoryWhereUniqueInput!): PromotionCategory
  promotions(cursor: PromotionWhereUniqueInput, distinct: [PromotionScalarFieldEnum!], orderBy: [PromotionOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionWhereInput): [Promotion!]!
  shippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  shippingMethods(cursor: ShippingMethodWhereUniqueInput, distinct: [ShippingMethodScalarFieldEnum!], orderBy: [ShippingMethodOrderByWithRelationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): [ShippingMethod!]!
  shopOrder(where: ShopOrderWhereUniqueInput!): ShopOrder
  shopOrders(cursor: ShopOrderWhereUniqueInput, distinct: [ShopOrderScalarFieldEnum!], orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): [ShopOrder!]!
  shoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  shoppingCartItem(where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  shoppingCartItems(cursor: ShoppingCartItemWhereUniqueInput, distinct: [ShoppingCartItemScalarFieldEnum!], orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): [ShoppingCartItem!]!
  shoppingCarts(cursor: ShoppingCartWhereUniqueInput, distinct: [ShoppingCartScalarFieldEnum!], orderBy: [ShoppingCartOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): [ShoppingCart!]!
  siteUser(id: String): User
  siteUsers: [User]
  user(where: UserWhereUniqueInput!): User
  userAddress(where: UserAddressWhereUniqueInput!): UserAddress
  userAddresses(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): [UserAddress!]!
  userPaymentMethod(where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod
  userPaymentMethods(cursor: UserPaymentMethodWhereUniqueInput, distinct: [UserPaymentMethodScalarFieldEnum!], orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): [UserPaymentMethod!]!
  userReview(where: UserReviewWhereUniqueInput!): UserReview
  userReviews(cursor: UserReviewWhereUniqueInput, distinct: [UserReviewScalarFieldEnum!], orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): [UserReview!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  variation(where: VariationWhereUniqueInput!): Variation
  variationOption(where: VariationOptionWhereUniqueInput!): VariationOption
  variationOptions(cursor: VariationOptionWhereUniqueInput, distinct: [VariationOptionScalarFieldEnum!], orderBy: [VariationOptionOrderByWithRelationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): [VariationOption!]!
  variations(cursor: VariationWhereUniqueInput, distinct: [VariationScalarFieldEnum!], orderBy: [VariationOrderByWithRelationInput!], skip: Int, take: Int, where: VariationWhereInput): [Variation!]!
}

type ShippingMethod {
  id: String!
  name: String!
  price: Int
}

type ShippingMethodAvgAggregate {
  price: Float
}

input ShippingMethodAvgOrderByAggregateInput {
  price: SortOrder
}

type ShippingMethodCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
  price: Int!
}

input ShippingMethodCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

input ShippingMethodCreateInput {
  id: String
  name: String!
  price: Int
}

input ShippingMethodCreateManyInput {
  id: String
  name: String!
  price: Int
}

type ShippingMethodGroupBy {
  _avg: ShippingMethodAvgAggregate
  _count: ShippingMethodCountAggregate
  _max: ShippingMethodMaxAggregate
  _min: ShippingMethodMinAggregate
  _sum: ShippingMethodSumAggregate
  id: String!
  name: String!
  price: Int
}

type ShippingMethodMaxAggregate {
  id: String
  name: String
  price: Int
}

input ShippingMethodMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

type ShippingMethodMinAggregate {
  id: String
  name: String
  price: Int
}

input ShippingMethodMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

input ShippingMethodOrderByWithAggregationInput {
  _avg: ShippingMethodAvgOrderByAggregateInput
  _count: ShippingMethodCountOrderByAggregateInput
  _max: ShippingMethodMaxOrderByAggregateInput
  _min: ShippingMethodMinOrderByAggregateInput
  _sum: ShippingMethodSumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

input ShippingMethodOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

enum ShippingMethodScalarFieldEnum {
  id
  name
  price
}

input ShippingMethodScalarWhereWithAggregatesInput {
  AND: [ShippingMethodScalarWhereWithAggregatesInput!]
  NOT: [ShippingMethodScalarWhereWithAggregatesInput!]
  OR: [ShippingMethodScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  price: IntNullableWithAggregatesFilter
}

type ShippingMethodSumAggregate {
  price: Int
}

input ShippingMethodSumOrderByAggregateInput {
  price: SortOrder
}

input ShippingMethodUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
}

input ShippingMethodUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
}

input ShippingMethodWhereInput {
  AND: [ShippingMethodWhereInput!]
  NOT: [ShippingMethodWhereInput!]
  OR: [ShippingMethodWhereInput!]
  id: StringFilter
  name: StringFilter
  price: IntNullableFilter
}

input ShippingMethodWhereUniqueInput {
  id: String
}

type ShopOrder {
  OrderLine(cursor: OrderLineWhereUniqueInput, distinct: [OrderLineScalarFieldEnum!], orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): [OrderLine!]!
  _count: ShopOrderCount
  id: String!
  order_date: String
  order_status: Int
  order_total: Int
  payment_method: UserPaymentMethod!
  payment_method_id: String!
  shipping_address: String
  shipping_method: String
  user: User!
  user_id: String!
}

type ShopOrderAvgAggregate {
  order_status: Float
  order_total: Float
}

input ShopOrderAvgOrderByAggregateInput {
  order_status: SortOrder
  order_total: SortOrder
}

type ShopOrderCount {
  OrderLine: Int!
}

type ShopOrderCountAggregate {
  _all: Int!
  id: Int!
  order_date: Int!
  order_status: Int!
  order_total: Int!
  payment_method_id: Int!
  shipping_address: Int!
  shipping_method: Int!
  user_id: Int!
}

input ShopOrderCountOrderByAggregateInput {
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user_id: SortOrder
}

input ShopOrderCreateInput {
  OrderLine: OrderLineCreateNestedManyWithoutShopOrderInput
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method: UserPaymentMethodCreateNestedOneWithoutShopOrderInput!
  shipping_address: String
  shipping_method: String
  user: UserCreateNestedOneWithoutShopOrderInput!
}

input ShopOrderCreateManyInput {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String!
  shipping_address: String
  shipping_method: String
  user_id: String!
}

input ShopOrderCreateManyPayment_methodInput {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  shipping_address: String
  shipping_method: String
  user_id: String!
}

input ShopOrderCreateManyPayment_methodInputEnvelope {
  data: [ShopOrderCreateManyPayment_methodInput!]!
  skipDuplicates: Boolean
}

input ShopOrderCreateManyUserInput {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String!
  shipping_address: String
  shipping_method: String
}

input ShopOrderCreateManyUserInputEnvelope {
  data: [ShopOrderCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ShopOrderCreateNestedManyWithoutPayment_methodInput {
  connect: [ShopOrderWhereUniqueInput!]
  connectOrCreate: [ShopOrderCreateOrConnectWithoutPayment_methodInput!]
  create: [ShopOrderCreateWithoutPayment_methodInput!]
  createMany: ShopOrderCreateManyPayment_methodInputEnvelope
}

input ShopOrderCreateNestedManyWithoutUserInput {
  connect: [ShopOrderWhereUniqueInput!]
  connectOrCreate: [ShopOrderCreateOrConnectWithoutUserInput!]
  create: [ShopOrderCreateWithoutUserInput!]
  createMany: ShopOrderCreateManyUserInputEnvelope
}

input ShopOrderCreateNestedOneWithoutOrderLineInput {
  connect: ShopOrderWhereUniqueInput
  connectOrCreate: ShopOrderCreateOrConnectWithoutOrderLineInput
  create: ShopOrderCreateWithoutOrderLineInput
}

input ShopOrderCreateOrConnectWithoutOrderLineInput {
  create: ShopOrderCreateWithoutOrderLineInput!
  where: ShopOrderWhereUniqueInput!
}

input ShopOrderCreateOrConnectWithoutPayment_methodInput {
  create: ShopOrderCreateWithoutPayment_methodInput!
  where: ShopOrderWhereUniqueInput!
}

input ShopOrderCreateOrConnectWithoutUserInput {
  create: ShopOrderCreateWithoutUserInput!
  where: ShopOrderWhereUniqueInput!
}

input ShopOrderCreateWithoutOrderLineInput {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method: UserPaymentMethodCreateNestedOneWithoutShopOrderInput!
  shipping_address: String
  shipping_method: String
  user: UserCreateNestedOneWithoutShopOrderInput!
}

input ShopOrderCreateWithoutPayment_methodInput {
  OrderLine: OrderLineCreateNestedManyWithoutShopOrderInput
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  shipping_address: String
  shipping_method: String
  user: UserCreateNestedOneWithoutShopOrderInput!
}

input ShopOrderCreateWithoutUserInput {
  OrderLine: OrderLineCreateNestedManyWithoutShopOrderInput
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method: UserPaymentMethodCreateNestedOneWithoutShopOrderInput!
  shipping_address: String
  shipping_method: String
}

type ShopOrderGroupBy {
  _avg: ShopOrderAvgAggregate
  _count: ShopOrderCountAggregate
  _max: ShopOrderMaxAggregate
  _min: ShopOrderMinAggregate
  _sum: ShopOrderSumAggregate
  id: String!
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String!
  shipping_address: String
  shipping_method: String
  user_id: String!
}

input ShopOrderListRelationFilter {
  every: ShopOrderWhereInput
  none: ShopOrderWhereInput
  some: ShopOrderWhereInput
}

type ShopOrderMaxAggregate {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String
  shipping_address: String
  shipping_method: String
  user_id: String
}

input ShopOrderMaxOrderByAggregateInput {
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user_id: SortOrder
}

type ShopOrderMinAggregate {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String
  shipping_address: String
  shipping_method: String
  user_id: String
}

input ShopOrderMinOrderByAggregateInput {
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user_id: SortOrder
}

input ShopOrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShopOrderOrderByWithAggregationInput {
  _avg: ShopOrderAvgOrderByAggregateInput
  _count: ShopOrderCountOrderByAggregateInput
  _max: ShopOrderMaxOrderByAggregateInput
  _min: ShopOrderMinOrderByAggregateInput
  _sum: ShopOrderSumOrderByAggregateInput
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user_id: SortOrder
}

input ShopOrderOrderByWithRelationInput {
  OrderLine: OrderLineOrderByRelationAggregateInput
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method: UserPaymentMethodOrderByWithRelationInput
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user: UserOrderByWithRelationInput
  user_id: SortOrder
}

input ShopOrderRelationFilter {
  is: ShopOrderWhereInput
  isNot: ShopOrderWhereInput
}

enum ShopOrderScalarFieldEnum {
  id
  order_date
  order_status
  order_total
  payment_method_id
  shipping_address
  shipping_method
  user_id
}

input ShopOrderScalarWhereInput {
  AND: [ShopOrderScalarWhereInput!]
  NOT: [ShopOrderScalarWhereInput!]
  OR: [ShopOrderScalarWhereInput!]
  id: StringFilter
  order_date: StringNullableFilter
  order_status: IntNullableFilter
  order_total: IntNullableFilter
  payment_method_id: StringFilter
  shipping_address: StringNullableFilter
  shipping_method: StringNullableFilter
  user_id: StringFilter
}

input ShopOrderScalarWhereWithAggregatesInput {
  AND: [ShopOrderScalarWhereWithAggregatesInput!]
  NOT: [ShopOrderScalarWhereWithAggregatesInput!]
  OR: [ShopOrderScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  order_date: StringNullableWithAggregatesFilter
  order_status: IntNullableWithAggregatesFilter
  order_total: IntNullableWithAggregatesFilter
  payment_method_id: StringWithAggregatesFilter
  shipping_address: StringNullableWithAggregatesFilter
  shipping_method: StringNullableWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

type ShopOrderSumAggregate {
  order_status: Int
  order_total: Int
}

input ShopOrderSumOrderByAggregateInput {
  order_status: SortOrder
  order_total: SortOrder
}

input ShopOrderUpdateInput {
  OrderLine: OrderLineUpdateManyWithoutShopOrderNestedInput
  id: StringFieldUpdateOperationsInput
  order_date: NullableStringFieldUpdateOperationsInput
  order_status: NullableIntFieldUpdateOperationsInput
  order_total: NullableIntFieldUpdateOperationsInput
  payment_method: UserPaymentMethodUpdateOneRequiredWithoutShopOrderNestedInput
  shipping_address: NullableStringFieldUpdateOperationsInput
  shipping_method: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutShopOrderNestedInput
}

input ShopOrderUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  order_date: NullableStringFieldUpdateOperationsInput
  order_status: NullableIntFieldUpdateOperationsInput
  order_total: NullableIntFieldUpdateOperationsInput
  shipping_address: NullableStringFieldUpdateOperationsInput
  shipping_method: NullableStringFieldUpdateOperationsInput
}

input ShopOrderUpdateManyWithWhereWithoutPayment_methodInput {
  data: ShopOrderUpdateManyMutationInput!
  where: ShopOrderScalarWhereInput!
}

input ShopOrderUpdateManyWithWhereWithoutUserInput {
  data: ShopOrderUpdateManyMutationInput!
  where: ShopOrderScalarWhereInput!
}

input ShopOrderUpdateManyWithoutPayment_methodNestedInput {
  connect: [ShopOrderWhereUniqueInput!]
  connectOrCreate: [ShopOrderCreateOrConnectWithoutPayment_methodInput!]
  create: [ShopOrderCreateWithoutPayment_methodInput!]
  createMany: ShopOrderCreateManyPayment_methodInputEnvelope
  delete: [ShopOrderWhereUniqueInput!]
  deleteMany: [ShopOrderScalarWhereInput!]
  disconnect: [ShopOrderWhereUniqueInput!]
  set: [ShopOrderWhereUniqueInput!]
  update: [ShopOrderUpdateWithWhereUniqueWithoutPayment_methodInput!]
  updateMany: [ShopOrderUpdateManyWithWhereWithoutPayment_methodInput!]
  upsert: [ShopOrderUpsertWithWhereUniqueWithoutPayment_methodInput!]
}

input ShopOrderUpdateManyWithoutUserNestedInput {
  connect: [ShopOrderWhereUniqueInput!]
  connectOrCreate: [ShopOrderCreateOrConnectWithoutUserInput!]
  create: [ShopOrderCreateWithoutUserInput!]
  createMany: ShopOrderCreateManyUserInputEnvelope
  delete: [ShopOrderWhereUniqueInput!]
  deleteMany: [ShopOrderScalarWhereInput!]
  disconnect: [ShopOrderWhereUniqueInput!]
  set: [ShopOrderWhereUniqueInput!]
  update: [ShopOrderUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ShopOrderUpdateManyWithWhereWithoutUserInput!]
  upsert: [ShopOrderUpsertWithWhereUniqueWithoutUserInput!]
}

input ShopOrderUpdateOneRequiredWithoutOrderLineNestedInput {
  connect: ShopOrderWhereUniqueInput
  connectOrCreate: ShopOrderCreateOrConnectWithoutOrderLineInput
  create: ShopOrderCreateWithoutOrderLineInput
  update: ShopOrderUpdateWithoutOrderLineInput
  upsert: ShopOrderUpsertWithoutOrderLineInput
}

input ShopOrderUpdateWithWhereUniqueWithoutPayment_methodInput {
  data: ShopOrderUpdateWithoutPayment_methodInput!
  where: ShopOrderWhereUniqueInput!
}

input ShopOrderUpdateWithWhereUniqueWithoutUserInput {
  data: ShopOrderUpdateWithoutUserInput!
  where: ShopOrderWhereUniqueInput!
}

input ShopOrderUpdateWithoutOrderLineInput {
  id: StringFieldUpdateOperationsInput
  order_date: NullableStringFieldUpdateOperationsInput
  order_status: NullableIntFieldUpdateOperationsInput
  order_total: NullableIntFieldUpdateOperationsInput
  payment_method: UserPaymentMethodUpdateOneRequiredWithoutShopOrderNestedInput
  shipping_address: NullableStringFieldUpdateOperationsInput
  shipping_method: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutShopOrderNestedInput
}

input ShopOrderUpdateWithoutPayment_methodInput {
  OrderLine: OrderLineUpdateManyWithoutShopOrderNestedInput
  id: StringFieldUpdateOperationsInput
  order_date: NullableStringFieldUpdateOperationsInput
  order_status: NullableIntFieldUpdateOperationsInput
  order_total: NullableIntFieldUpdateOperationsInput
  shipping_address: NullableStringFieldUpdateOperationsInput
  shipping_method: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutShopOrderNestedInput
}

input ShopOrderUpdateWithoutUserInput {
  OrderLine: OrderLineUpdateManyWithoutShopOrderNestedInput
  id: StringFieldUpdateOperationsInput
  order_date: NullableStringFieldUpdateOperationsInput
  order_status: NullableIntFieldUpdateOperationsInput
  order_total: NullableIntFieldUpdateOperationsInput
  payment_method: UserPaymentMethodUpdateOneRequiredWithoutShopOrderNestedInput
  shipping_address: NullableStringFieldUpdateOperationsInput
  shipping_method: NullableStringFieldUpdateOperationsInput
}

input ShopOrderUpsertWithWhereUniqueWithoutPayment_methodInput {
  create: ShopOrderCreateWithoutPayment_methodInput!
  update: ShopOrderUpdateWithoutPayment_methodInput!
  where: ShopOrderWhereUniqueInput!
}

input ShopOrderUpsertWithWhereUniqueWithoutUserInput {
  create: ShopOrderCreateWithoutUserInput!
  update: ShopOrderUpdateWithoutUserInput!
  where: ShopOrderWhereUniqueInput!
}

input ShopOrderUpsertWithoutOrderLineInput {
  create: ShopOrderCreateWithoutOrderLineInput!
  update: ShopOrderUpdateWithoutOrderLineInput!
}

input ShopOrderWhereInput {
  AND: [ShopOrderWhereInput!]
  NOT: [ShopOrderWhereInput!]
  OR: [ShopOrderWhereInput!]
  OrderLine: OrderLineListRelationFilter
  id: StringFilter
  order_date: StringNullableFilter
  order_status: IntNullableFilter
  order_total: IntNullableFilter
  payment_method: UserPaymentMethodRelationFilter
  payment_method_id: StringFilter
  shipping_address: StringNullableFilter
  shipping_method: StringNullableFilter
  user: UserRelationFilter
  user_id: StringFilter
}

input ShopOrderWhereUniqueInput {
  id: String
}

type ShoppingCart {
  _count: ShoppingCartCount
  id: String!
  shoppingCartItem(cursor: ShoppingCartItemWhereUniqueInput, distinct: [ShoppingCartItemScalarFieldEnum!], orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): [ShoppingCartItem!]!
  user: User!
  user_id: String!
}

type ShoppingCartCount {
  shoppingCartItem: Int!
}

type ShoppingCartCountAggregate {
  _all: Int!
  id: Int!
  user_id: Int!
}

input ShoppingCartCountOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
}

input ShoppingCartCreateInput {
  id: String
  shoppingCartItem: ShoppingCartItemCreateNestedManyWithoutCartInput
  user: UserCreateNestedOneWithoutShoppingCartInput!
}

input ShoppingCartCreateManyInput {
  id: String
  user_id: String!
}

input ShoppingCartCreateManyUserInput {
  id: String
}

input ShoppingCartCreateManyUserInputEnvelope {
  data: [ShoppingCartCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ShoppingCartCreateNestedManyWithoutUserInput {
  connect: [ShoppingCartWhereUniqueInput!]
  connectOrCreate: [ShoppingCartCreateOrConnectWithoutUserInput!]
  create: [ShoppingCartCreateWithoutUserInput!]
  createMany: ShoppingCartCreateManyUserInputEnvelope
}

input ShoppingCartCreateNestedOneWithoutShoppingCartItemInput {
  connect: ShoppingCartWhereUniqueInput
  connectOrCreate: ShoppingCartCreateOrConnectWithoutShoppingCartItemInput
  create: ShoppingCartCreateWithoutShoppingCartItemInput
}

input ShoppingCartCreateOrConnectWithoutShoppingCartItemInput {
  create: ShoppingCartCreateWithoutShoppingCartItemInput!
  where: ShoppingCartWhereUniqueInput!
}

input ShoppingCartCreateOrConnectWithoutUserInput {
  create: ShoppingCartCreateWithoutUserInput!
  where: ShoppingCartWhereUniqueInput!
}

input ShoppingCartCreateWithoutShoppingCartItemInput {
  id: String
  user: UserCreateNestedOneWithoutShoppingCartInput!
}

input ShoppingCartCreateWithoutUserInput {
  id: String
  shoppingCartItem: ShoppingCartItemCreateNestedManyWithoutCartInput
}

type ShoppingCartGroupBy {
  _count: ShoppingCartCountAggregate
  _max: ShoppingCartMaxAggregate
  _min: ShoppingCartMinAggregate
  id: String!
  user_id: String!
}

type ShoppingCartItem {
  cart: ShoppingCart!
  cart_id: String!
  id: String!
  productItem: ProductItem!
  product_item_id: String!
  qty: Int
}

type ShoppingCartItemAvgAggregate {
  qty: Float
}

input ShoppingCartItemAvgOrderByAggregateInput {
  qty: SortOrder
}

type ShoppingCartItemCountAggregate {
  _all: Int!
  cart_id: Int!
  id: Int!
  product_item_id: Int!
  qty: Int!
}

input ShoppingCartItemCountOrderByAggregateInput {
  cart_id: SortOrder
  id: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input ShoppingCartItemCreateInput {
  cart: ShoppingCartCreateNestedOneWithoutShoppingCartItemInput!
  id: String
  productItem: ProductItemCreateNestedOneWithoutShoppingCartItemInput!
  qty: Int
}

input ShoppingCartItemCreateManyCartInput {
  id: String
  product_item_id: String!
  qty: Int
}

input ShoppingCartItemCreateManyCartInputEnvelope {
  data: [ShoppingCartItemCreateManyCartInput!]!
  skipDuplicates: Boolean
}

input ShoppingCartItemCreateManyInput {
  cart_id: String!
  id: String
  product_item_id: String!
  qty: Int
}

input ShoppingCartItemCreateManyProductItemInput {
  cart_id: String!
  id: String
  qty: Int
}

input ShoppingCartItemCreateManyProductItemInputEnvelope {
  data: [ShoppingCartItemCreateManyProductItemInput!]!
  skipDuplicates: Boolean
}

input ShoppingCartItemCreateNestedManyWithoutCartInput {
  connect: [ShoppingCartItemWhereUniqueInput!]
  connectOrCreate: [ShoppingCartItemCreateOrConnectWithoutCartInput!]
  create: [ShoppingCartItemCreateWithoutCartInput!]
  createMany: ShoppingCartItemCreateManyCartInputEnvelope
}

input ShoppingCartItemCreateNestedManyWithoutProductItemInput {
  connect: [ShoppingCartItemWhereUniqueInput!]
  connectOrCreate: [ShoppingCartItemCreateOrConnectWithoutProductItemInput!]
  create: [ShoppingCartItemCreateWithoutProductItemInput!]
  createMany: ShoppingCartItemCreateManyProductItemInputEnvelope
}

input ShoppingCartItemCreateOrConnectWithoutCartInput {
  create: ShoppingCartItemCreateWithoutCartInput!
  where: ShoppingCartItemWhereUniqueInput!
}

input ShoppingCartItemCreateOrConnectWithoutProductItemInput {
  create: ShoppingCartItemCreateWithoutProductItemInput!
  where: ShoppingCartItemWhereUniqueInput!
}

input ShoppingCartItemCreateWithoutCartInput {
  id: String
  productItem: ProductItemCreateNestedOneWithoutShoppingCartItemInput!
  qty: Int
}

input ShoppingCartItemCreateWithoutProductItemInput {
  cart: ShoppingCartCreateNestedOneWithoutShoppingCartItemInput!
  id: String
  qty: Int
}

type ShoppingCartItemGroupBy {
  _avg: ShoppingCartItemAvgAggregate
  _count: ShoppingCartItemCountAggregate
  _max: ShoppingCartItemMaxAggregate
  _min: ShoppingCartItemMinAggregate
  _sum: ShoppingCartItemSumAggregate
  cart_id: String!
  id: String!
  product_item_id: String!
  qty: Int
}

input ShoppingCartItemListRelationFilter {
  every: ShoppingCartItemWhereInput
  none: ShoppingCartItemWhereInput
  some: ShoppingCartItemWhereInput
}

type ShoppingCartItemMaxAggregate {
  cart_id: String
  id: String
  product_item_id: String
  qty: Int
}

input ShoppingCartItemMaxOrderByAggregateInput {
  cart_id: SortOrder
  id: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

type ShoppingCartItemMinAggregate {
  cart_id: String
  id: String
  product_item_id: String
  qty: Int
}

input ShoppingCartItemMinOrderByAggregateInput {
  cart_id: SortOrder
  id: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input ShoppingCartItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShoppingCartItemOrderByWithAggregationInput {
  _avg: ShoppingCartItemAvgOrderByAggregateInput
  _count: ShoppingCartItemCountOrderByAggregateInput
  _max: ShoppingCartItemMaxOrderByAggregateInput
  _min: ShoppingCartItemMinOrderByAggregateInput
  _sum: ShoppingCartItemSumOrderByAggregateInput
  cart_id: SortOrder
  id: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input ShoppingCartItemOrderByWithRelationInput {
  cart: ShoppingCartOrderByWithRelationInput
  cart_id: SortOrder
  id: SortOrder
  productItem: ProductItemOrderByWithRelationInput
  product_item_id: SortOrder
  qty: SortOrder
}

enum ShoppingCartItemScalarFieldEnum {
  cart_id
  id
  product_item_id
  qty
}

input ShoppingCartItemScalarWhereInput {
  AND: [ShoppingCartItemScalarWhereInput!]
  NOT: [ShoppingCartItemScalarWhereInput!]
  OR: [ShoppingCartItemScalarWhereInput!]
  cart_id: StringFilter
  id: StringFilter
  product_item_id: StringFilter
  qty: IntNullableFilter
}

input ShoppingCartItemScalarWhereWithAggregatesInput {
  AND: [ShoppingCartItemScalarWhereWithAggregatesInput!]
  NOT: [ShoppingCartItemScalarWhereWithAggregatesInput!]
  OR: [ShoppingCartItemScalarWhereWithAggregatesInput!]
  cart_id: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  product_item_id: StringWithAggregatesFilter
  qty: IntNullableWithAggregatesFilter
}

type ShoppingCartItemSumAggregate {
  qty: Int
}

input ShoppingCartItemSumOrderByAggregateInput {
  qty: SortOrder
}

input ShoppingCartItemUpdateInput {
  cart: ShoppingCartUpdateOneRequiredWithoutShoppingCartItemNestedInput
  id: StringFieldUpdateOperationsInput
  productItem: ProductItemUpdateOneRequiredWithoutShoppingCartItemNestedInput
  qty: NullableIntFieldUpdateOperationsInput
}

input ShoppingCartItemUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
}

input ShoppingCartItemUpdateManyWithWhereWithoutCartInput {
  data: ShoppingCartItemUpdateManyMutationInput!
  where: ShoppingCartItemScalarWhereInput!
}

input ShoppingCartItemUpdateManyWithWhereWithoutProductItemInput {
  data: ShoppingCartItemUpdateManyMutationInput!
  where: ShoppingCartItemScalarWhereInput!
}

input ShoppingCartItemUpdateManyWithoutCartNestedInput {
  connect: [ShoppingCartItemWhereUniqueInput!]
  connectOrCreate: [ShoppingCartItemCreateOrConnectWithoutCartInput!]
  create: [ShoppingCartItemCreateWithoutCartInput!]
  createMany: ShoppingCartItemCreateManyCartInputEnvelope
  delete: [ShoppingCartItemWhereUniqueInput!]
  deleteMany: [ShoppingCartItemScalarWhereInput!]
  disconnect: [ShoppingCartItemWhereUniqueInput!]
  set: [ShoppingCartItemWhereUniqueInput!]
  update: [ShoppingCartItemUpdateWithWhereUniqueWithoutCartInput!]
  updateMany: [ShoppingCartItemUpdateManyWithWhereWithoutCartInput!]
  upsert: [ShoppingCartItemUpsertWithWhereUniqueWithoutCartInput!]
}

input ShoppingCartItemUpdateManyWithoutProductItemNestedInput {
  connect: [ShoppingCartItemWhereUniqueInput!]
  connectOrCreate: [ShoppingCartItemCreateOrConnectWithoutProductItemInput!]
  create: [ShoppingCartItemCreateWithoutProductItemInput!]
  createMany: ShoppingCartItemCreateManyProductItemInputEnvelope
  delete: [ShoppingCartItemWhereUniqueInput!]
  deleteMany: [ShoppingCartItemScalarWhereInput!]
  disconnect: [ShoppingCartItemWhereUniqueInput!]
  set: [ShoppingCartItemWhereUniqueInput!]
  update: [ShoppingCartItemUpdateWithWhereUniqueWithoutProductItemInput!]
  updateMany: [ShoppingCartItemUpdateManyWithWhereWithoutProductItemInput!]
  upsert: [ShoppingCartItemUpsertWithWhereUniqueWithoutProductItemInput!]
}

input ShoppingCartItemUpdateWithWhereUniqueWithoutCartInput {
  data: ShoppingCartItemUpdateWithoutCartInput!
  where: ShoppingCartItemWhereUniqueInput!
}

input ShoppingCartItemUpdateWithWhereUniqueWithoutProductItemInput {
  data: ShoppingCartItemUpdateWithoutProductItemInput!
  where: ShoppingCartItemWhereUniqueInput!
}

input ShoppingCartItemUpdateWithoutCartInput {
  id: StringFieldUpdateOperationsInput
  productItem: ProductItemUpdateOneRequiredWithoutShoppingCartItemNestedInput
  qty: NullableIntFieldUpdateOperationsInput
}

input ShoppingCartItemUpdateWithoutProductItemInput {
  cart: ShoppingCartUpdateOneRequiredWithoutShoppingCartItemNestedInput
  id: StringFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
}

input ShoppingCartItemUpsertWithWhereUniqueWithoutCartInput {
  create: ShoppingCartItemCreateWithoutCartInput!
  update: ShoppingCartItemUpdateWithoutCartInput!
  where: ShoppingCartItemWhereUniqueInput!
}

input ShoppingCartItemUpsertWithWhereUniqueWithoutProductItemInput {
  create: ShoppingCartItemCreateWithoutProductItemInput!
  update: ShoppingCartItemUpdateWithoutProductItemInput!
  where: ShoppingCartItemWhereUniqueInput!
}

input ShoppingCartItemWhereInput {
  AND: [ShoppingCartItemWhereInput!]
  NOT: [ShoppingCartItemWhereInput!]
  OR: [ShoppingCartItemWhereInput!]
  cart: ShoppingCartRelationFilter
  cart_id: StringFilter
  id: StringFilter
  productItem: ProductItemRelationFilter
  product_item_id: StringFilter
  qty: IntNullableFilter
}

input ShoppingCartItemWhereUniqueInput {
  id: String
}

input ShoppingCartListRelationFilter {
  every: ShoppingCartWhereInput
  none: ShoppingCartWhereInput
  some: ShoppingCartWhereInput
}

type ShoppingCartMaxAggregate {
  id: String
  user_id: String
}

input ShoppingCartMaxOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
}

type ShoppingCartMinAggregate {
  id: String
  user_id: String
}

input ShoppingCartMinOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
}

input ShoppingCartOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShoppingCartOrderByWithAggregationInput {
  _count: ShoppingCartCountOrderByAggregateInput
  _max: ShoppingCartMaxOrderByAggregateInput
  _min: ShoppingCartMinOrderByAggregateInput
  id: SortOrder
  user_id: SortOrder
}

input ShoppingCartOrderByWithRelationInput {
  id: SortOrder
  shoppingCartItem: ShoppingCartItemOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  user_id: SortOrder
}

input ShoppingCartRelationFilter {
  is: ShoppingCartWhereInput
  isNot: ShoppingCartWhereInput
}

enum ShoppingCartScalarFieldEnum {
  id
  user_id
}

input ShoppingCartScalarWhereInput {
  AND: [ShoppingCartScalarWhereInput!]
  NOT: [ShoppingCartScalarWhereInput!]
  OR: [ShoppingCartScalarWhereInput!]
  id: StringFilter
  user_id: StringFilter
}

input ShoppingCartScalarWhereWithAggregatesInput {
  AND: [ShoppingCartScalarWhereWithAggregatesInput!]
  NOT: [ShoppingCartScalarWhereWithAggregatesInput!]
  OR: [ShoppingCartScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

input ShoppingCartUpdateInput {
  id: StringFieldUpdateOperationsInput
  shoppingCartItem: ShoppingCartItemUpdateManyWithoutCartNestedInput
  user: UserUpdateOneRequiredWithoutShoppingCartNestedInput
}

input ShoppingCartUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input ShoppingCartUpdateManyWithWhereWithoutUserInput {
  data: ShoppingCartUpdateManyMutationInput!
  where: ShoppingCartScalarWhereInput!
}

input ShoppingCartUpdateManyWithoutUserNestedInput {
  connect: [ShoppingCartWhereUniqueInput!]
  connectOrCreate: [ShoppingCartCreateOrConnectWithoutUserInput!]
  create: [ShoppingCartCreateWithoutUserInput!]
  createMany: ShoppingCartCreateManyUserInputEnvelope
  delete: [ShoppingCartWhereUniqueInput!]
  deleteMany: [ShoppingCartScalarWhereInput!]
  disconnect: [ShoppingCartWhereUniqueInput!]
  set: [ShoppingCartWhereUniqueInput!]
  update: [ShoppingCartUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ShoppingCartUpdateManyWithWhereWithoutUserInput!]
  upsert: [ShoppingCartUpsertWithWhereUniqueWithoutUserInput!]
}

input ShoppingCartUpdateOneRequiredWithoutShoppingCartItemNestedInput {
  connect: ShoppingCartWhereUniqueInput
  connectOrCreate: ShoppingCartCreateOrConnectWithoutShoppingCartItemInput
  create: ShoppingCartCreateWithoutShoppingCartItemInput
  update: ShoppingCartUpdateWithoutShoppingCartItemInput
  upsert: ShoppingCartUpsertWithoutShoppingCartItemInput
}

input ShoppingCartUpdateWithWhereUniqueWithoutUserInput {
  data: ShoppingCartUpdateWithoutUserInput!
  where: ShoppingCartWhereUniqueInput!
}

input ShoppingCartUpdateWithoutShoppingCartItemInput {
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutShoppingCartNestedInput
}

input ShoppingCartUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  shoppingCartItem: ShoppingCartItemUpdateManyWithoutCartNestedInput
}

input ShoppingCartUpsertWithWhereUniqueWithoutUserInput {
  create: ShoppingCartCreateWithoutUserInput!
  update: ShoppingCartUpdateWithoutUserInput!
  where: ShoppingCartWhereUniqueInput!
}

input ShoppingCartUpsertWithoutShoppingCartItemInput {
  create: ShoppingCartCreateWithoutShoppingCartItemInput!
  update: ShoppingCartUpdateWithoutShoppingCartItemInput!
}

input ShoppingCartWhereInput {
  AND: [ShoppingCartWhereInput!]
  NOT: [ShoppingCartWhereInput!]
  OR: [ShoppingCartWhereInput!]
  id: StringFilter
  shoppingCartItem: ShoppingCartItemListRelationFilter
  user: UserRelationFilter
  user_id: StringFilter
}

input ShoppingCartWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input UpdateCategoryInput {
  description: String
  name: String
  parent_category_id: String
}

input UpdateProductInput {
  categoryId: String
  description: String
  id: String
  is_deleted: Boolean
  name: String
  productImage: String
}

type User {
  _count: UserCount
  email_address: String
  id: String!
  is_deleted: Boolean!
  password: String
  phone_number: String
  shopOrder(cursor: ShopOrderWhereUniqueInput, distinct: [ShopOrderScalarFieldEnum!], orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): [ShopOrder!]!
  shoppingCart(cursor: ShoppingCartWhereUniqueInput, distinct: [ShoppingCartScalarFieldEnum!], orderBy: [ShoppingCartOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): [ShoppingCart!]!
  userAddress(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): [UserAddress!]!
  userPaymentMethod(cursor: UserPaymentMethodWhereUniqueInput, distinct: [UserPaymentMethodScalarFieldEnum!], orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): [UserPaymentMethod!]!
  userReview(cursor: UserReviewWhereUniqueInput, distinct: [UserReviewScalarFieldEnum!], orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): [UserReview!]!
}

type UserAddress {
  address: Address!
  address_id: String!
  is_default: Int
  user: User!
  user_id: String!
}

type UserAddressAvgAggregate {
  is_default: Float
}

input UserAddressAvgOrderByAggregateInput {
  is_default: SortOrder
}

type UserAddressCountAggregate {
  _all: Int!
  address_id: Int!
  is_default: Int!
  user_id: Int!
}

input UserAddressCountOrderByAggregateInput {
  address_id: SortOrder
  is_default: SortOrder
  user_id: SortOrder
}

input UserAddressCreateInput {
  address: AddressCreateNestedOneWithoutUserAddressInput!
  is_default: Int
  user: UserCreateNestedOneWithoutUserAddressInput!
}

input UserAddressCreateManyAddressInput {
  is_default: Int
  user_id: String!
}

input UserAddressCreateManyAddressInputEnvelope {
  data: [UserAddressCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input UserAddressCreateManyInput {
  address_id: String!
  is_default: Int
  user_id: String!
}

input UserAddressCreateManyUserInput {
  address_id: String!
  is_default: Int
}

input UserAddressCreateManyUserInputEnvelope {
  data: [UserAddressCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserAddressCreateNestedManyWithoutAddressInput {
  connect: [UserAddressWhereUniqueInput!]
  connectOrCreate: [UserAddressCreateOrConnectWithoutAddressInput!]
  create: [UserAddressCreateWithoutAddressInput!]
  createMany: UserAddressCreateManyAddressInputEnvelope
}

input UserAddressCreateNestedManyWithoutUserInput {
  connect: [UserAddressWhereUniqueInput!]
  connectOrCreate: [UserAddressCreateOrConnectWithoutUserInput!]
  create: [UserAddressCreateWithoutUserInput!]
  createMany: UserAddressCreateManyUserInputEnvelope
}

input UserAddressCreateOrConnectWithoutAddressInput {
  create: UserAddressCreateWithoutAddressInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressCreateOrConnectWithoutUserInput {
  create: UserAddressCreateWithoutUserInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressCreateWithoutAddressInput {
  is_default: Int
  user: UserCreateNestedOneWithoutUserAddressInput!
}

input UserAddressCreateWithoutUserInput {
  address: AddressCreateNestedOneWithoutUserAddressInput!
  is_default: Int
}

type UserAddressGroupBy {
  _avg: UserAddressAvgAggregate
  _count: UserAddressCountAggregate
  _max: UserAddressMaxAggregate
  _min: UserAddressMinAggregate
  _sum: UserAddressSumAggregate
  address_id: String!
  is_default: Int
  user_id: String!
}

input UserAddressListRelationFilter {
  every: UserAddressWhereInput
  none: UserAddressWhereInput
  some: UserAddressWhereInput
}

type UserAddressMaxAggregate {
  address_id: String
  is_default: Int
  user_id: String
}

input UserAddressMaxOrderByAggregateInput {
  address_id: SortOrder
  is_default: SortOrder
  user_id: SortOrder
}

type UserAddressMinAggregate {
  address_id: String
  is_default: Int
  user_id: String
}

input UserAddressMinOrderByAggregateInput {
  address_id: SortOrder
  is_default: SortOrder
  user_id: SortOrder
}

input UserAddressOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserAddressOrderByWithAggregationInput {
  _avg: UserAddressAvgOrderByAggregateInput
  _count: UserAddressCountOrderByAggregateInput
  _max: UserAddressMaxOrderByAggregateInput
  _min: UserAddressMinOrderByAggregateInput
  _sum: UserAddressSumOrderByAggregateInput
  address_id: SortOrder
  is_default: SortOrder
  user_id: SortOrder
}

input UserAddressOrderByWithRelationInput {
  address: AddressOrderByWithRelationInput
  address_id: SortOrder
  is_default: SortOrder
  user: UserOrderByWithRelationInput
  user_id: SortOrder
}

enum UserAddressScalarFieldEnum {
  address_id
  is_default
  user_id
}

input UserAddressScalarWhereInput {
  AND: [UserAddressScalarWhereInput!]
  NOT: [UserAddressScalarWhereInput!]
  OR: [UserAddressScalarWhereInput!]
  address_id: StringFilter
  is_default: IntNullableFilter
  user_id: StringFilter
}

input UserAddressScalarWhereWithAggregatesInput {
  AND: [UserAddressScalarWhereWithAggregatesInput!]
  NOT: [UserAddressScalarWhereWithAggregatesInput!]
  OR: [UserAddressScalarWhereWithAggregatesInput!]
  address_id: StringWithAggregatesFilter
  is_default: IntNullableWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

type UserAddressSumAggregate {
  is_default: Int
}

input UserAddressSumOrderByAggregateInput {
  is_default: SortOrder
}

input UserAddressUpdateInput {
  address: AddressUpdateOneRequiredWithoutUserAddressNestedInput
  is_default: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserAddressNestedInput
}

input UserAddressUpdateManyMutationInput {
  is_default: NullableIntFieldUpdateOperationsInput
}

input UserAddressUpdateManyWithWhereWithoutAddressInput {
  data: UserAddressUpdateManyMutationInput!
  where: UserAddressScalarWhereInput!
}

input UserAddressUpdateManyWithWhereWithoutUserInput {
  data: UserAddressUpdateManyMutationInput!
  where: UserAddressScalarWhereInput!
}

input UserAddressUpdateManyWithoutAddressNestedInput {
  connect: [UserAddressWhereUniqueInput!]
  connectOrCreate: [UserAddressCreateOrConnectWithoutAddressInput!]
  create: [UserAddressCreateWithoutAddressInput!]
  createMany: UserAddressCreateManyAddressInputEnvelope
  delete: [UserAddressWhereUniqueInput!]
  deleteMany: [UserAddressScalarWhereInput!]
  disconnect: [UserAddressWhereUniqueInput!]
  set: [UserAddressWhereUniqueInput!]
  update: [UserAddressUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [UserAddressUpdateManyWithWhereWithoutAddressInput!]
  upsert: [UserAddressUpsertWithWhereUniqueWithoutAddressInput!]
}

input UserAddressUpdateManyWithoutUserNestedInput {
  connect: [UserAddressWhereUniqueInput!]
  connectOrCreate: [UserAddressCreateOrConnectWithoutUserInput!]
  create: [UserAddressCreateWithoutUserInput!]
  createMany: UserAddressCreateManyUserInputEnvelope
  delete: [UserAddressWhereUniqueInput!]
  deleteMany: [UserAddressScalarWhereInput!]
  disconnect: [UserAddressWhereUniqueInput!]
  set: [UserAddressWhereUniqueInput!]
  update: [UserAddressUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserAddressUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserAddressUpsertWithWhereUniqueWithoutUserInput!]
}

input UserAddressUpdateWithWhereUniqueWithoutAddressInput {
  data: UserAddressUpdateWithoutAddressInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressUpdateWithWhereUniqueWithoutUserInput {
  data: UserAddressUpdateWithoutUserInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressUpdateWithoutAddressInput {
  is_default: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserAddressNestedInput
}

input UserAddressUpdateWithoutUserInput {
  address: AddressUpdateOneRequiredWithoutUserAddressNestedInput
  is_default: NullableIntFieldUpdateOperationsInput
}

input UserAddressUpsertWithWhereUniqueWithoutAddressInput {
  create: UserAddressCreateWithoutAddressInput!
  update: UserAddressUpdateWithoutAddressInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressUpsertWithWhereUniqueWithoutUserInput {
  create: UserAddressCreateWithoutUserInput!
  update: UserAddressUpdateWithoutUserInput!
  where: UserAddressWhereUniqueInput!
}

input UserAddressUser_idAddress_idCompoundUniqueInput {
  address_id: String!
  user_id: String!
}

input UserAddressWhereInput {
  AND: [UserAddressWhereInput!]
  NOT: [UserAddressWhereInput!]
  OR: [UserAddressWhereInput!]
  address: AddressRelationFilter
  address_id: StringFilter
  is_default: IntNullableFilter
  user: UserRelationFilter
  user_id: StringFilter
}

input UserAddressWhereUniqueInput {
  user_id_address_id: UserAddressUser_idAddress_idCompoundUniqueInput
}

type UserCount {
  shopOrder: Int!
  shoppingCart: Int!
  userAddress: Int!
  userPaymentMethod: Int!
  userReview: Int!
}

type UserCountAggregate {
  _all: Int!
  email_address: Int!
  id: Int!
  is_deleted: Int!
  password: Int!
  phone_number: Int!
}

input UserCountOrderByAggregateInput {
  email_address: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  password: SortOrder
  phone_number: SortOrder
}

input UserCreateInput {
  email_address: String
  id: String
  is_deleted: Boolean
  password: String
  phone_number: String
  shopOrder: ShopOrderCreateNestedManyWithoutUserInput
  shoppingCart: ShoppingCartCreateNestedManyWithoutUserInput
  userAddress: UserAddressCreateNestedManyWithoutUserInput
  userPaymentMethod: UserPaymentMethodCreateNestedManyWithoutUserInput
  userReview: UserReviewCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  email_address: String
  id: String
  is_deleted: Boolean
  password: String
  phone_number: String
}

input UserCreateNestedOneWithoutShopOrderInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShopOrderInput
  create: UserCreateWithoutShopOrderInput
}

input UserCreateNestedOneWithoutShoppingCartInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShoppingCartInput
  create: UserCreateWithoutShoppingCartInput
}

input UserCreateNestedOneWithoutUserAddressInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserAddressInput
  create: UserCreateWithoutUserAddressInput
}

input UserCreateNestedOneWithoutUserPaymentMethodInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserPaymentMethodInput
  create: UserCreateWithoutUserPaymentMethodInput
}

input UserCreateNestedOneWithoutUserReviewInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserReviewInput
  create: UserCreateWithoutUserReviewInput
}

input UserCreateOrConnectWithoutShopOrderInput {
  create: UserCreateWithoutShopOrderInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutShoppingCartInput {
  create: UserCreateWithoutShoppingCartInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserAddressInput {
  create: UserCreateWithoutUserAddressInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserPaymentMethodInput {
  create: UserCreateWithoutUserPaymentMethodInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUserReviewInput {
  create: UserCreateWithoutUserReviewInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutShopOrderInput {
  email_address: String
  id: String
  is_deleted: Boolean
  password: String
  phone_number: String
  shoppingCart: ShoppingCartCreateNestedManyWithoutUserInput
  userAddress: UserAddressCreateNestedManyWithoutUserInput
  userPaymentMethod: UserPaymentMethodCreateNestedManyWithoutUserInput
  userReview: UserReviewCreateNestedManyWithoutUserInput
}

input UserCreateWithoutShoppingCartInput {
  email_address: String
  id: String
  is_deleted: Boolean
  password: String
  phone_number: String
  shopOrder: ShopOrderCreateNestedManyWithoutUserInput
  userAddress: UserAddressCreateNestedManyWithoutUserInput
  userPaymentMethod: UserPaymentMethodCreateNestedManyWithoutUserInput
  userReview: UserReviewCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserAddressInput {
  email_address: String
  id: String
  is_deleted: Boolean
  password: String
  phone_number: String
  shopOrder: ShopOrderCreateNestedManyWithoutUserInput
  shoppingCart: ShoppingCartCreateNestedManyWithoutUserInput
  userPaymentMethod: UserPaymentMethodCreateNestedManyWithoutUserInput
  userReview: UserReviewCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserPaymentMethodInput {
  email_address: String
  id: String
  is_deleted: Boolean
  password: String
  phone_number: String
  shopOrder: ShopOrderCreateNestedManyWithoutUserInput
  shoppingCart: ShoppingCartCreateNestedManyWithoutUserInput
  userAddress: UserAddressCreateNestedManyWithoutUserInput
  userReview: UserReviewCreateNestedManyWithoutUserInput
}

input UserCreateWithoutUserReviewInput {
  email_address: String
  id: String
  is_deleted: Boolean
  password: String
  phone_number: String
  shopOrder: ShopOrderCreateNestedManyWithoutUserInput
  shoppingCart: ShoppingCartCreateNestedManyWithoutUserInput
  userAddress: UserAddressCreateNestedManyWithoutUserInput
  userPaymentMethod: UserPaymentMethodCreateNestedManyWithoutUserInput
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  email_address: String
  id: String!
  is_deleted: Boolean!
  password: String
  phone_number: String
}

type UserMaxAggregate {
  email_address: String
  id: String
  is_deleted: Boolean
  password: String
  phone_number: String
}

input UserMaxOrderByAggregateInput {
  email_address: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  password: SortOrder
  phone_number: SortOrder
}

type UserMinAggregate {
  email_address: String
  id: String
  is_deleted: Boolean
  password: String
  phone_number: String
}

input UserMinOrderByAggregateInput {
  email_address: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  password: SortOrder
  phone_number: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  email_address: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  password: SortOrder
  phone_number: SortOrder
}

input UserOrderByWithRelationInput {
  email_address: SortOrder
  id: SortOrder
  is_deleted: SortOrder
  password: SortOrder
  phone_number: SortOrder
  shopOrder: ShopOrderOrderByRelationAggregateInput
  shoppingCart: ShoppingCartOrderByRelationAggregateInput
  userAddress: UserAddressOrderByRelationAggregateInput
  userPaymentMethod: UserPaymentMethodOrderByRelationAggregateInput
  userReview: UserReviewOrderByRelationAggregateInput
}

type UserPaymentMethod {
  _count: UserPaymentMethodCount
  account_number: String
  id: String!
  is_default: Boolean!
  paymentType: PaymentType!
  payment_type_id: String!
  provider: String
  shopOrder(cursor: ShopOrderWhereUniqueInput, distinct: [ShopOrderScalarFieldEnum!], orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): [ShopOrder!]!
  user: User!
  user_id: String!
}

type UserPaymentMethodCount {
  shopOrder: Int!
}

type UserPaymentMethodCountAggregate {
  _all: Int!
  account_number: Int!
  id: Int!
  is_default: Int!
  payment_type_id: Int!
  provider: Int!
  user_id: Int!
}

input UserPaymentMethodCountOrderByAggregateInput {
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  payment_type_id: SortOrder
  provider: SortOrder
  user_id: SortOrder
}

input UserPaymentMethodCreateInput {
  account_number: String
  id: String
  is_default: Boolean
  paymentType: PaymentTypeCreateNestedOneWithoutUserPaymentMethodInput!
  provider: String
  shopOrder: ShopOrderCreateNestedManyWithoutPayment_methodInput
  user: UserCreateNestedOneWithoutUserPaymentMethodInput!
}

input UserPaymentMethodCreateManyInput {
  account_number: String
  id: String
  is_default: Boolean
  payment_type_id: String!
  provider: String
  user_id: String!
}

input UserPaymentMethodCreateManyPaymentTypeInput {
  account_number: String
  id: String
  is_default: Boolean
  provider: String
  user_id: String!
}

input UserPaymentMethodCreateManyPaymentTypeInputEnvelope {
  data: [UserPaymentMethodCreateManyPaymentTypeInput!]!
  skipDuplicates: Boolean
}

input UserPaymentMethodCreateManyUserInput {
  account_number: String
  id: String
  is_default: Boolean
  payment_type_id: String!
  provider: String
}

input UserPaymentMethodCreateManyUserInputEnvelope {
  data: [UserPaymentMethodCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserPaymentMethodCreateNestedManyWithoutPaymentTypeInput {
  connect: [UserPaymentMethodWhereUniqueInput!]
  connectOrCreate: [UserPaymentMethodCreateOrConnectWithoutPaymentTypeInput!]
  create: [UserPaymentMethodCreateWithoutPaymentTypeInput!]
  createMany: UserPaymentMethodCreateManyPaymentTypeInputEnvelope
}

input UserPaymentMethodCreateNestedManyWithoutUserInput {
  connect: [UserPaymentMethodWhereUniqueInput!]
  connectOrCreate: [UserPaymentMethodCreateOrConnectWithoutUserInput!]
  create: [UserPaymentMethodCreateWithoutUserInput!]
  createMany: UserPaymentMethodCreateManyUserInputEnvelope
}

input UserPaymentMethodCreateNestedOneWithoutShopOrderInput {
  connect: UserPaymentMethodWhereUniqueInput
  connectOrCreate: UserPaymentMethodCreateOrConnectWithoutShopOrderInput
  create: UserPaymentMethodCreateWithoutShopOrderInput
}

input UserPaymentMethodCreateOrConnectWithoutPaymentTypeInput {
  create: UserPaymentMethodCreateWithoutPaymentTypeInput!
  where: UserPaymentMethodWhereUniqueInput!
}

input UserPaymentMethodCreateOrConnectWithoutShopOrderInput {
  create: UserPaymentMethodCreateWithoutShopOrderInput!
  where: UserPaymentMethodWhereUniqueInput!
}

input UserPaymentMethodCreateOrConnectWithoutUserInput {
  create: UserPaymentMethodCreateWithoutUserInput!
  where: UserPaymentMethodWhereUniqueInput!
}

input UserPaymentMethodCreateWithoutPaymentTypeInput {
  account_number: String
  id: String
  is_default: Boolean
  provider: String
  shopOrder: ShopOrderCreateNestedManyWithoutPayment_methodInput
  user: UserCreateNestedOneWithoutUserPaymentMethodInput!
}

input UserPaymentMethodCreateWithoutShopOrderInput {
  account_number: String
  id: String
  is_default: Boolean
  paymentType: PaymentTypeCreateNestedOneWithoutUserPaymentMethodInput!
  provider: String
  user: UserCreateNestedOneWithoutUserPaymentMethodInput!
}

input UserPaymentMethodCreateWithoutUserInput {
  account_number: String
  id: String
  is_default: Boolean
  paymentType: PaymentTypeCreateNestedOneWithoutUserPaymentMethodInput!
  provider: String
  shopOrder: ShopOrderCreateNestedManyWithoutPayment_methodInput
}

type UserPaymentMethodGroupBy {
  _count: UserPaymentMethodCountAggregate
  _max: UserPaymentMethodMaxAggregate
  _min: UserPaymentMethodMinAggregate
  account_number: String
  id: String!
  is_default: Boolean!
  payment_type_id: String!
  provider: String
  user_id: String!
}

input UserPaymentMethodListRelationFilter {
  every: UserPaymentMethodWhereInput
  none: UserPaymentMethodWhereInput
  some: UserPaymentMethodWhereInput
}

type UserPaymentMethodMaxAggregate {
  account_number: String
  id: String
  is_default: Boolean
  payment_type_id: String
  provider: String
  user_id: String
}

input UserPaymentMethodMaxOrderByAggregateInput {
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  payment_type_id: SortOrder
  provider: SortOrder
  user_id: SortOrder
}

type UserPaymentMethodMinAggregate {
  account_number: String
  id: String
  is_default: Boolean
  payment_type_id: String
  provider: String
  user_id: String
}

input UserPaymentMethodMinOrderByAggregateInput {
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  payment_type_id: SortOrder
  provider: SortOrder
  user_id: SortOrder
}

input UserPaymentMethodOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserPaymentMethodOrderByWithAggregationInput {
  _count: UserPaymentMethodCountOrderByAggregateInput
  _max: UserPaymentMethodMaxOrderByAggregateInput
  _min: UserPaymentMethodMinOrderByAggregateInput
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  payment_type_id: SortOrder
  provider: SortOrder
  user_id: SortOrder
}

input UserPaymentMethodOrderByWithRelationInput {
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  paymentType: PaymentTypeOrderByWithRelationInput
  payment_type_id: SortOrder
  provider: SortOrder
  shopOrder: ShopOrderOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
  user_id: SortOrder
}

input UserPaymentMethodRelationFilter {
  is: UserPaymentMethodWhereInput
  isNot: UserPaymentMethodWhereInput
}

enum UserPaymentMethodScalarFieldEnum {
  account_number
  id
  is_default
  payment_type_id
  provider
  user_id
}

input UserPaymentMethodScalarWhereInput {
  AND: [UserPaymentMethodScalarWhereInput!]
  NOT: [UserPaymentMethodScalarWhereInput!]
  OR: [UserPaymentMethodScalarWhereInput!]
  account_number: StringNullableFilter
  id: StringFilter
  is_default: BoolFilter
  payment_type_id: StringFilter
  provider: StringNullableFilter
  user_id: StringFilter
}

input UserPaymentMethodScalarWhereWithAggregatesInput {
  AND: [UserPaymentMethodScalarWhereWithAggregatesInput!]
  NOT: [UserPaymentMethodScalarWhereWithAggregatesInput!]
  OR: [UserPaymentMethodScalarWhereWithAggregatesInput!]
  account_number: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  is_default: BoolWithAggregatesFilter
  payment_type_id: StringWithAggregatesFilter
  provider: StringNullableWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

input UserPaymentMethodUpdateInput {
  account_number: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_default: BoolFieldUpdateOperationsInput
  paymentType: PaymentTypeUpdateOneRequiredWithoutUserPaymentMethodNestedInput
  provider: NullableStringFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateManyWithoutPayment_methodNestedInput
  user: UserUpdateOneRequiredWithoutUserPaymentMethodNestedInput
}

input UserPaymentMethodUpdateManyMutationInput {
  account_number: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_default: BoolFieldUpdateOperationsInput
  provider: NullableStringFieldUpdateOperationsInput
}

input UserPaymentMethodUpdateManyWithWhereWithoutPaymentTypeInput {
  data: UserPaymentMethodUpdateManyMutationInput!
  where: UserPaymentMethodScalarWhereInput!
}

input UserPaymentMethodUpdateManyWithWhereWithoutUserInput {
  data: UserPaymentMethodUpdateManyMutationInput!
  where: UserPaymentMethodScalarWhereInput!
}

input UserPaymentMethodUpdateManyWithoutPaymentTypeNestedInput {
  connect: [UserPaymentMethodWhereUniqueInput!]
  connectOrCreate: [UserPaymentMethodCreateOrConnectWithoutPaymentTypeInput!]
  create: [UserPaymentMethodCreateWithoutPaymentTypeInput!]
  createMany: UserPaymentMethodCreateManyPaymentTypeInputEnvelope
  delete: [UserPaymentMethodWhereUniqueInput!]
  deleteMany: [UserPaymentMethodScalarWhereInput!]
  disconnect: [UserPaymentMethodWhereUniqueInput!]
  set: [UserPaymentMethodWhereUniqueInput!]
  update: [UserPaymentMethodUpdateWithWhereUniqueWithoutPaymentTypeInput!]
  updateMany: [UserPaymentMethodUpdateManyWithWhereWithoutPaymentTypeInput!]
  upsert: [UserPaymentMethodUpsertWithWhereUniqueWithoutPaymentTypeInput!]
}

input UserPaymentMethodUpdateManyWithoutUserNestedInput {
  connect: [UserPaymentMethodWhereUniqueInput!]
  connectOrCreate: [UserPaymentMethodCreateOrConnectWithoutUserInput!]
  create: [UserPaymentMethodCreateWithoutUserInput!]
  createMany: UserPaymentMethodCreateManyUserInputEnvelope
  delete: [UserPaymentMethodWhereUniqueInput!]
  deleteMany: [UserPaymentMethodScalarWhereInput!]
  disconnect: [UserPaymentMethodWhereUniqueInput!]
  set: [UserPaymentMethodWhereUniqueInput!]
  update: [UserPaymentMethodUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserPaymentMethodUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserPaymentMethodUpsertWithWhereUniqueWithoutUserInput!]
}

input UserPaymentMethodUpdateOneRequiredWithoutShopOrderNestedInput {
  connect: UserPaymentMethodWhereUniqueInput
  connectOrCreate: UserPaymentMethodCreateOrConnectWithoutShopOrderInput
  create: UserPaymentMethodCreateWithoutShopOrderInput
  update: UserPaymentMethodUpdateWithoutShopOrderInput
  upsert: UserPaymentMethodUpsertWithoutShopOrderInput
}

input UserPaymentMethodUpdateWithWhereUniqueWithoutPaymentTypeInput {
  data: UserPaymentMethodUpdateWithoutPaymentTypeInput!
  where: UserPaymentMethodWhereUniqueInput!
}

input UserPaymentMethodUpdateWithWhereUniqueWithoutUserInput {
  data: UserPaymentMethodUpdateWithoutUserInput!
  where: UserPaymentMethodWhereUniqueInput!
}

input UserPaymentMethodUpdateWithoutPaymentTypeInput {
  account_number: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_default: BoolFieldUpdateOperationsInput
  provider: NullableStringFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateManyWithoutPayment_methodNestedInput
  user: UserUpdateOneRequiredWithoutUserPaymentMethodNestedInput
}

input UserPaymentMethodUpdateWithoutShopOrderInput {
  account_number: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_default: BoolFieldUpdateOperationsInput
  paymentType: PaymentTypeUpdateOneRequiredWithoutUserPaymentMethodNestedInput
  provider: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserPaymentMethodNestedInput
}

input UserPaymentMethodUpdateWithoutUserInput {
  account_number: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_default: BoolFieldUpdateOperationsInput
  paymentType: PaymentTypeUpdateOneRequiredWithoutUserPaymentMethodNestedInput
  provider: NullableStringFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateManyWithoutPayment_methodNestedInput
}

input UserPaymentMethodUpsertWithWhereUniqueWithoutPaymentTypeInput {
  create: UserPaymentMethodCreateWithoutPaymentTypeInput!
  update: UserPaymentMethodUpdateWithoutPaymentTypeInput!
  where: UserPaymentMethodWhereUniqueInput!
}

input UserPaymentMethodUpsertWithWhereUniqueWithoutUserInput {
  create: UserPaymentMethodCreateWithoutUserInput!
  update: UserPaymentMethodUpdateWithoutUserInput!
  where: UserPaymentMethodWhereUniqueInput!
}

input UserPaymentMethodUpsertWithoutShopOrderInput {
  create: UserPaymentMethodCreateWithoutShopOrderInput!
  update: UserPaymentMethodUpdateWithoutShopOrderInput!
}

input UserPaymentMethodWhereInput {
  AND: [UserPaymentMethodWhereInput!]
  NOT: [UserPaymentMethodWhereInput!]
  OR: [UserPaymentMethodWhereInput!]
  account_number: StringNullableFilter
  id: StringFilter
  is_default: BoolFilter
  paymentType: PaymentTypeRelationFilter
  payment_type_id: StringFilter
  provider: StringNullableFilter
  shopOrder: ShopOrderListRelationFilter
  user: UserRelationFilter
  user_id: StringFilter
}

input UserPaymentMethodWhereUniqueInput {
  id: String
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

type UserReview {
  comment: String
  id: String!
  ordered_product: ProductItem!
  ordered_product_id: String!
  rating_value: Int
  user: User!
  user_id: String!
}

type UserReviewAvgAggregate {
  rating_value: Float
}

input UserReviewAvgOrderByAggregateInput {
  rating_value: SortOrder
}

type UserReviewCountAggregate {
  _all: Int!
  comment: Int!
  id: Int!
  ordered_product_id: Int!
  rating_value: Int!
  user_id: Int!
}

input UserReviewCountOrderByAggregateInput {
  comment: SortOrder
  id: SortOrder
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user_id: SortOrder
}

input UserReviewCreateInput {
  comment: String
  id: String
  ordered_product: ProductItemCreateNestedOneWithoutUserReviewInput!
  rating_value: Int
  user: UserCreateNestedOneWithoutUserReviewInput!
}

input UserReviewCreateManyInput {
  comment: String
  id: String
  ordered_product_id: String!
  rating_value: Int
  user_id: String!
}

input UserReviewCreateManyOrdered_productInput {
  comment: String
  id: String
  rating_value: Int
  user_id: String!
}

input UserReviewCreateManyOrdered_productInputEnvelope {
  data: [UserReviewCreateManyOrdered_productInput!]!
  skipDuplicates: Boolean
}

input UserReviewCreateManyUserInput {
  comment: String
  id: String
  ordered_product_id: String!
  rating_value: Int
}

input UserReviewCreateManyUserInputEnvelope {
  data: [UserReviewCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserReviewCreateNestedManyWithoutOrdered_productInput {
  connect: [UserReviewWhereUniqueInput!]
  connectOrCreate: [UserReviewCreateOrConnectWithoutOrdered_productInput!]
  create: [UserReviewCreateWithoutOrdered_productInput!]
  createMany: UserReviewCreateManyOrdered_productInputEnvelope
}

input UserReviewCreateNestedManyWithoutUserInput {
  connect: [UserReviewWhereUniqueInput!]
  connectOrCreate: [UserReviewCreateOrConnectWithoutUserInput!]
  create: [UserReviewCreateWithoutUserInput!]
  createMany: UserReviewCreateManyUserInputEnvelope
}

input UserReviewCreateOrConnectWithoutOrdered_productInput {
  create: UserReviewCreateWithoutOrdered_productInput!
  where: UserReviewWhereUniqueInput!
}

input UserReviewCreateOrConnectWithoutUserInput {
  create: UserReviewCreateWithoutUserInput!
  where: UserReviewWhereUniqueInput!
}

input UserReviewCreateWithoutOrdered_productInput {
  comment: String
  id: String
  rating_value: Int
  user: UserCreateNestedOneWithoutUserReviewInput!
}

input UserReviewCreateWithoutUserInput {
  comment: String
  id: String
  ordered_product: ProductItemCreateNestedOneWithoutUserReviewInput!
  rating_value: Int
}

type UserReviewGroupBy {
  _avg: UserReviewAvgAggregate
  _count: UserReviewCountAggregate
  _max: UserReviewMaxAggregate
  _min: UserReviewMinAggregate
  _sum: UserReviewSumAggregate
  comment: String
  id: String!
  ordered_product_id: String!
  rating_value: Int
  user_id: String!
}

input UserReviewListRelationFilter {
  every: UserReviewWhereInput
  none: UserReviewWhereInput
  some: UserReviewWhereInput
}

type UserReviewMaxAggregate {
  comment: String
  id: String
  ordered_product_id: String
  rating_value: Int
  user_id: String
}

input UserReviewMaxOrderByAggregateInput {
  comment: SortOrder
  id: SortOrder
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user_id: SortOrder
}

type UserReviewMinAggregate {
  comment: String
  id: String
  ordered_product_id: String
  rating_value: Int
  user_id: String
}

input UserReviewMinOrderByAggregateInput {
  comment: SortOrder
  id: SortOrder
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user_id: SortOrder
}

input UserReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserReviewOrderByWithAggregationInput {
  _avg: UserReviewAvgOrderByAggregateInput
  _count: UserReviewCountOrderByAggregateInput
  _max: UserReviewMaxOrderByAggregateInput
  _min: UserReviewMinOrderByAggregateInput
  _sum: UserReviewSumOrderByAggregateInput
  comment: SortOrder
  id: SortOrder
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user_id: SortOrder
}

input UserReviewOrderByWithRelationInput {
  comment: SortOrder
  id: SortOrder
  ordered_product: ProductItemOrderByWithRelationInput
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user: UserOrderByWithRelationInput
  user_id: SortOrder
}

enum UserReviewScalarFieldEnum {
  comment
  id
  ordered_product_id
  rating_value
  user_id
}

input UserReviewScalarWhereInput {
  AND: [UserReviewScalarWhereInput!]
  NOT: [UserReviewScalarWhereInput!]
  OR: [UserReviewScalarWhereInput!]
  comment: StringNullableFilter
  id: StringFilter
  ordered_product_id: StringFilter
  rating_value: IntNullableFilter
  user_id: StringFilter
}

input UserReviewScalarWhereWithAggregatesInput {
  AND: [UserReviewScalarWhereWithAggregatesInput!]
  NOT: [UserReviewScalarWhereWithAggregatesInput!]
  OR: [UserReviewScalarWhereWithAggregatesInput!]
  comment: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  ordered_product_id: StringWithAggregatesFilter
  rating_value: IntNullableWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

type UserReviewSumAggregate {
  rating_value: Int
}

input UserReviewSumOrderByAggregateInput {
  rating_value: SortOrder
}

input UserReviewUpdateInput {
  comment: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ordered_product: ProductItemUpdateOneRequiredWithoutUserReviewNestedInput
  rating_value: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserReviewNestedInput
}

input UserReviewUpdateManyMutationInput {
  comment: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating_value: NullableIntFieldUpdateOperationsInput
}

input UserReviewUpdateManyWithWhereWithoutOrdered_productInput {
  data: UserReviewUpdateManyMutationInput!
  where: UserReviewScalarWhereInput!
}

input UserReviewUpdateManyWithWhereWithoutUserInput {
  data: UserReviewUpdateManyMutationInput!
  where: UserReviewScalarWhereInput!
}

input UserReviewUpdateManyWithoutOrdered_productNestedInput {
  connect: [UserReviewWhereUniqueInput!]
  connectOrCreate: [UserReviewCreateOrConnectWithoutOrdered_productInput!]
  create: [UserReviewCreateWithoutOrdered_productInput!]
  createMany: UserReviewCreateManyOrdered_productInputEnvelope
  delete: [UserReviewWhereUniqueInput!]
  deleteMany: [UserReviewScalarWhereInput!]
  disconnect: [UserReviewWhereUniqueInput!]
  set: [UserReviewWhereUniqueInput!]
  update: [UserReviewUpdateWithWhereUniqueWithoutOrdered_productInput!]
  updateMany: [UserReviewUpdateManyWithWhereWithoutOrdered_productInput!]
  upsert: [UserReviewUpsertWithWhereUniqueWithoutOrdered_productInput!]
}

input UserReviewUpdateManyWithoutUserNestedInput {
  connect: [UserReviewWhereUniqueInput!]
  connectOrCreate: [UserReviewCreateOrConnectWithoutUserInput!]
  create: [UserReviewCreateWithoutUserInput!]
  createMany: UserReviewCreateManyUserInputEnvelope
  delete: [UserReviewWhereUniqueInput!]
  deleteMany: [UserReviewScalarWhereInput!]
  disconnect: [UserReviewWhereUniqueInput!]
  set: [UserReviewWhereUniqueInput!]
  update: [UserReviewUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserReviewUpdateManyWithWhereWithoutUserInput!]
  upsert: [UserReviewUpsertWithWhereUniqueWithoutUserInput!]
}

input UserReviewUpdateWithWhereUniqueWithoutOrdered_productInput {
  data: UserReviewUpdateWithoutOrdered_productInput!
  where: UserReviewWhereUniqueInput!
}

input UserReviewUpdateWithWhereUniqueWithoutUserInput {
  data: UserReviewUpdateWithoutUserInput!
  where: UserReviewWhereUniqueInput!
}

input UserReviewUpdateWithoutOrdered_productInput {
  comment: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  rating_value: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserReviewNestedInput
}

input UserReviewUpdateWithoutUserInput {
  comment: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ordered_product: ProductItemUpdateOneRequiredWithoutUserReviewNestedInput
  rating_value: NullableIntFieldUpdateOperationsInput
}

input UserReviewUpsertWithWhereUniqueWithoutOrdered_productInput {
  create: UserReviewCreateWithoutOrdered_productInput!
  update: UserReviewUpdateWithoutOrdered_productInput!
  where: UserReviewWhereUniqueInput!
}

input UserReviewUpsertWithWhereUniqueWithoutUserInput {
  create: UserReviewCreateWithoutUserInput!
  update: UserReviewUpdateWithoutUserInput!
  where: UserReviewWhereUniqueInput!
}

input UserReviewWhereInput {
  AND: [UserReviewWhereInput!]
  NOT: [UserReviewWhereInput!]
  OR: [UserReviewWhereInput!]
  comment: StringNullableFilter
  id: StringFilter
  ordered_product: ProductItemRelationFilter
  ordered_product_id: StringFilter
  rating_value: IntNullableFilter
  user: UserRelationFilter
  user_id: StringFilter
}

input UserReviewWhereUniqueInput {
  id: String
}

enum UserScalarFieldEnum {
  email_address
  id
  is_deleted
  password
  phone_number
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  email_address: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  is_deleted: BoolWithAggregatesFilter
  password: StringNullableWithAggregatesFilter
  phone_number: StringNullableWithAggregatesFilter
}

input UserUpdateInput {
  email_address: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phone_number: NullableStringFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateManyWithoutUserNestedInput
  shoppingCart: ShoppingCartUpdateManyWithoutUserNestedInput
  userAddress: UserAddressUpdateManyWithoutUserNestedInput
  userPaymentMethod: UserPaymentMethodUpdateManyWithoutUserNestedInput
  userReview: UserReviewUpdateManyWithoutUserNestedInput
}

input UserUpdateManyMutationInput {
  email_address: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phone_number: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutShopOrderNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShopOrderInput
  create: UserCreateWithoutShopOrderInput
  update: UserUpdateWithoutShopOrderInput
  upsert: UserUpsertWithoutShopOrderInput
}

input UserUpdateOneRequiredWithoutShoppingCartNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutShoppingCartInput
  create: UserCreateWithoutShoppingCartInput
  update: UserUpdateWithoutShoppingCartInput
  upsert: UserUpsertWithoutShoppingCartInput
}

input UserUpdateOneRequiredWithoutUserAddressNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserAddressInput
  create: UserCreateWithoutUserAddressInput
  update: UserUpdateWithoutUserAddressInput
  upsert: UserUpsertWithoutUserAddressInput
}

input UserUpdateOneRequiredWithoutUserPaymentMethodNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserPaymentMethodInput
  create: UserCreateWithoutUserPaymentMethodInput
  update: UserUpdateWithoutUserPaymentMethodInput
  upsert: UserUpsertWithoutUserPaymentMethodInput
}

input UserUpdateOneRequiredWithoutUserReviewNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUserReviewInput
  create: UserCreateWithoutUserReviewInput
  update: UserUpdateWithoutUserReviewInput
  upsert: UserUpsertWithoutUserReviewInput
}

input UserUpdateWithoutShopOrderInput {
  email_address: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phone_number: NullableStringFieldUpdateOperationsInput
  shoppingCart: ShoppingCartUpdateManyWithoutUserNestedInput
  userAddress: UserAddressUpdateManyWithoutUserNestedInput
  userPaymentMethod: UserPaymentMethodUpdateManyWithoutUserNestedInput
  userReview: UserReviewUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutShoppingCartInput {
  email_address: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phone_number: NullableStringFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateManyWithoutUserNestedInput
  userAddress: UserAddressUpdateManyWithoutUserNestedInput
  userPaymentMethod: UserPaymentMethodUpdateManyWithoutUserNestedInput
  userReview: UserReviewUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutUserAddressInput {
  email_address: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phone_number: NullableStringFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateManyWithoutUserNestedInput
  shoppingCart: ShoppingCartUpdateManyWithoutUserNestedInput
  userPaymentMethod: UserPaymentMethodUpdateManyWithoutUserNestedInput
  userReview: UserReviewUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutUserPaymentMethodInput {
  email_address: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phone_number: NullableStringFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateManyWithoutUserNestedInput
  shoppingCart: ShoppingCartUpdateManyWithoutUserNestedInput
  userAddress: UserAddressUpdateManyWithoutUserNestedInput
  userReview: UserReviewUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutUserReviewInput {
  email_address: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_deleted: BoolFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phone_number: NullableStringFieldUpdateOperationsInput
  shopOrder: ShopOrderUpdateManyWithoutUserNestedInput
  shoppingCart: ShoppingCartUpdateManyWithoutUserNestedInput
  userAddress: UserAddressUpdateManyWithoutUserNestedInput
  userPaymentMethod: UserPaymentMethodUpdateManyWithoutUserNestedInput
}

input UserUpsertWithoutShopOrderInput {
  create: UserCreateWithoutShopOrderInput!
  update: UserUpdateWithoutShopOrderInput!
}

input UserUpsertWithoutShoppingCartInput {
  create: UserCreateWithoutShoppingCartInput!
  update: UserUpdateWithoutShoppingCartInput!
}

input UserUpsertWithoutUserAddressInput {
  create: UserCreateWithoutUserAddressInput!
  update: UserUpdateWithoutUserAddressInput!
}

input UserUpsertWithoutUserPaymentMethodInput {
  create: UserCreateWithoutUserPaymentMethodInput!
  update: UserUpdateWithoutUserPaymentMethodInput!
}

input UserUpsertWithoutUserReviewInput {
  create: UserCreateWithoutUserReviewInput!
  update: UserUpdateWithoutUserReviewInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email_address: StringNullableFilter
  id: StringFilter
  is_deleted: BoolFilter
  password: StringNullableFilter
  phone_number: StringNullableFilter
  shopOrder: ShopOrderListRelationFilter
  shoppingCart: ShoppingCartListRelationFilter
  userAddress: UserAddressListRelationFilter
  userPaymentMethod: UserPaymentMethodListRelationFilter
  userReview: UserReviewListRelationFilter
}

input UserWhereUniqueInput {
  id: String
}

type Variation {
  _count: VariationCount
  category: Category!
  category_id: String!
  id: String!
  name: String!
  variationOption(cursor: VariationOptionWhereUniqueInput, distinct: [VariationOptionScalarFieldEnum!], orderBy: [VariationOptionOrderByWithRelationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): [VariationOption!]!
}

type VariationCount {
  variationOption: Int!
}

type VariationCountAggregate {
  _all: Int!
  category_id: Int!
  id: Int!
  name: Int!
}

input VariationCountOrderByAggregateInput {
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
}

input VariationCreateInput {
  category: CategoryCreateNestedOneWithoutVariationInput!
  id: String
  name: String!
  variationOption: VariationOptionCreateNestedManyWithoutVariationInput
}

input VariationCreateManyCategoryInput {
  id: String
  name: String!
}

input VariationCreateManyCategoryInputEnvelope {
  data: [VariationCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input VariationCreateManyInput {
  category_id: String!
  id: String
  name: String!
}

input VariationCreateNestedManyWithoutCategoryInput {
  connect: [VariationWhereUniqueInput!]
  connectOrCreate: [VariationCreateOrConnectWithoutCategoryInput!]
  create: [VariationCreateWithoutCategoryInput!]
  createMany: VariationCreateManyCategoryInputEnvelope
}

input VariationCreateNestedOneWithoutVariationOptionInput {
  connect: VariationWhereUniqueInput
  connectOrCreate: VariationCreateOrConnectWithoutVariationOptionInput
  create: VariationCreateWithoutVariationOptionInput
}

input VariationCreateOrConnectWithoutCategoryInput {
  create: VariationCreateWithoutCategoryInput!
  where: VariationWhereUniqueInput!
}

input VariationCreateOrConnectWithoutVariationOptionInput {
  create: VariationCreateWithoutVariationOptionInput!
  where: VariationWhereUniqueInput!
}

input VariationCreateWithoutCategoryInput {
  id: String
  name: String!
  variationOption: VariationOptionCreateNestedManyWithoutVariationInput
}

input VariationCreateWithoutVariationOptionInput {
  category: CategoryCreateNestedOneWithoutVariationInput!
  id: String
  name: String!
}

type VariationGroupBy {
  _count: VariationCountAggregate
  _max: VariationMaxAggregate
  _min: VariationMinAggregate
  category_id: String!
  id: String!
  name: String!
}

input VariationListRelationFilter {
  every: VariationWhereInput
  none: VariationWhereInput
  some: VariationWhereInput
}

type VariationMaxAggregate {
  category_id: String
  id: String
  name: String
}

input VariationMaxOrderByAggregateInput {
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
}

type VariationMinAggregate {
  category_id: String
  id: String
  name: String
}

input VariationMinOrderByAggregateInput {
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
}

type VariationOption {
  _count: VariationOptionCount
  id: String!
  productConfiguration(cursor: ProductConfigurationWhereUniqueInput, distinct: [ProductConfigurationScalarFieldEnum!], orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): [ProductConfiguration!]!
  value: String!
  variation: Variation!
  variation_id: String!
}

type VariationOptionCount {
  productConfiguration: Int!
}

type VariationOptionCountAggregate {
  _all: Int!
  id: Int!
  value: Int!
  variation_id: Int!
}

input VariationOptionCountOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
  variation_id: SortOrder
}

input VariationOptionCreateInput {
  id: String
  productConfiguration: ProductConfigurationCreateNestedManyWithoutVariationOptionInput
  value: String!
  variation: VariationCreateNestedOneWithoutVariationOptionInput!
}

input VariationOptionCreateManyInput {
  id: String
  value: String!
  variation_id: String!
}

input VariationOptionCreateManyVariationInput {
  id: String
  value: String!
}

input VariationOptionCreateManyVariationInputEnvelope {
  data: [VariationOptionCreateManyVariationInput!]!
  skipDuplicates: Boolean
}

input VariationOptionCreateNestedManyWithoutVariationInput {
  connect: [VariationOptionWhereUniqueInput!]
  connectOrCreate: [VariationOptionCreateOrConnectWithoutVariationInput!]
  create: [VariationOptionCreateWithoutVariationInput!]
  createMany: VariationOptionCreateManyVariationInputEnvelope
}

input VariationOptionCreateNestedOneWithoutProductConfigurationInput {
  connect: VariationOptionWhereUniqueInput
  connectOrCreate: VariationOptionCreateOrConnectWithoutProductConfigurationInput
  create: VariationOptionCreateWithoutProductConfigurationInput
}

input VariationOptionCreateOrConnectWithoutProductConfigurationInput {
  create: VariationOptionCreateWithoutProductConfigurationInput!
  where: VariationOptionWhereUniqueInput!
}

input VariationOptionCreateOrConnectWithoutVariationInput {
  create: VariationOptionCreateWithoutVariationInput!
  where: VariationOptionWhereUniqueInput!
}

input VariationOptionCreateWithoutProductConfigurationInput {
  id: String
  value: String!
  variation: VariationCreateNestedOneWithoutVariationOptionInput!
}

input VariationOptionCreateWithoutVariationInput {
  id: String
  productConfiguration: ProductConfigurationCreateNestedManyWithoutVariationOptionInput
  value: String!
}

type VariationOptionGroupBy {
  _count: VariationOptionCountAggregate
  _max: VariationOptionMaxAggregate
  _min: VariationOptionMinAggregate
  id: String!
  value: String!
  variation_id: String!
}

input VariationOptionListRelationFilter {
  every: VariationOptionWhereInput
  none: VariationOptionWhereInput
  some: VariationOptionWhereInput
}

type VariationOptionMaxAggregate {
  id: String
  value: String
  variation_id: String
}

input VariationOptionMaxOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
  variation_id: SortOrder
}

type VariationOptionMinAggregate {
  id: String
  value: String
  variation_id: String
}

input VariationOptionMinOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
  variation_id: SortOrder
}

input VariationOptionOrderByRelationAggregateInput {
  _count: SortOrder
}

input VariationOptionOrderByWithAggregationInput {
  _count: VariationOptionCountOrderByAggregateInput
  _max: VariationOptionMaxOrderByAggregateInput
  _min: VariationOptionMinOrderByAggregateInput
  id: SortOrder
  value: SortOrder
  variation_id: SortOrder
}

input VariationOptionOrderByWithRelationInput {
  id: SortOrder
  productConfiguration: ProductConfigurationOrderByRelationAggregateInput
  value: SortOrder
  variation: VariationOrderByWithRelationInput
  variation_id: SortOrder
}

input VariationOptionRelationFilter {
  is: VariationOptionWhereInput
  isNot: VariationOptionWhereInput
}

enum VariationOptionScalarFieldEnum {
  id
  value
  variation_id
}

input VariationOptionScalarWhereInput {
  AND: [VariationOptionScalarWhereInput!]
  NOT: [VariationOptionScalarWhereInput!]
  OR: [VariationOptionScalarWhereInput!]
  id: StringFilter
  value: StringFilter
  variation_id: StringFilter
}

input VariationOptionScalarWhereWithAggregatesInput {
  AND: [VariationOptionScalarWhereWithAggregatesInput!]
  NOT: [VariationOptionScalarWhereWithAggregatesInput!]
  OR: [VariationOptionScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  value: StringWithAggregatesFilter
  variation_id: StringWithAggregatesFilter
}

input VariationOptionUpdateInput {
  id: StringFieldUpdateOperationsInput
  productConfiguration: ProductConfigurationUpdateManyWithoutVariationOptionNestedInput
  value: StringFieldUpdateOperationsInput
  variation: VariationUpdateOneRequiredWithoutVariationOptionNestedInput
}

input VariationOptionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input VariationOptionUpdateManyWithWhereWithoutVariationInput {
  data: VariationOptionUpdateManyMutationInput!
  where: VariationOptionScalarWhereInput!
}

input VariationOptionUpdateManyWithoutVariationNestedInput {
  connect: [VariationOptionWhereUniqueInput!]
  connectOrCreate: [VariationOptionCreateOrConnectWithoutVariationInput!]
  create: [VariationOptionCreateWithoutVariationInput!]
  createMany: VariationOptionCreateManyVariationInputEnvelope
  delete: [VariationOptionWhereUniqueInput!]
  deleteMany: [VariationOptionScalarWhereInput!]
  disconnect: [VariationOptionWhereUniqueInput!]
  set: [VariationOptionWhereUniqueInput!]
  update: [VariationOptionUpdateWithWhereUniqueWithoutVariationInput!]
  updateMany: [VariationOptionUpdateManyWithWhereWithoutVariationInput!]
  upsert: [VariationOptionUpsertWithWhereUniqueWithoutVariationInput!]
}

input VariationOptionUpdateOneRequiredWithoutProductConfigurationNestedInput {
  connect: VariationOptionWhereUniqueInput
  connectOrCreate: VariationOptionCreateOrConnectWithoutProductConfigurationInput
  create: VariationOptionCreateWithoutProductConfigurationInput
  update: VariationOptionUpdateWithoutProductConfigurationInput
  upsert: VariationOptionUpsertWithoutProductConfigurationInput
}

input VariationOptionUpdateWithWhereUniqueWithoutVariationInput {
  data: VariationOptionUpdateWithoutVariationInput!
  where: VariationOptionWhereUniqueInput!
}

input VariationOptionUpdateWithoutProductConfigurationInput {
  id: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
  variation: VariationUpdateOneRequiredWithoutVariationOptionNestedInput
}

input VariationOptionUpdateWithoutVariationInput {
  id: StringFieldUpdateOperationsInput
  productConfiguration: ProductConfigurationUpdateManyWithoutVariationOptionNestedInput
  value: StringFieldUpdateOperationsInput
}

input VariationOptionUpsertWithWhereUniqueWithoutVariationInput {
  create: VariationOptionCreateWithoutVariationInput!
  update: VariationOptionUpdateWithoutVariationInput!
  where: VariationOptionWhereUniqueInput!
}

input VariationOptionUpsertWithoutProductConfigurationInput {
  create: VariationOptionCreateWithoutProductConfigurationInput!
  update: VariationOptionUpdateWithoutProductConfigurationInput!
}

input VariationOptionWhereInput {
  AND: [VariationOptionWhereInput!]
  NOT: [VariationOptionWhereInput!]
  OR: [VariationOptionWhereInput!]
  id: StringFilter
  productConfiguration: ProductConfigurationListRelationFilter
  value: StringFilter
  variation: VariationRelationFilter
  variation_id: StringFilter
}

input VariationOptionWhereUniqueInput {
  id: String
}

input VariationOrderByRelationAggregateInput {
  _count: SortOrder
}

input VariationOrderByWithAggregationInput {
  _count: VariationCountOrderByAggregateInput
  _max: VariationMaxOrderByAggregateInput
  _min: VariationMinOrderByAggregateInput
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
}

input VariationOrderByWithRelationInput {
  category: CategoryOrderByWithRelationInput
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
  variationOption: VariationOptionOrderByRelationAggregateInput
}

input VariationRelationFilter {
  is: VariationWhereInput
  isNot: VariationWhereInput
}

enum VariationScalarFieldEnum {
  category_id
  id
  name
}

input VariationScalarWhereInput {
  AND: [VariationScalarWhereInput!]
  NOT: [VariationScalarWhereInput!]
  OR: [VariationScalarWhereInput!]
  category_id: StringFilter
  id: StringFilter
  name: StringFilter
}

input VariationScalarWhereWithAggregatesInput {
  AND: [VariationScalarWhereWithAggregatesInput!]
  NOT: [VariationScalarWhereWithAggregatesInput!]
  OR: [VariationScalarWhereWithAggregatesInput!]
  category_id: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input VariationUpdateInput {
  category: CategoryUpdateOneRequiredWithoutVariationNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  variationOption: VariationOptionUpdateManyWithoutVariationNestedInput
}

input VariationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input VariationUpdateManyWithWhereWithoutCategoryInput {
  data: VariationUpdateManyMutationInput!
  where: VariationScalarWhereInput!
}

input VariationUpdateManyWithoutCategoryNestedInput {
  connect: [VariationWhereUniqueInput!]
  connectOrCreate: [VariationCreateOrConnectWithoutCategoryInput!]
  create: [VariationCreateWithoutCategoryInput!]
  createMany: VariationCreateManyCategoryInputEnvelope
  delete: [VariationWhereUniqueInput!]
  deleteMany: [VariationScalarWhereInput!]
  disconnect: [VariationWhereUniqueInput!]
  set: [VariationWhereUniqueInput!]
  update: [VariationUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [VariationUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [VariationUpsertWithWhereUniqueWithoutCategoryInput!]
}

input VariationUpdateOneRequiredWithoutVariationOptionNestedInput {
  connect: VariationWhereUniqueInput
  connectOrCreate: VariationCreateOrConnectWithoutVariationOptionInput
  create: VariationCreateWithoutVariationOptionInput
  update: VariationUpdateWithoutVariationOptionInput
  upsert: VariationUpsertWithoutVariationOptionInput
}

input VariationUpdateWithWhereUniqueWithoutCategoryInput {
  data: VariationUpdateWithoutCategoryInput!
  where: VariationWhereUniqueInput!
}

input VariationUpdateWithoutCategoryInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  variationOption: VariationOptionUpdateManyWithoutVariationNestedInput
}

input VariationUpdateWithoutVariationOptionInput {
  category: CategoryUpdateOneRequiredWithoutVariationNestedInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input VariationUpsertWithWhereUniqueWithoutCategoryInput {
  create: VariationCreateWithoutCategoryInput!
  update: VariationUpdateWithoutCategoryInput!
  where: VariationWhereUniqueInput!
}

input VariationUpsertWithoutVariationOptionInput {
  create: VariationCreateWithoutVariationOptionInput!
  update: VariationUpdateWithoutVariationOptionInput!
}

input VariationWhereInput {
  AND: [VariationWhereInput!]
  NOT: [VariationWhereInput!]
  OR: [VariationWhereInput!]
  category: CategoryRelationFilter
  category_id: StringFilter
  id: StringFilter
  name: StringFilter
  variationOption: VariationOptionListRelationFilter
}

input VariationWhereUniqueInput {
  id: String
}
