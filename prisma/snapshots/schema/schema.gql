# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Address {
  address_line1: String
  address_line2: String
  city: String
  country_id: String!
  id: String!
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

type AddressCountAggregate {
  _all: Int!
  address_line1: Int!
  address_line2: Int!
  city: Int!
  country_id: Int!
  id: Int!
  postal_code: Int!
  region: Int!
  street_number: Int!
  unit_number: Int!
}

input AddressCountOrderByAggregateInput {
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
}

input AddressCreateInput {
  address_line1: String
  address_line2: String
  city: String
  country_id: String!
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

input AddressCreateManyInput {
  address_line1: String
  address_line2: String
  city: String
  country_id: String!
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

type AddressGroupBy {
  _count: AddressCountAggregate
  _max: AddressMaxAggregate
  _min: AddressMinAggregate
  address_line1: String
  address_line2: String
  city: String
  country_id: String!
  id: String!
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

type AddressMaxAggregate {
  address_line1: String
  address_line2: String
  city: String
  country_id: String
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

input AddressMaxOrderByAggregateInput {
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
}

type AddressMinAggregate {
  address_line1: String
  address_line2: String
  city: String
  country_id: String
  id: String
  postal_code: String
  region: String
  street_number: String
  unit_number: String
}

input AddressMinOrderByAggregateInput {
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
}

input AddressOrderByWithAggregationInput {
  _count: AddressCountOrderByAggregateInput
  _max: AddressMaxOrderByAggregateInput
  _min: AddressMinOrderByAggregateInput
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
}

input AddressOrderByWithRelationInput {
  address_line1: SortOrder
  address_line2: SortOrder
  city: SortOrder
  country_id: SortOrder
  id: SortOrder
  postal_code: SortOrder
  region: SortOrder
  street_number: SortOrder
  unit_number: SortOrder
}

enum AddressScalarFieldEnum {
  address_line1
  address_line2
  city
  country_id
  id
  postal_code
  region
  street_number
  unit_number
}

input AddressScalarWhereWithAggregatesInput {
  AND: [AddressScalarWhereWithAggregatesInput!]
  NOT: [AddressScalarWhereWithAggregatesInput!]
  OR: [AddressScalarWhereWithAggregatesInput!]
  address_line1: StringNullableWithAggregatesFilter
  address_line2: StringNullableWithAggregatesFilter
  city: StringNullableWithAggregatesFilter
  country_id: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  postal_code: StringNullableWithAggregatesFilter
  region: StringNullableWithAggregatesFilter
  street_number: StringNullableWithAggregatesFilter
  unit_number: StringNullableWithAggregatesFilter
}

input AddressUpdateInput {
  address_line1: NullableStringFieldUpdateOperationsInput
  address_line2: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  country_id: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  postal_code: NullableStringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  street_number: NullableStringFieldUpdateOperationsInput
  unit_number: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateManyMutationInput {
  address_line1: NullableStringFieldUpdateOperationsInput
  address_line2: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  country_id: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  postal_code: NullableStringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  street_number: NullableStringFieldUpdateOperationsInput
  unit_number: NullableStringFieldUpdateOperationsInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  address_line1: StringNullableFilter
  address_line2: StringNullableFilter
  city: StringNullableFilter
  country_id: StringFilter
  id: StringFilter
  postal_code: StringNullableFilter
  region: StringNullableFilter
  street_number: StringNullableFilter
  unit_number: StringNullableFilter
}

input AddressWhereUniqueInput {
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAddress {
  _count: AddressCountAggregate
  _max: AddressMaxAggregate
  _min: AddressMinAggregate
}

type AggregateCountry {
  _count: CountryCountAggregate
  _max: CountryMaxAggregate
  _min: CountryMinAggregate
}

type AggregateOrderLine {
  _avg: OrderLineAvgAggregate
  _count: OrderLineCountAggregate
  _max: OrderLineMaxAggregate
  _min: OrderLineMinAggregate
  _sum: OrderLineSumAggregate
}

type AggregateOrderStatus {
  _count: OrderStatusCountAggregate
  _max: OrderStatusMaxAggregate
  _min: OrderStatusMinAggregate
}

type AggregatePaymentType {
  _count: PaymentTypeCountAggregate
  _max: PaymentTypeMaxAggregate
  _min: PaymentTypeMinAggregate
}

type AggregateProduct {
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
}

type AggregateProductCategory {
  _count: ProductCategoryCountAggregate
  _max: ProductCategoryMaxAggregate
  _min: ProductCategoryMinAggregate
}

type AggregateProductConfiguration {
  _count: ProductConfigurationCountAggregate
  _max: ProductConfigurationMaxAggregate
  _min: ProductConfigurationMinAggregate
}

type AggregateProductItem {
  _avg: ProductItemAvgAggregate
  _count: ProductItemCountAggregate
  _max: ProductItemMaxAggregate
  _min: ProductItemMinAggregate
  _sum: ProductItemSumAggregate
}

type AggregatePromotion {
  _avg: PromotionAvgAggregate
  _count: PromotionCountAggregate
  _max: PromotionMaxAggregate
  _min: PromotionMinAggregate
  _sum: PromotionSumAggregate
}

type AggregatePromotionCategory {
  _count: PromotionCategoryCountAggregate
  _max: PromotionCategoryMaxAggregate
  _min: PromotionCategoryMinAggregate
}

type AggregateShippingMethod {
  _avg: ShippingMethodAvgAggregate
  _count: ShippingMethodCountAggregate
  _max: ShippingMethodMaxAggregate
  _min: ShippingMethodMinAggregate
  _sum: ShippingMethodSumAggregate
}

type AggregateShopOrder {
  _avg: ShopOrderAvgAggregate
  _count: ShopOrderCountAggregate
  _max: ShopOrderMaxAggregate
  _min: ShopOrderMinAggregate
  _sum: ShopOrderSumAggregate
}

type AggregateShoppingCart {
  _count: ShoppingCartCountAggregate
  _max: ShoppingCartMaxAggregate
  _min: ShoppingCartMinAggregate
}

type AggregateShoppingCartItem {
  _avg: ShoppingCartItemAvgAggregate
  _count: ShoppingCartItemCountAggregate
  _max: ShoppingCartItemMaxAggregate
  _min: ShoppingCartItemMinAggregate
  _sum: ShoppingCartItemSumAggregate
}

type AggregateSiteUser {
  _count: SiteUserCountAggregate
  _max: SiteUserMaxAggregate
  _min: SiteUserMinAggregate
}

type AggregateUserAddress {
  _avg: UserAddressAvgAggregate
  _count: UserAddressCountAggregate
  _max: UserAddressMaxAggregate
  _min: UserAddressMinAggregate
  _sum: UserAddressSumAggregate
}

type AggregateUserPaymentMethod {
  _avg: UserPaymentMethodAvgAggregate
  _count: UserPaymentMethodCountAggregate
  _max: UserPaymentMethodMaxAggregate
  _min: UserPaymentMethodMinAggregate
  _sum: UserPaymentMethodSumAggregate
}

type AggregateUserReview {
  _avg: UserReviewAvgAggregate
  _count: UserReviewCountAggregate
  _max: UserReviewMaxAggregate
  _min: UserReviewMinAggregate
  _sum: UserReviewSumAggregate
}

type AggregateVariation {
  _count: VariationCountAggregate
  _max: VariationMaxAggregate
  _min: VariationMinAggregate
}

type AggregateVariationOption {
  _count: VariationOptionCountAggregate
  _max: VariationOptionMaxAggregate
  _min: VariationOptionMinAggregate
}

type Country {
  country_name: String
  id: String!
}

type CountryCountAggregate {
  _all: Int!
  country_name: Int!
  id: Int!
}

input CountryCountOrderByAggregateInput {
  country_name: SortOrder
  id: SortOrder
}

input CountryCreateInput {
  country_name: String
  id: String
}

input CountryCreateManyInput {
  country_name: String
  id: String
}

type CountryGroupBy {
  _count: CountryCountAggregate
  _max: CountryMaxAggregate
  _min: CountryMinAggregate
  country_name: String
  id: String!
}

type CountryMaxAggregate {
  country_name: String
  id: String
}

input CountryMaxOrderByAggregateInput {
  country_name: SortOrder
  id: SortOrder
}

type CountryMinAggregate {
  country_name: String
  id: String
}

input CountryMinOrderByAggregateInput {
  country_name: SortOrder
  id: SortOrder
}

input CountryOrderByWithAggregationInput {
  _count: CountryCountOrderByAggregateInput
  _max: CountryMaxOrderByAggregateInput
  _min: CountryMinOrderByAggregateInput
  country_name: SortOrder
  id: SortOrder
}

input CountryOrderByWithRelationInput {
  country_name: SortOrder
  id: SortOrder
}

enum CountryScalarFieldEnum {
  country_name
  id
}

input CountryScalarWhereWithAggregatesInput {
  AND: [CountryScalarWhereWithAggregatesInput!]
  NOT: [CountryScalarWhereWithAggregatesInput!]
  OR: [CountryScalarWhereWithAggregatesInput!]
  country_name: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
}

input CountryUpdateInput {
  country_name: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input CountryUpdateManyMutationInput {
  country_name: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  country_name: StringNullableFilter
  id: StringFilter
}

input CountryWhereUniqueInput {
  id: String
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyAddress(data: [AddressCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCountry(data: [CountryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyOrderLine(data: [OrderLineCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyOrderStatus(data: [OrderStatusCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPaymentType(data: [PaymentTypeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProduct(data: [ProductCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProductCategory(data: [ProductCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProductConfiguration(data: [ProductConfigurationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyProductItem(data: [ProductItemCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPromotion(data: [PromotionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPromotionCategory(data: [PromotionCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShippingMethod(data: [ShippingMethodCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShopOrder(data: [ShopOrderCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShoppingCart(data: [ShoppingCartCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyShoppingCartItem(data: [ShoppingCartItemCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySiteUser(data: [SiteUserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserAddress(data: [UserAddressCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserPaymentMethod(data: [UserPaymentMethodCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUserReview(data: [UserReviewCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVariation(data: [VariationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVariationOption(data: [VariationOptionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAddress(data: AddressCreateInput!): Address!
  createOneCountry(data: CountryCreateInput!): Country!
  createOneOrderLine(data: OrderLineCreateInput!): OrderLine!
  createOneOrderStatus(data: OrderStatusCreateInput!): OrderStatus!
  createOnePaymentType(data: PaymentTypeCreateInput!): PaymentType!
  createOneProduct(data: ProductCreateInput!): Product!
  createOneProductCategory(data: ProductCategoryCreateInput!): ProductCategory!
  createOneProductConfiguration(data: ProductConfigurationCreateInput!): ProductConfiguration!
  createOneProductItem(data: ProductItemCreateInput!): ProductItem!
  createOnePromotion(data: PromotionCreateInput!): Promotion!
  createOnePromotionCategory(data: PromotionCategoryCreateInput!): PromotionCategory!
  createOneShippingMethod(data: ShippingMethodCreateInput!): ShippingMethod!
  createOneShopOrder(data: ShopOrderCreateInput!): ShopOrder!
  createOneShoppingCart(data: ShoppingCartCreateInput!): ShoppingCart!
  createOneShoppingCartItem(data: ShoppingCartItemCreateInput!): ShoppingCartItem!
  createOneSiteUser(data: SiteUserCreateInput!): SiteUser!
  createOneUserAddress(data: UserAddressCreateInput!): UserAddress!
  createOneUserPaymentMethod(data: UserPaymentMethodCreateInput!): UserPaymentMethod!
  createOneUserReview(data: UserReviewCreateInput!): UserReview!
  createOneVariation(data: VariationCreateInput!): Variation!
  createOneVariationOption(data: VariationOptionCreateInput!): VariationOption!
  createSiteUser(data: SiteUserCreateInput): SiteUser
  deleteManyAddress(where: AddressWhereInput): AffectedRowsOutput!
  deleteManyCountry(where: CountryWhereInput): AffectedRowsOutput!
  deleteManyOrderLine(where: OrderLineWhereInput): AffectedRowsOutput!
  deleteManyOrderStatus(where: OrderStatusWhereInput): AffectedRowsOutput!
  deleteManyPaymentType(where: PaymentTypeWhereInput): AffectedRowsOutput!
  deleteManyProduct(where: ProductWhereInput): AffectedRowsOutput!
  deleteManyProductCategory(where: ProductCategoryWhereInput): AffectedRowsOutput!
  deleteManyProductConfiguration(where: ProductConfigurationWhereInput): AffectedRowsOutput!
  deleteManyProductItem(where: ProductItemWhereInput): AffectedRowsOutput!
  deleteManyPromotion(where: PromotionWhereInput): AffectedRowsOutput!
  deleteManyPromotionCategory(where: PromotionCategoryWhereInput): AffectedRowsOutput!
  deleteManyShippingMethod(where: ShippingMethodWhereInput): AffectedRowsOutput!
  deleteManyShopOrder(where: ShopOrderWhereInput): AffectedRowsOutput!
  deleteManyShoppingCart(where: ShoppingCartWhereInput): AffectedRowsOutput!
  deleteManyShoppingCartItem(where: ShoppingCartItemWhereInput): AffectedRowsOutput!
  deleteManySiteUser(where: SiteUserWhereInput): AffectedRowsOutput!
  deleteManyUserAddress(where: UserAddressWhereInput): AffectedRowsOutput!
  deleteManyUserPaymentMethod(where: UserPaymentMethodWhereInput): AffectedRowsOutput!
  deleteManyUserReview(where: UserReviewWhereInput): AffectedRowsOutput!
  deleteManyVariation(where: VariationWhereInput): AffectedRowsOutput!
  deleteManyVariationOption(where: VariationOptionWhereInput): AffectedRowsOutput!
  deleteOneAddress(where: AddressWhereUniqueInput!): Address
  deleteOneCountry(where: CountryWhereUniqueInput!): Country
  deleteOneOrderLine(where: OrderLineWhereUniqueInput!): OrderLine
  deleteOneOrderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  deleteOnePaymentType(where: PaymentTypeWhereUniqueInput!): PaymentType
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  deleteOneProductCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  deleteOneProductConfiguration(where: ProductConfigurationWhereUniqueInput!): ProductConfiguration
  deleteOneProductItem(where: ProductItemWhereUniqueInput!): ProductItem
  deleteOnePromotion(where: PromotionWhereUniqueInput!): Promotion
  deleteOnePromotionCategory(where: PromotionCategoryWhereUniqueInput!): PromotionCategory
  deleteOneShippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  deleteOneShopOrder(where: ShopOrderWhereUniqueInput!): ShopOrder
  deleteOneShoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  deleteOneShoppingCartItem(where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  deleteOneSiteUser(where: SiteUserWhereUniqueInput!): SiteUser
  deleteOneUserAddress(where: UserAddressWhereUniqueInput!): UserAddress
  deleteOneUserPaymentMethod(where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod
  deleteOneUserReview(where: UserReviewWhereUniqueInput!): UserReview
  deleteOneVariation(where: VariationWhereUniqueInput!): Variation
  deleteOneVariationOption(where: VariationOptionWhereUniqueInput!): VariationOption
  deleteSiteUser(id: String): SiteUser
  updateManyAddress(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): AffectedRowsOutput!
  updateManyCountry(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): AffectedRowsOutput!
  updateManyOrderLine(data: OrderLineUpdateManyMutationInput!, where: OrderLineWhereInput): AffectedRowsOutput!
  updateManyOrderStatus(data: OrderStatusUpdateManyMutationInput!, where: OrderStatusWhereInput): AffectedRowsOutput!
  updateManyPaymentType(data: PaymentTypeUpdateManyMutationInput!, where: PaymentTypeWhereInput): AffectedRowsOutput!
  updateManyProduct(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): AffectedRowsOutput!
  updateManyProductCategory(data: ProductCategoryUpdateManyMutationInput!, where: ProductCategoryWhereInput): AffectedRowsOutput!
  updateManyProductConfiguration(data: ProductConfigurationUpdateManyMutationInput!, where: ProductConfigurationWhereInput): AffectedRowsOutput!
  updateManyProductItem(data: ProductItemUpdateManyMutationInput!, where: ProductItemWhereInput): AffectedRowsOutput!
  updateManyPromotion(data: PromotionUpdateManyMutationInput!, where: PromotionWhereInput): AffectedRowsOutput!
  updateManyPromotionCategory(data: PromotionCategoryUpdateManyMutationInput!, where: PromotionCategoryWhereInput): AffectedRowsOutput!
  updateManyShippingMethod(data: ShippingMethodUpdateManyMutationInput!, where: ShippingMethodWhereInput): AffectedRowsOutput!
  updateManyShopOrder(data: ShopOrderUpdateManyMutationInput!, where: ShopOrderWhereInput): AffectedRowsOutput!
  updateManyShoppingCart(data: ShoppingCartUpdateManyMutationInput!, where: ShoppingCartWhereInput): AffectedRowsOutput!
  updateManyShoppingCartItem(data: ShoppingCartItemUpdateManyMutationInput!, where: ShoppingCartItemWhereInput): AffectedRowsOutput!
  updateManySiteUser(data: SiteUserUpdateManyMutationInput!, where: SiteUserWhereInput): AffectedRowsOutput!
  updateManyUserAddress(data: UserAddressUpdateManyMutationInput!, where: UserAddressWhereInput): AffectedRowsOutput!
  updateManyUserPaymentMethod(data: UserPaymentMethodUpdateManyMutationInput!, where: UserPaymentMethodWhereInput): AffectedRowsOutput!
  updateManyUserReview(data: UserReviewUpdateManyMutationInput!, where: UserReviewWhereInput): AffectedRowsOutput!
  updateManyVariation(data: VariationUpdateManyMutationInput!, where: VariationWhereInput): AffectedRowsOutput!
  updateManyVariationOption(data: VariationOptionUpdateManyMutationInput!, where: VariationOptionWhereInput): AffectedRowsOutput!
  updateOneAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateOneCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateOneOrderLine(data: OrderLineUpdateInput!, where: OrderLineWhereUniqueInput!): OrderLine
  updateOneOrderStatus(data: OrderStatusUpdateInput!, where: OrderStatusWhereUniqueInput!): OrderStatus
  updateOnePaymentType(data: PaymentTypeUpdateInput!, where: PaymentTypeWhereUniqueInput!): PaymentType
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateOneProductCategory(data: ProductCategoryUpdateInput!, where: ProductCategoryWhereUniqueInput!): ProductCategory
  updateOneProductConfiguration(data: ProductConfigurationUpdateInput!, where: ProductConfigurationWhereUniqueInput!): ProductConfiguration
  updateOneProductItem(data: ProductItemUpdateInput!, where: ProductItemWhereUniqueInput!): ProductItem
  updateOnePromotion(data: PromotionUpdateInput!, where: PromotionWhereUniqueInput!): Promotion
  updateOnePromotionCategory(data: PromotionCategoryUpdateInput!, where: PromotionCategoryWhereUniqueInput!): PromotionCategory
  updateOneShippingMethod(data: ShippingMethodUpdateInput!, where: ShippingMethodWhereUniqueInput!): ShippingMethod
  updateOneShopOrder(data: ShopOrderUpdateInput!, where: ShopOrderWhereUniqueInput!): ShopOrder
  updateOneShoppingCart(data: ShoppingCartUpdateInput!, where: ShoppingCartWhereUniqueInput!): ShoppingCart
  updateOneShoppingCartItem(data: ShoppingCartItemUpdateInput!, where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  updateOneSiteUser(data: SiteUserUpdateInput!, where: SiteUserWhereUniqueInput!): SiteUser
  updateOneUserAddress(data: UserAddressUpdateInput!, where: UserAddressWhereUniqueInput!): UserAddress
  updateOneUserPaymentMethod(data: UserPaymentMethodUpdateInput!, where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod
  updateOneUserReview(data: UserReviewUpdateInput!, where: UserReviewWhereUniqueInput!): UserReview
  updateOneVariation(data: VariationUpdateInput!, where: VariationWhereUniqueInput!): Variation
  updateOneVariationOption(data: VariationOptionUpdateInput!, where: VariationOptionWhereUniqueInput!): VariationOption
  updateSiteUser(data: SiteUserUpdateInput, id: String): SiteUser
  upsertOneAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertOneCountry(create: CountryCreateInput!, update: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country!
  upsertOneOrderLine(create: OrderLineCreateInput!, update: OrderLineUpdateInput!, where: OrderLineWhereUniqueInput!): OrderLine!
  upsertOneOrderStatus(create: OrderStatusCreateInput!, update: OrderStatusUpdateInput!, where: OrderStatusWhereUniqueInput!): OrderStatus!
  upsertOnePaymentType(create: PaymentTypeCreateInput!, update: PaymentTypeUpdateInput!, where: PaymentTypeWhereUniqueInput!): PaymentType!
  upsertOneProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  upsertOneProductCategory(create: ProductCategoryCreateInput!, update: ProductCategoryUpdateInput!, where: ProductCategoryWhereUniqueInput!): ProductCategory!
  upsertOneProductConfiguration(create: ProductConfigurationCreateInput!, update: ProductConfigurationUpdateInput!, where: ProductConfigurationWhereUniqueInput!): ProductConfiguration!
  upsertOneProductItem(create: ProductItemCreateInput!, update: ProductItemUpdateInput!, where: ProductItemWhereUniqueInput!): ProductItem!
  upsertOnePromotion(create: PromotionCreateInput!, update: PromotionUpdateInput!, where: PromotionWhereUniqueInput!): Promotion!
  upsertOnePromotionCategory(create: PromotionCategoryCreateInput!, update: PromotionCategoryUpdateInput!, where: PromotionCategoryWhereUniqueInput!): PromotionCategory!
  upsertOneShippingMethod(create: ShippingMethodCreateInput!, update: ShippingMethodUpdateInput!, where: ShippingMethodWhereUniqueInput!): ShippingMethod!
  upsertOneShopOrder(create: ShopOrderCreateInput!, update: ShopOrderUpdateInput!, where: ShopOrderWhereUniqueInput!): ShopOrder!
  upsertOneShoppingCart(create: ShoppingCartCreateInput!, update: ShoppingCartUpdateInput!, where: ShoppingCartWhereUniqueInput!): ShoppingCart!
  upsertOneShoppingCartItem(create: ShoppingCartItemCreateInput!, update: ShoppingCartItemUpdateInput!, where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem!
  upsertOneSiteUser(create: SiteUserCreateInput!, update: SiteUserUpdateInput!, where: SiteUserWhereUniqueInput!): SiteUser!
  upsertOneUserAddress(create: UserAddressCreateInput!, update: UserAddressUpdateInput!, where: UserAddressWhereUniqueInput!): UserAddress!
  upsertOneUserPaymentMethod(create: UserPaymentMethodCreateInput!, update: UserPaymentMethodUpdateInput!, where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod!
  upsertOneUserReview(create: UserReviewCreateInput!, update: UserReviewUpdateInput!, where: UserReviewWhereUniqueInput!): UserReview!
  upsertOneVariation(create: VariationCreateInput!, update: VariationUpdateInput!, where: VariationWhereUniqueInput!): Variation!
  upsertOneVariationOption(create: VariationOptionCreateInput!, update: VariationOptionUpdateInput!, where: VariationOptionWhereUniqueInput!): VariationOption!
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type OrderLine {
  id: String!
  order_id: String!
  price: Int
  product_item_id: String!
  qty: Int
}

type OrderLineAvgAggregate {
  price: Float
  qty: Float
}

input OrderLineAvgOrderByAggregateInput {
  price: SortOrder
  qty: SortOrder
}

type OrderLineCountAggregate {
  _all: Int!
  id: Int!
  order_id: Int!
  price: Int!
  product_item_id: Int!
  qty: Int!
}

input OrderLineCountOrderByAggregateInput {
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input OrderLineCreateInput {
  id: String
  order_id: String!
  price: Int
  product_item_id: String!
  qty: Int
}

input OrderLineCreateManyInput {
  id: String
  order_id: String!
  price: Int
  product_item_id: String!
  qty: Int
}

type OrderLineGroupBy {
  _avg: OrderLineAvgAggregate
  _count: OrderLineCountAggregate
  _max: OrderLineMaxAggregate
  _min: OrderLineMinAggregate
  _sum: OrderLineSumAggregate
  id: String!
  order_id: String!
  price: Int
  product_item_id: String!
  qty: Int
}

type OrderLineMaxAggregate {
  id: String
  order_id: String
  price: Int
  product_item_id: String
  qty: Int
}

input OrderLineMaxOrderByAggregateInput {
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

type OrderLineMinAggregate {
  id: String
  order_id: String
  price: Int
  product_item_id: String
  qty: Int
}

input OrderLineMinOrderByAggregateInput {
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input OrderLineOrderByWithAggregationInput {
  _avg: OrderLineAvgOrderByAggregateInput
  _count: OrderLineCountOrderByAggregateInput
  _max: OrderLineMaxOrderByAggregateInput
  _min: OrderLineMinOrderByAggregateInput
  _sum: OrderLineSumOrderByAggregateInput
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input OrderLineOrderByWithRelationInput {
  id: SortOrder
  order_id: SortOrder
  price: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

enum OrderLineScalarFieldEnum {
  id
  order_id
  price
  product_item_id
  qty
}

input OrderLineScalarWhereWithAggregatesInput {
  AND: [OrderLineScalarWhereWithAggregatesInput!]
  NOT: [OrderLineScalarWhereWithAggregatesInput!]
  OR: [OrderLineScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  order_id: StringWithAggregatesFilter
  price: IntNullableWithAggregatesFilter
  product_item_id: StringWithAggregatesFilter
  qty: IntNullableWithAggregatesFilter
}

type OrderLineSumAggregate {
  price: Int
  qty: Int
}

input OrderLineSumOrderByAggregateInput {
  price: SortOrder
  qty: SortOrder
}

input OrderLineUpdateInput {
  id: StringFieldUpdateOperationsInput
  order_id: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_item_id: StringFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
}

input OrderLineUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  order_id: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_item_id: StringFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
}

input OrderLineWhereInput {
  AND: [OrderLineWhereInput!]
  NOT: [OrderLineWhereInput!]
  OR: [OrderLineWhereInput!]
  id: StringFilter
  order_id: StringFilter
  price: IntNullableFilter
  product_item_id: StringFilter
  qty: IntNullableFilter
}

input OrderLineWhereUniqueInput {
  id: String
}

type OrderStatus {
  id: String!
  status: String
}

type OrderStatusCountAggregate {
  _all: Int!
  id: Int!
  status: Int!
}

input OrderStatusCountOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
}

input OrderStatusCreateInput {
  id: String
  status: String
}

input OrderStatusCreateManyInput {
  id: String
  status: String
}

type OrderStatusGroupBy {
  _count: OrderStatusCountAggregate
  _max: OrderStatusMaxAggregate
  _min: OrderStatusMinAggregate
  id: String!
  status: String
}

type OrderStatusMaxAggregate {
  id: String
  status: String
}

input OrderStatusMaxOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
}

type OrderStatusMinAggregate {
  id: String
  status: String
}

input OrderStatusMinOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
}

input OrderStatusOrderByWithAggregationInput {
  _count: OrderStatusCountOrderByAggregateInput
  _max: OrderStatusMaxOrderByAggregateInput
  _min: OrderStatusMinOrderByAggregateInput
  id: SortOrder
  status: SortOrder
}

input OrderStatusOrderByWithRelationInput {
  id: SortOrder
  status: SortOrder
}

enum OrderStatusScalarFieldEnum {
  id
  status
}

input OrderStatusScalarWhereWithAggregatesInput {
  AND: [OrderStatusScalarWhereWithAggregatesInput!]
  NOT: [OrderStatusScalarWhereWithAggregatesInput!]
  OR: [OrderStatusScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  status: StringNullableWithAggregatesFilter
}

input OrderStatusUpdateInput {
  id: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
}

input OrderStatusUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
}

input OrderStatusWhereInput {
  AND: [OrderStatusWhereInput!]
  NOT: [OrderStatusWhereInput!]
  OR: [OrderStatusWhereInput!]
  id: StringFilter
  status: StringNullableFilter
}

input OrderStatusWhereUniqueInput {
  id: String
}

type PaymentType {
  id: String!
  value: String
}

type PaymentTypeCountAggregate {
  _all: Int!
  id: Int!
  value: Int!
}

input PaymentTypeCountOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
}

input PaymentTypeCreateInput {
  id: String
  value: String
}

input PaymentTypeCreateManyInput {
  id: String
  value: String
}

type PaymentTypeGroupBy {
  _count: PaymentTypeCountAggregate
  _max: PaymentTypeMaxAggregate
  _min: PaymentTypeMinAggregate
  id: String!
  value: String
}

type PaymentTypeMaxAggregate {
  id: String
  value: String
}

input PaymentTypeMaxOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
}

type PaymentTypeMinAggregate {
  id: String
  value: String
}

input PaymentTypeMinOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
}

input PaymentTypeOrderByWithAggregationInput {
  _count: PaymentTypeCountOrderByAggregateInput
  _max: PaymentTypeMaxOrderByAggregateInput
  _min: PaymentTypeMinOrderByAggregateInput
  id: SortOrder
  value: SortOrder
}

input PaymentTypeOrderByWithRelationInput {
  id: SortOrder
  value: SortOrder
}

enum PaymentTypeScalarFieldEnum {
  id
  value
}

input PaymentTypeScalarWhereWithAggregatesInput {
  AND: [PaymentTypeScalarWhereWithAggregatesInput!]
  NOT: [PaymentTypeScalarWhereWithAggregatesInput!]
  OR: [PaymentTypeScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  value: StringNullableWithAggregatesFilter
}

input PaymentTypeUpdateInput {
  id: StringFieldUpdateOperationsInput
  value: NullableStringFieldUpdateOperationsInput
}

input PaymentTypeUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  value: NullableStringFieldUpdateOperationsInput
}

input PaymentTypeWhereInput {
  AND: [PaymentTypeWhereInput!]
  NOT: [PaymentTypeWhereInput!]
  OR: [PaymentTypeWhereInput!]
  id: StringFilter
  value: StringNullableFilter
}

input PaymentTypeWhereUniqueInput {
  id: String
}

type Product {
  category_id: String!
  description: String
  id: String!
  name: String
  product_image: String
}

type ProductCategory {
  category_name: String
  id: String!
  parent_category_id: String!
}

type ProductCategoryCountAggregate {
  _all: Int!
  category_name: Int!
  id: Int!
  parent_category_id: Int!
}

input ProductCategoryCountOrderByAggregateInput {
  category_name: SortOrder
  id: SortOrder
  parent_category_id: SortOrder
}

input ProductCategoryCreateInput {
  category_name: String
  id: String
  parent_category_id: String!
}

input ProductCategoryCreateManyInput {
  category_name: String
  id: String
  parent_category_id: String!
}

type ProductCategoryGroupBy {
  _count: ProductCategoryCountAggregate
  _max: ProductCategoryMaxAggregate
  _min: ProductCategoryMinAggregate
  category_name: String
  id: String!
  parent_category_id: String!
}

type ProductCategoryMaxAggregate {
  category_name: String
  id: String
  parent_category_id: String
}

input ProductCategoryMaxOrderByAggregateInput {
  category_name: SortOrder
  id: SortOrder
  parent_category_id: SortOrder
}

type ProductCategoryMinAggregate {
  category_name: String
  id: String
  parent_category_id: String
}

input ProductCategoryMinOrderByAggregateInput {
  category_name: SortOrder
  id: SortOrder
  parent_category_id: SortOrder
}

input ProductCategoryOrderByWithAggregationInput {
  _count: ProductCategoryCountOrderByAggregateInput
  _max: ProductCategoryMaxOrderByAggregateInput
  _min: ProductCategoryMinOrderByAggregateInput
  category_name: SortOrder
  id: SortOrder
  parent_category_id: SortOrder
}

input ProductCategoryOrderByWithRelationInput {
  category_name: SortOrder
  id: SortOrder
  parent_category_id: SortOrder
}

enum ProductCategoryScalarFieldEnum {
  category_name
  id
  parent_category_id
}

input ProductCategoryScalarWhereWithAggregatesInput {
  AND: [ProductCategoryScalarWhereWithAggregatesInput!]
  NOT: [ProductCategoryScalarWhereWithAggregatesInput!]
  OR: [ProductCategoryScalarWhereWithAggregatesInput!]
  category_name: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  parent_category_id: StringWithAggregatesFilter
}

input ProductCategoryUpdateInput {
  category_name: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parent_category_id: StringFieldUpdateOperationsInput
}

input ProductCategoryUpdateManyMutationInput {
  category_name: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parent_category_id: StringFieldUpdateOperationsInput
}

input ProductCategoryWhereInput {
  AND: [ProductCategoryWhereInput!]
  NOT: [ProductCategoryWhereInput!]
  OR: [ProductCategoryWhereInput!]
  category_name: StringNullableFilter
  id: StringFilter
  parent_category_id: StringFilter
}

input ProductCategoryWhereUniqueInput {
  id: String
}

type ProductConfiguration {
  product_item_id: String!
  variation_option_id: String!
}

type ProductConfigurationCountAggregate {
  _all: Int!
  product_item_id: Int!
  variation_option_id: Int!
}

input ProductConfigurationCountOrderByAggregateInput {
  product_item_id: SortOrder
  variation_option_id: SortOrder
}

input ProductConfigurationCreateInput {
  product_item_id: String!
  variation_option_id: String!
}

input ProductConfigurationCreateManyInput {
  product_item_id: String!
  variation_option_id: String!
}

type ProductConfigurationGroupBy {
  _count: ProductConfigurationCountAggregate
  _max: ProductConfigurationMaxAggregate
  _min: ProductConfigurationMinAggregate
  product_item_id: String!
  variation_option_id: String!
}

type ProductConfigurationMaxAggregate {
  product_item_id: String
  variation_option_id: String
}

input ProductConfigurationMaxOrderByAggregateInput {
  product_item_id: SortOrder
  variation_option_id: SortOrder
}

type ProductConfigurationMinAggregate {
  product_item_id: String
  variation_option_id: String
}

input ProductConfigurationMinOrderByAggregateInput {
  product_item_id: SortOrder
  variation_option_id: SortOrder
}

input ProductConfigurationOrderByWithAggregationInput {
  _count: ProductConfigurationCountOrderByAggregateInput
  _max: ProductConfigurationMaxOrderByAggregateInput
  _min: ProductConfigurationMinOrderByAggregateInput
  product_item_id: SortOrder
  variation_option_id: SortOrder
}

input ProductConfigurationOrderByWithRelationInput {
  product_item_id: SortOrder
  variation_option_id: SortOrder
}

input ProductConfigurationProduct_item_idVariation_option_idCompoundUniqueInput {
  product_item_id: String!
  variation_option_id: String!
}

enum ProductConfigurationScalarFieldEnum {
  product_item_id
  variation_option_id
}

input ProductConfigurationScalarWhereWithAggregatesInput {
  AND: [ProductConfigurationScalarWhereWithAggregatesInput!]
  NOT: [ProductConfigurationScalarWhereWithAggregatesInput!]
  OR: [ProductConfigurationScalarWhereWithAggregatesInput!]
  product_item_id: StringWithAggregatesFilter
  variation_option_id: StringWithAggregatesFilter
}

input ProductConfigurationUpdateInput {
  product_item_id: StringFieldUpdateOperationsInput
  variation_option_id: StringFieldUpdateOperationsInput
}

input ProductConfigurationUpdateManyMutationInput {
  product_item_id: StringFieldUpdateOperationsInput
  variation_option_id: StringFieldUpdateOperationsInput
}

input ProductConfigurationWhereInput {
  AND: [ProductConfigurationWhereInput!]
  NOT: [ProductConfigurationWhereInput!]
  OR: [ProductConfigurationWhereInput!]
  product_item_id: StringFilter
  variation_option_id: StringFilter
}

input ProductConfigurationWhereUniqueInput {
  product_item_id_variation_option_id: ProductConfigurationProduct_item_idVariation_option_idCompoundUniqueInput
}

type ProductCountAggregate {
  _all: Int!
  category_id: Int!
  description: Int!
  id: Int!
  name: Int!
  product_image: Int!
}

input ProductCountOrderByAggregateInput {
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  product_image: SortOrder
}

input ProductCreateInput {
  category_id: String!
  description: String
  id: String
  name: String
  product_image: String
}

input ProductCreateManyInput {
  category_id: String!
  description: String
  id: String
  name: String
  product_image: String
}

type ProductGroupBy {
  _count: ProductCountAggregate
  _max: ProductMaxAggregate
  _min: ProductMinAggregate
  category_id: String!
  description: String
  id: String!
  name: String
  product_image: String
}

type ProductItem {
  id: String!
  price: Int
  product_id: String!
  product_image: String
  qty_in_stock: Int
  sku: String
}

type ProductItemAvgAggregate {
  price: Float
  qty_in_stock: Float
}

input ProductItemAvgOrderByAggregateInput {
  price: SortOrder
  qty_in_stock: SortOrder
}

type ProductItemCountAggregate {
  _all: Int!
  id: Int!
  price: Int!
  product_id: Int!
  product_image: Int!
  qty_in_stock: Int!
  sku: Int!
}

input ProductItemCountOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  sku: SortOrder
}

input ProductItemCreateInput {
  id: String
  price: Int
  product_id: String!
  product_image: String
  qty_in_stock: Int
  sku: String
}

input ProductItemCreateManyInput {
  id: String
  price: Int
  product_id: String!
  product_image: String
  qty_in_stock: Int
  sku: String
}

type ProductItemGroupBy {
  _avg: ProductItemAvgAggregate
  _count: ProductItemCountAggregate
  _max: ProductItemMaxAggregate
  _min: ProductItemMinAggregate
  _sum: ProductItemSumAggregate
  id: String!
  price: Int
  product_id: String!
  product_image: String
  qty_in_stock: Int
  sku: String
}

type ProductItemMaxAggregate {
  id: String
  price: Int
  product_id: String
  product_image: String
  qty_in_stock: Int
  sku: String
}

input ProductItemMaxOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  sku: SortOrder
}

type ProductItemMinAggregate {
  id: String
  price: Int
  product_id: String
  product_image: String
  qty_in_stock: Int
  sku: String
}

input ProductItemMinOrderByAggregateInput {
  id: SortOrder
  price: SortOrder
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  sku: SortOrder
}

input ProductItemOrderByWithAggregationInput {
  _avg: ProductItemAvgOrderByAggregateInput
  _count: ProductItemCountOrderByAggregateInput
  _max: ProductItemMaxOrderByAggregateInput
  _min: ProductItemMinOrderByAggregateInput
  _sum: ProductItemSumOrderByAggregateInput
  id: SortOrder
  price: SortOrder
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  sku: SortOrder
}

input ProductItemOrderByWithRelationInput {
  id: SortOrder
  price: SortOrder
  product_id: SortOrder
  product_image: SortOrder
  qty_in_stock: SortOrder
  sku: SortOrder
}

enum ProductItemScalarFieldEnum {
  id
  price
  product_id
  product_image
  qty_in_stock
  sku
}

input ProductItemScalarWhereWithAggregatesInput {
  AND: [ProductItemScalarWhereWithAggregatesInput!]
  NOT: [ProductItemScalarWhereWithAggregatesInput!]
  OR: [ProductItemScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  price: IntNullableWithAggregatesFilter
  product_id: StringWithAggregatesFilter
  product_image: StringNullableWithAggregatesFilter
  qty_in_stock: IntNullableWithAggregatesFilter
  sku: StringNullableWithAggregatesFilter
}

type ProductItemSumAggregate {
  price: Int
  qty_in_stock: Int
}

input ProductItemSumOrderByAggregateInput {
  price: SortOrder
  qty_in_stock: SortOrder
}

input ProductItemUpdateInput {
  id: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_id: StringFieldUpdateOperationsInput
  product_image: NullableStringFieldUpdateOperationsInput
  qty_in_stock: NullableIntFieldUpdateOperationsInput
  sku: NullableStringFieldUpdateOperationsInput
}

input ProductItemUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
  product_id: StringFieldUpdateOperationsInput
  product_image: NullableStringFieldUpdateOperationsInput
  qty_in_stock: NullableIntFieldUpdateOperationsInput
  sku: NullableStringFieldUpdateOperationsInput
}

input ProductItemWhereInput {
  AND: [ProductItemWhereInput!]
  NOT: [ProductItemWhereInput!]
  OR: [ProductItemWhereInput!]
  id: StringFilter
  price: IntNullableFilter
  product_id: StringFilter
  product_image: StringNullableFilter
  qty_in_stock: IntNullableFilter
  sku: StringNullableFilter
}

input ProductItemWhereUniqueInput {
  id: String
}

type ProductMaxAggregate {
  category_id: String
  description: String
  id: String
  name: String
  product_image: String
}

input ProductMaxOrderByAggregateInput {
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  product_image: SortOrder
}

type ProductMinAggregate {
  category_id: String
  description: String
  id: String
  name: String
  product_image: String
}

input ProductMinOrderByAggregateInput {
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  product_image: SortOrder
}

input ProductOrderByWithAggregationInput {
  _count: ProductCountOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  product_image: SortOrder
}

input ProductOrderByWithRelationInput {
  category_id: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  product_image: SortOrder
}

enum ProductScalarFieldEnum {
  category_id
  description
  id
  name
  product_image
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput!]
  NOT: [ProductScalarWhereWithAggregatesInput!]
  OR: [ProductScalarWhereWithAggregatesInput!]
  category_id: StringWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  product_image: StringNullableWithAggregatesFilter
}

input ProductUpdateInput {
  category_id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  product_image: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  category_id: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  product_image: NullableStringFieldUpdateOperationsInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  category_id: StringFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  product_image: StringNullableFilter
}

input ProductWhereUniqueInput {
  id: String
}

type Promotion {
  description: String
  discount_rate: Int
  end_date: String
  id: String!
  name: String
  start_date: String
}

type PromotionAvgAggregate {
  discount_rate: Float
}

input PromotionAvgOrderByAggregateInput {
  discount_rate: SortOrder
}

type PromotionCategory {
  category_id: String!
  promotion_id: String!
}

input PromotionCategoryCategory_idPromotion_idCompoundUniqueInput {
  category_id: String!
  promotion_id: String!
}

type PromotionCategoryCountAggregate {
  _all: Int!
  category_id: Int!
  promotion_id: Int!
}

input PromotionCategoryCountOrderByAggregateInput {
  category_id: SortOrder
  promotion_id: SortOrder
}

input PromotionCategoryCreateInput {
  category_id: String!
  promotion_id: String!
}

input PromotionCategoryCreateManyInput {
  category_id: String!
  promotion_id: String!
}

type PromotionCategoryGroupBy {
  _count: PromotionCategoryCountAggregate
  _max: PromotionCategoryMaxAggregate
  _min: PromotionCategoryMinAggregate
  category_id: String!
  promotion_id: String!
}

type PromotionCategoryMaxAggregate {
  category_id: String
  promotion_id: String
}

input PromotionCategoryMaxOrderByAggregateInput {
  category_id: SortOrder
  promotion_id: SortOrder
}

type PromotionCategoryMinAggregate {
  category_id: String
  promotion_id: String
}

input PromotionCategoryMinOrderByAggregateInput {
  category_id: SortOrder
  promotion_id: SortOrder
}

input PromotionCategoryOrderByWithAggregationInput {
  _count: PromotionCategoryCountOrderByAggregateInput
  _max: PromotionCategoryMaxOrderByAggregateInput
  _min: PromotionCategoryMinOrderByAggregateInput
  category_id: SortOrder
  promotion_id: SortOrder
}

input PromotionCategoryOrderByWithRelationInput {
  category_id: SortOrder
  promotion_id: SortOrder
}

enum PromotionCategoryScalarFieldEnum {
  category_id
  promotion_id
}

input PromotionCategoryScalarWhereWithAggregatesInput {
  AND: [PromotionCategoryScalarWhereWithAggregatesInput!]
  NOT: [PromotionCategoryScalarWhereWithAggregatesInput!]
  OR: [PromotionCategoryScalarWhereWithAggregatesInput!]
  category_id: StringWithAggregatesFilter
  promotion_id: StringWithAggregatesFilter
}

input PromotionCategoryUpdateInput {
  category_id: StringFieldUpdateOperationsInput
  promotion_id: StringFieldUpdateOperationsInput
}

input PromotionCategoryUpdateManyMutationInput {
  category_id: StringFieldUpdateOperationsInput
  promotion_id: StringFieldUpdateOperationsInput
}

input PromotionCategoryWhereInput {
  AND: [PromotionCategoryWhereInput!]
  NOT: [PromotionCategoryWhereInput!]
  OR: [PromotionCategoryWhereInput!]
  category_id: StringFilter
  promotion_id: StringFilter
}

input PromotionCategoryWhereUniqueInput {
  category_id_promotion_id: PromotionCategoryCategory_idPromotion_idCompoundUniqueInput
}

type PromotionCountAggregate {
  _all: Int!
  description: Int!
  discount_rate: Int!
  end_date: Int!
  id: Int!
  name: Int!
  start_date: Int!
}

input PromotionCountOrderByAggregateInput {
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  start_date: SortOrder
}

input PromotionCreateInput {
  description: String
  discount_rate: Int
  end_date: String
  id: String
  name: String
  start_date: String
}

input PromotionCreateManyInput {
  description: String
  discount_rate: Int
  end_date: String
  id: String
  name: String
  start_date: String
}

type PromotionGroupBy {
  _avg: PromotionAvgAggregate
  _count: PromotionCountAggregate
  _max: PromotionMaxAggregate
  _min: PromotionMinAggregate
  _sum: PromotionSumAggregate
  description: String
  discount_rate: Int
  end_date: String
  id: String!
  name: String
  start_date: String
}

type PromotionMaxAggregate {
  description: String
  discount_rate: Int
  end_date: String
  id: String
  name: String
  start_date: String
}

input PromotionMaxOrderByAggregateInput {
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  start_date: SortOrder
}

type PromotionMinAggregate {
  description: String
  discount_rate: Int
  end_date: String
  id: String
  name: String
  start_date: String
}

input PromotionMinOrderByAggregateInput {
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  start_date: SortOrder
}

input PromotionOrderByWithAggregationInput {
  _avg: PromotionAvgOrderByAggregateInput
  _count: PromotionCountOrderByAggregateInput
  _max: PromotionMaxOrderByAggregateInput
  _min: PromotionMinOrderByAggregateInput
  _sum: PromotionSumOrderByAggregateInput
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  start_date: SortOrder
}

input PromotionOrderByWithRelationInput {
  description: SortOrder
  discount_rate: SortOrder
  end_date: SortOrder
  id: SortOrder
  name: SortOrder
  start_date: SortOrder
}

enum PromotionScalarFieldEnum {
  description
  discount_rate
  end_date
  id
  name
  start_date
}

input PromotionScalarWhereWithAggregatesInput {
  AND: [PromotionScalarWhereWithAggregatesInput!]
  NOT: [PromotionScalarWhereWithAggregatesInput!]
  OR: [PromotionScalarWhereWithAggregatesInput!]
  description: StringNullableWithAggregatesFilter
  discount_rate: IntNullableWithAggregatesFilter
  end_date: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  start_date: StringNullableWithAggregatesFilter
}

type PromotionSumAggregate {
  discount_rate: Int
}

input PromotionSumOrderByAggregateInput {
  discount_rate: SortOrder
}

input PromotionUpdateInput {
  description: NullableStringFieldUpdateOperationsInput
  discount_rate: NullableIntFieldUpdateOperationsInput
  end_date: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  start_date: NullableStringFieldUpdateOperationsInput
}

input PromotionUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  discount_rate: NullableIntFieldUpdateOperationsInput
  end_date: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  start_date: NullableStringFieldUpdateOperationsInput
}

input PromotionWhereInput {
  AND: [PromotionWhereInput!]
  NOT: [PromotionWhereInput!]
  OR: [PromotionWhereInput!]
  description: StringNullableFilter
  discount_rate: IntNullableFilter
  end_date: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  start_date: StringNullableFilter
}

input PromotionWhereUniqueInput {
  id: String
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  aggregateAddress(cursor: AddressWhereUniqueInput, orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): AggregateAddress!
  aggregateCountry(cursor: CountryWhereUniqueInput, orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): AggregateCountry!
  aggregateOrderLine(cursor: OrderLineWhereUniqueInput, orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): AggregateOrderLine!
  aggregateOrderStatus(cursor: OrderStatusWhereUniqueInput, orderBy: [OrderStatusOrderByWithRelationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): AggregateOrderStatus!
  aggregatePaymentType(cursor: PaymentTypeWhereUniqueInput, orderBy: [PaymentTypeOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): AggregatePaymentType!
  aggregateProduct(cursor: ProductWhereUniqueInput, orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): AggregateProduct!
  aggregateProductCategory(cursor: ProductCategoryWhereUniqueInput, orderBy: [ProductCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: ProductCategoryWhereInput): AggregateProductCategory!
  aggregateProductConfiguration(cursor: ProductConfigurationWhereUniqueInput, orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): AggregateProductConfiguration!
  aggregateProductItem(cursor: ProductItemWhereUniqueInput, orderBy: [ProductItemOrderByWithRelationInput!], skip: Int, take: Int, where: ProductItemWhereInput): AggregateProductItem!
  aggregatePromotion(cursor: PromotionWhereUniqueInput, orderBy: [PromotionOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionWhereInput): AggregatePromotion!
  aggregatePromotionCategory(cursor: PromotionCategoryWhereUniqueInput, orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): AggregatePromotionCategory!
  aggregateShippingMethod(cursor: ShippingMethodWhereUniqueInput, orderBy: [ShippingMethodOrderByWithRelationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): AggregateShippingMethod!
  aggregateShopOrder(cursor: ShopOrderWhereUniqueInput, orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): AggregateShopOrder!
  aggregateShoppingCart(cursor: ShoppingCartWhereUniqueInput, orderBy: [ShoppingCartOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): AggregateShoppingCart!
  aggregateShoppingCartItem(cursor: ShoppingCartItemWhereUniqueInput, orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): AggregateShoppingCartItem!
  aggregateSiteUser(cursor: SiteUserWhereUniqueInput, orderBy: [SiteUserOrderByWithRelationInput!], skip: Int, take: Int, where: SiteUserWhereInput): AggregateSiteUser!
  aggregateUserAddress(cursor: UserAddressWhereUniqueInput, orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): AggregateUserAddress!
  aggregateUserPaymentMethod(cursor: UserPaymentMethodWhereUniqueInput, orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): AggregateUserPaymentMethod!
  aggregateUserReview(cursor: UserReviewWhereUniqueInput, orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): AggregateUserReview!
  aggregateVariation(cursor: VariationWhereUniqueInput, orderBy: [VariationOrderByWithRelationInput!], skip: Int, take: Int, where: VariationWhereInput): AggregateVariation!
  aggregateVariationOption(cursor: VariationOptionWhereUniqueInput, orderBy: [VariationOptionOrderByWithRelationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): AggregateVariationOption!
  allProductCategories: [ProductCategory]
  allProducts: [Product]
  countries(cursor: CountryWhereUniqueInput, distinct: [CountryScalarFieldEnum!], orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): [Country!]!
  country(where: CountryWhereUniqueInput!): Country
  findFirstAddress(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstAddressOrThrow(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum!], orderBy: [AddressOrderByWithRelationInput!], skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstCountry(cursor: CountryWhereUniqueInput, distinct: [CountryScalarFieldEnum!], orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): Country
  findFirstCountryOrThrow(cursor: CountryWhereUniqueInput, distinct: [CountryScalarFieldEnum!], orderBy: [CountryOrderByWithRelationInput!], skip: Int, take: Int, where: CountryWhereInput): Country
  findFirstOrderLine(cursor: OrderLineWhereUniqueInput, distinct: [OrderLineScalarFieldEnum!], orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): OrderLine
  findFirstOrderLineOrThrow(cursor: OrderLineWhereUniqueInput, distinct: [OrderLineScalarFieldEnum!], orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): OrderLine
  findFirstOrderStatus(cursor: OrderStatusWhereUniqueInput, distinct: [OrderStatusScalarFieldEnum!], orderBy: [OrderStatusOrderByWithRelationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): OrderStatus
  findFirstOrderStatusOrThrow(cursor: OrderStatusWhereUniqueInput, distinct: [OrderStatusScalarFieldEnum!], orderBy: [OrderStatusOrderByWithRelationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): OrderStatus
  findFirstPaymentType(cursor: PaymentTypeWhereUniqueInput, distinct: [PaymentTypeScalarFieldEnum!], orderBy: [PaymentTypeOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): PaymentType
  findFirstPaymentTypeOrThrow(cursor: PaymentTypeWhereUniqueInput, distinct: [PaymentTypeScalarFieldEnum!], orderBy: [PaymentTypeOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): PaymentType
  findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstProductCategory(cursor: ProductCategoryWhereUniqueInput, distinct: [ProductCategoryScalarFieldEnum!], orderBy: [ProductCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: ProductCategoryWhereInput): ProductCategory
  findFirstProductCategoryOrThrow(cursor: ProductCategoryWhereUniqueInput, distinct: [ProductCategoryScalarFieldEnum!], orderBy: [ProductCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: ProductCategoryWhereInput): ProductCategory
  findFirstProductConfiguration(cursor: ProductConfigurationWhereUniqueInput, distinct: [ProductConfigurationScalarFieldEnum!], orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): ProductConfiguration
  findFirstProductConfigurationOrThrow(cursor: ProductConfigurationWhereUniqueInput, distinct: [ProductConfigurationScalarFieldEnum!], orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): ProductConfiguration
  findFirstProductItem(cursor: ProductItemWhereUniqueInput, distinct: [ProductItemScalarFieldEnum!], orderBy: [ProductItemOrderByWithRelationInput!], skip: Int, take: Int, where: ProductItemWhereInput): ProductItem
  findFirstProductItemOrThrow(cursor: ProductItemWhereUniqueInput, distinct: [ProductItemScalarFieldEnum!], orderBy: [ProductItemOrderByWithRelationInput!], skip: Int, take: Int, where: ProductItemWhereInput): ProductItem
  findFirstProductOrThrow(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstPromotion(cursor: PromotionWhereUniqueInput, distinct: [PromotionScalarFieldEnum!], orderBy: [PromotionOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionWhereInput): Promotion
  findFirstPromotionCategory(cursor: PromotionCategoryWhereUniqueInput, distinct: [PromotionCategoryScalarFieldEnum!], orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): PromotionCategory
  findFirstPromotionCategoryOrThrow(cursor: PromotionCategoryWhereUniqueInput, distinct: [PromotionCategoryScalarFieldEnum!], orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): PromotionCategory
  findFirstPromotionOrThrow(cursor: PromotionWhereUniqueInput, distinct: [PromotionScalarFieldEnum!], orderBy: [PromotionOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionWhereInput): Promotion
  findFirstShippingMethod(cursor: ShippingMethodWhereUniqueInput, distinct: [ShippingMethodScalarFieldEnum!], orderBy: [ShippingMethodOrderByWithRelationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): ShippingMethod
  findFirstShippingMethodOrThrow(cursor: ShippingMethodWhereUniqueInput, distinct: [ShippingMethodScalarFieldEnum!], orderBy: [ShippingMethodOrderByWithRelationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): ShippingMethod
  findFirstShopOrder(cursor: ShopOrderWhereUniqueInput, distinct: [ShopOrderScalarFieldEnum!], orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): ShopOrder
  findFirstShopOrderOrThrow(cursor: ShopOrderWhereUniqueInput, distinct: [ShopOrderScalarFieldEnum!], orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): ShopOrder
  findFirstShoppingCart(cursor: ShoppingCartWhereUniqueInput, distinct: [ShoppingCartScalarFieldEnum!], orderBy: [ShoppingCartOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): ShoppingCart
  findFirstShoppingCartItem(cursor: ShoppingCartItemWhereUniqueInput, distinct: [ShoppingCartItemScalarFieldEnum!], orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): ShoppingCartItem
  findFirstShoppingCartItemOrThrow(cursor: ShoppingCartItemWhereUniqueInput, distinct: [ShoppingCartItemScalarFieldEnum!], orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): ShoppingCartItem
  findFirstShoppingCartOrThrow(cursor: ShoppingCartWhereUniqueInput, distinct: [ShoppingCartScalarFieldEnum!], orderBy: [ShoppingCartOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): ShoppingCart
  findFirstSiteUser(cursor: SiteUserWhereUniqueInput, distinct: [SiteUserScalarFieldEnum!], orderBy: [SiteUserOrderByWithRelationInput!], skip: Int, take: Int, where: SiteUserWhereInput): SiteUser
  findFirstSiteUserOrThrow(cursor: SiteUserWhereUniqueInput, distinct: [SiteUserScalarFieldEnum!], orderBy: [SiteUserOrderByWithRelationInput!], skip: Int, take: Int, where: SiteUserWhereInput): SiteUser
  findFirstUserAddress(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): UserAddress
  findFirstUserAddressOrThrow(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): UserAddress
  findFirstUserPaymentMethod(cursor: UserPaymentMethodWhereUniqueInput, distinct: [UserPaymentMethodScalarFieldEnum!], orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): UserPaymentMethod
  findFirstUserPaymentMethodOrThrow(cursor: UserPaymentMethodWhereUniqueInput, distinct: [UserPaymentMethodScalarFieldEnum!], orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): UserPaymentMethod
  findFirstUserReview(cursor: UserReviewWhereUniqueInput, distinct: [UserReviewScalarFieldEnum!], orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): UserReview
  findFirstUserReviewOrThrow(cursor: UserReviewWhereUniqueInput, distinct: [UserReviewScalarFieldEnum!], orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): UserReview
  findFirstVariation(cursor: VariationWhereUniqueInput, distinct: [VariationScalarFieldEnum!], orderBy: [VariationOrderByWithRelationInput!], skip: Int, take: Int, where: VariationWhereInput): Variation
  findFirstVariationOption(cursor: VariationOptionWhereUniqueInput, distinct: [VariationOptionScalarFieldEnum!], orderBy: [VariationOptionOrderByWithRelationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): VariationOption
  findFirstVariationOptionOrThrow(cursor: VariationOptionWhereUniqueInput, distinct: [VariationOptionScalarFieldEnum!], orderBy: [VariationOptionOrderByWithRelationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): VariationOption
  findFirstVariationOrThrow(cursor: VariationWhereUniqueInput, distinct: [VariationScalarFieldEnum!], orderBy: [VariationOrderByWithRelationInput!], skip: Int, take: Int, where: VariationWhereInput): Variation
  getAddress(where: AddressWhereUniqueInput!): Address
  getCountry(where: CountryWhereUniqueInput!): Country
  getOrderLine(where: OrderLineWhereUniqueInput!): OrderLine
  getOrderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  getPaymentType(where: PaymentTypeWhereUniqueInput!): PaymentType
  getProduct(where: ProductWhereUniqueInput!): Product
  getProductCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  getProductConfiguration(where: ProductConfigurationWhereUniqueInput!): ProductConfiguration
  getProductItem(where: ProductItemWhereUniqueInput!): ProductItem
  getPromotion(where: PromotionWhereUniqueInput!): Promotion
  getPromotionCategory(where: PromotionCategoryWhereUniqueInput!): PromotionCategory
  getShippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  getShopOrder(where: ShopOrderWhereUniqueInput!): ShopOrder
  getShoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  getShoppingCartItem(where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  getSiteUser(where: SiteUserWhereUniqueInput!): SiteUser
  getUserAddress(where: UserAddressWhereUniqueInput!): UserAddress
  getUserPaymentMethod(where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod
  getUserReview(where: UserReviewWhereUniqueInput!): UserReview
  getVariation(where: VariationWhereUniqueInput!): Variation
  getVariationOption(where: VariationOptionWhereUniqueInput!): VariationOption
  groupByAddress(by: [AddressScalarFieldEnum!]!, having: AddressScalarWhereWithAggregatesInput, orderBy: [AddressOrderByWithAggregationInput!], skip: Int, take: Int, where: AddressWhereInput): [AddressGroupBy!]!
  groupByCountry(by: [CountryScalarFieldEnum!]!, having: CountryScalarWhereWithAggregatesInput, orderBy: [CountryOrderByWithAggregationInput!], skip: Int, take: Int, where: CountryWhereInput): [CountryGroupBy!]!
  groupByOrderLine(by: [OrderLineScalarFieldEnum!]!, having: OrderLineScalarWhereWithAggregatesInput, orderBy: [OrderLineOrderByWithAggregationInput!], skip: Int, take: Int, where: OrderLineWhereInput): [OrderLineGroupBy!]!
  groupByOrderStatus(by: [OrderStatusScalarFieldEnum!]!, having: OrderStatusScalarWhereWithAggregatesInput, orderBy: [OrderStatusOrderByWithAggregationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): [OrderStatusGroupBy!]!
  groupByPaymentType(by: [PaymentTypeScalarFieldEnum!]!, having: PaymentTypeScalarWhereWithAggregatesInput, orderBy: [PaymentTypeOrderByWithAggregationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): [PaymentTypeGroupBy!]!
  groupByProduct(by: [ProductScalarFieldEnum!]!, having: ProductScalarWhereWithAggregatesInput, orderBy: [ProductOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductWhereInput): [ProductGroupBy!]!
  groupByProductCategory(by: [ProductCategoryScalarFieldEnum!]!, having: ProductCategoryScalarWhereWithAggregatesInput, orderBy: [ProductCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductCategoryWhereInput): [ProductCategoryGroupBy!]!
  groupByProductConfiguration(by: [ProductConfigurationScalarFieldEnum!]!, having: ProductConfigurationScalarWhereWithAggregatesInput, orderBy: [ProductConfigurationOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): [ProductConfigurationGroupBy!]!
  groupByProductItem(by: [ProductItemScalarFieldEnum!]!, having: ProductItemScalarWhereWithAggregatesInput, orderBy: [ProductItemOrderByWithAggregationInput!], skip: Int, take: Int, where: ProductItemWhereInput): [ProductItemGroupBy!]!
  groupByPromotion(by: [PromotionScalarFieldEnum!]!, having: PromotionScalarWhereWithAggregatesInput, orderBy: [PromotionOrderByWithAggregationInput!], skip: Int, take: Int, where: PromotionWhereInput): [PromotionGroupBy!]!
  groupByPromotionCategory(by: [PromotionCategoryScalarFieldEnum!]!, having: PromotionCategoryScalarWhereWithAggregatesInput, orderBy: [PromotionCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): [PromotionCategoryGroupBy!]!
  groupByShippingMethod(by: [ShippingMethodScalarFieldEnum!]!, having: ShippingMethodScalarWhereWithAggregatesInput, orderBy: [ShippingMethodOrderByWithAggregationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): [ShippingMethodGroupBy!]!
  groupByShopOrder(by: [ShopOrderScalarFieldEnum!]!, having: ShopOrderScalarWhereWithAggregatesInput, orderBy: [ShopOrderOrderByWithAggregationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): [ShopOrderGroupBy!]!
  groupByShoppingCart(by: [ShoppingCartScalarFieldEnum!]!, having: ShoppingCartScalarWhereWithAggregatesInput, orderBy: [ShoppingCartOrderByWithAggregationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): [ShoppingCartGroupBy!]!
  groupByShoppingCartItem(by: [ShoppingCartItemScalarFieldEnum!]!, having: ShoppingCartItemScalarWhereWithAggregatesInput, orderBy: [ShoppingCartItemOrderByWithAggregationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): [ShoppingCartItemGroupBy!]!
  groupBySiteUser(by: [SiteUserScalarFieldEnum!]!, having: SiteUserScalarWhereWithAggregatesInput, orderBy: [SiteUserOrderByWithAggregationInput!], skip: Int, take: Int, where: SiteUserWhereInput): [SiteUserGroupBy!]!
  groupByUserAddress(by: [UserAddressScalarFieldEnum!]!, having: UserAddressScalarWhereWithAggregatesInput, orderBy: [UserAddressOrderByWithAggregationInput!], skip: Int, take: Int, where: UserAddressWhereInput): [UserAddressGroupBy!]!
  groupByUserPaymentMethod(by: [UserPaymentMethodScalarFieldEnum!]!, having: UserPaymentMethodScalarWhereWithAggregatesInput, orderBy: [UserPaymentMethodOrderByWithAggregationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): [UserPaymentMethodGroupBy!]!
  groupByUserReview(by: [UserReviewScalarFieldEnum!]!, having: UserReviewScalarWhereWithAggregatesInput, orderBy: [UserReviewOrderByWithAggregationInput!], skip: Int, take: Int, where: UserReviewWhereInput): [UserReviewGroupBy!]!
  groupByVariation(by: [VariationScalarFieldEnum!]!, having: VariationScalarWhereWithAggregatesInput, orderBy: [VariationOrderByWithAggregationInput!], skip: Int, take: Int, where: VariationWhereInput): [VariationGroupBy!]!
  groupByVariationOption(by: [VariationOptionScalarFieldEnum!]!, having: VariationOptionScalarWhereWithAggregatesInput, orderBy: [VariationOptionOrderByWithAggregationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): [VariationOptionGroupBy!]!
  orderLine(where: OrderLineWhereUniqueInput!): OrderLine
  orderLines(cursor: OrderLineWhereUniqueInput, distinct: [OrderLineScalarFieldEnum!], orderBy: [OrderLineOrderByWithRelationInput!], skip: Int, take: Int, where: OrderLineWhereInput): [OrderLine!]!
  orderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  orderStatuses(cursor: OrderStatusWhereUniqueInput, distinct: [OrderStatusScalarFieldEnum!], orderBy: [OrderStatusOrderByWithRelationInput!], skip: Int, take: Int, where: OrderStatusWhereInput): [OrderStatus!]!
  paymentType(where: PaymentTypeWhereUniqueInput!): PaymentType
  paymentTypes(cursor: PaymentTypeWhereUniqueInput, distinct: [PaymentTypeScalarFieldEnum!], orderBy: [PaymentTypeOrderByWithRelationInput!], skip: Int, take: Int, where: PaymentTypeWhereInput): [PaymentType!]!
  product(where: ProductWhereUniqueInput!): Product
  productById(id: String): Product
  productCategories(cursor: ProductCategoryWhereUniqueInput, distinct: [ProductCategoryScalarFieldEnum!], orderBy: [ProductCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: ProductCategoryWhereInput): [ProductCategory!]!
  productCategory(where: ProductCategoryWhereUniqueInput!): ProductCategory
  productCategoryById(id: String): ProductCategory
  productConfiguration(where: ProductConfigurationWhereUniqueInput!): ProductConfiguration
  productConfigurations(cursor: ProductConfigurationWhereUniqueInput, distinct: [ProductConfigurationScalarFieldEnum!], orderBy: [ProductConfigurationOrderByWithRelationInput!], skip: Int, take: Int, where: ProductConfigurationWhereInput): [ProductConfiguration!]!
  productItem(where: ProductItemWhereUniqueInput!): ProductItem
  productItems(cursor: ProductItemWhereUniqueInput, distinct: [ProductItemScalarFieldEnum!], orderBy: [ProductItemOrderByWithRelationInput!], skip: Int, take: Int, where: ProductItemWhereInput): [ProductItem!]!
  products(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum!], orderBy: [ProductOrderByWithRelationInput!], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  promotion(where: PromotionWhereUniqueInput!): Promotion
  promotionCategories(cursor: PromotionCategoryWhereUniqueInput, distinct: [PromotionCategoryScalarFieldEnum!], orderBy: [PromotionCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionCategoryWhereInput): [PromotionCategory!]!
  promotionCategory(where: PromotionCategoryWhereUniqueInput!): PromotionCategory
  promotions(cursor: PromotionWhereUniqueInput, distinct: [PromotionScalarFieldEnum!], orderBy: [PromotionOrderByWithRelationInput!], skip: Int, take: Int, where: PromotionWhereInput): [Promotion!]!
  shippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  shippingMethods(cursor: ShippingMethodWhereUniqueInput, distinct: [ShippingMethodScalarFieldEnum!], orderBy: [ShippingMethodOrderByWithRelationInput!], skip: Int, take: Int, where: ShippingMethodWhereInput): [ShippingMethod!]!
  shopOrder(where: ShopOrderWhereUniqueInput!): ShopOrder
  shopOrders(cursor: ShopOrderWhereUniqueInput, distinct: [ShopOrderScalarFieldEnum!], orderBy: [ShopOrderOrderByWithRelationInput!], skip: Int, take: Int, where: ShopOrderWhereInput): [ShopOrder!]!
  shoppingCart(where: ShoppingCartWhereUniqueInput!): ShoppingCart
  shoppingCartItem(where: ShoppingCartItemWhereUniqueInput!): ShoppingCartItem
  shoppingCartItems(cursor: ShoppingCartItemWhereUniqueInput, distinct: [ShoppingCartItemScalarFieldEnum!], orderBy: [ShoppingCartItemOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartItemWhereInput): [ShoppingCartItem!]!
  shoppingCarts(cursor: ShoppingCartWhereUniqueInput, distinct: [ShoppingCartScalarFieldEnum!], orderBy: [ShoppingCartOrderByWithRelationInput!], skip: Int, take: Int, where: ShoppingCartWhereInput): [ShoppingCart!]!
  siteUser(id: String): SiteUser
  siteUsers: [SiteUser]
  userAddress(where: UserAddressWhereUniqueInput!): UserAddress
  userAddresses(cursor: UserAddressWhereUniqueInput, distinct: [UserAddressScalarFieldEnum!], orderBy: [UserAddressOrderByWithRelationInput!], skip: Int, take: Int, where: UserAddressWhereInput): [UserAddress!]!
  userPaymentMethod(where: UserPaymentMethodWhereUniqueInput!): UserPaymentMethod
  userPaymentMethods(cursor: UserPaymentMethodWhereUniqueInput, distinct: [UserPaymentMethodScalarFieldEnum!], orderBy: [UserPaymentMethodOrderByWithRelationInput!], skip: Int, take: Int, where: UserPaymentMethodWhereInput): [UserPaymentMethod!]!
  userReview(where: UserReviewWhereUniqueInput!): UserReview
  userReviews(cursor: UserReviewWhereUniqueInput, distinct: [UserReviewScalarFieldEnum!], orderBy: [UserReviewOrderByWithRelationInput!], skip: Int, take: Int, where: UserReviewWhereInput): [UserReview!]!
  variation(where: VariationWhereUniqueInput!): Variation
  variationOption(where: VariationOptionWhereUniqueInput!): VariationOption
  variationOptions(cursor: VariationOptionWhereUniqueInput, distinct: [VariationOptionScalarFieldEnum!], orderBy: [VariationOptionOrderByWithRelationInput!], skip: Int, take: Int, where: VariationOptionWhereInput): [VariationOption!]!
  variations(cursor: VariationWhereUniqueInput, distinct: [VariationScalarFieldEnum!], orderBy: [VariationOrderByWithRelationInput!], skip: Int, take: Int, where: VariationWhereInput): [Variation!]!
}

type ShippingMethod {
  id: String!
  name: String
  price: Int
}

type ShippingMethodAvgAggregate {
  price: Float
}

input ShippingMethodAvgOrderByAggregateInput {
  price: SortOrder
}

type ShippingMethodCountAggregate {
  _all: Int!
  id: Int!
  name: Int!
  price: Int!
}

input ShippingMethodCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

input ShippingMethodCreateInput {
  id: String
  name: String
  price: Int
}

input ShippingMethodCreateManyInput {
  id: String
  name: String
  price: Int
}

type ShippingMethodGroupBy {
  _avg: ShippingMethodAvgAggregate
  _count: ShippingMethodCountAggregate
  _max: ShippingMethodMaxAggregate
  _min: ShippingMethodMinAggregate
  _sum: ShippingMethodSumAggregate
  id: String!
  name: String
  price: Int
}

type ShippingMethodMaxAggregate {
  id: String
  name: String
  price: Int
}

input ShippingMethodMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

type ShippingMethodMinAggregate {
  id: String
  name: String
  price: Int
}

input ShippingMethodMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

input ShippingMethodOrderByWithAggregationInput {
  _avg: ShippingMethodAvgOrderByAggregateInput
  _count: ShippingMethodCountOrderByAggregateInput
  _max: ShippingMethodMaxOrderByAggregateInput
  _min: ShippingMethodMinOrderByAggregateInput
  _sum: ShippingMethodSumOrderByAggregateInput
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

input ShippingMethodOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  price: SortOrder
}

enum ShippingMethodScalarFieldEnum {
  id
  name
  price
}

input ShippingMethodScalarWhereWithAggregatesInput {
  AND: [ShippingMethodScalarWhereWithAggregatesInput!]
  NOT: [ShippingMethodScalarWhereWithAggregatesInput!]
  OR: [ShippingMethodScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  price: IntNullableWithAggregatesFilter
}

type ShippingMethodSumAggregate {
  price: Int
}

input ShippingMethodSumOrderByAggregateInput {
  price: SortOrder
}

input ShippingMethodUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
}

input ShippingMethodUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  price: NullableIntFieldUpdateOperationsInput
}

input ShippingMethodWhereInput {
  AND: [ShippingMethodWhereInput!]
  NOT: [ShippingMethodWhereInput!]
  OR: [ShippingMethodWhereInput!]
  id: StringFilter
  name: StringNullableFilter
  price: IntNullableFilter
}

input ShippingMethodWhereUniqueInput {
  id: String
}

type ShopOrder {
  id: String!
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String!
  shipping_address: Int
  shipping_method: Int
  user_id: String!
}

type ShopOrderAvgAggregate {
  order_status: Float
  order_total: Float
  shipping_address: Float
  shipping_method: Float
}

input ShopOrderAvgOrderByAggregateInput {
  order_status: SortOrder
  order_total: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
}

type ShopOrderCountAggregate {
  _all: Int!
  id: Int!
  order_date: Int!
  order_status: Int!
  order_total: Int!
  payment_method_id: Int!
  shipping_address: Int!
  shipping_method: Int!
  user_id: Int!
}

input ShopOrderCountOrderByAggregateInput {
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user_id: SortOrder
}

input ShopOrderCreateInput {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String!
  shipping_address: Int
  shipping_method: Int
  user_id: String!
}

input ShopOrderCreateManyInput {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String!
  shipping_address: Int
  shipping_method: Int
  user_id: String!
}

type ShopOrderGroupBy {
  _avg: ShopOrderAvgAggregate
  _count: ShopOrderCountAggregate
  _max: ShopOrderMaxAggregate
  _min: ShopOrderMinAggregate
  _sum: ShopOrderSumAggregate
  id: String!
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String!
  shipping_address: Int
  shipping_method: Int
  user_id: String!
}

type ShopOrderMaxAggregate {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String
  shipping_address: Int
  shipping_method: Int
  user_id: String
}

input ShopOrderMaxOrderByAggregateInput {
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user_id: SortOrder
}

type ShopOrderMinAggregate {
  id: String
  order_date: String
  order_status: Int
  order_total: Int
  payment_method_id: String
  shipping_address: Int
  shipping_method: Int
  user_id: String
}

input ShopOrderMinOrderByAggregateInput {
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user_id: SortOrder
}

input ShopOrderOrderByWithAggregationInput {
  _avg: ShopOrderAvgOrderByAggregateInput
  _count: ShopOrderCountOrderByAggregateInput
  _max: ShopOrderMaxOrderByAggregateInput
  _min: ShopOrderMinOrderByAggregateInput
  _sum: ShopOrderSumOrderByAggregateInput
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user_id: SortOrder
}

input ShopOrderOrderByWithRelationInput {
  id: SortOrder
  order_date: SortOrder
  order_status: SortOrder
  order_total: SortOrder
  payment_method_id: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
  user_id: SortOrder
}

enum ShopOrderScalarFieldEnum {
  id
  order_date
  order_status
  order_total
  payment_method_id
  shipping_address
  shipping_method
  user_id
}

input ShopOrderScalarWhereWithAggregatesInput {
  AND: [ShopOrderScalarWhereWithAggregatesInput!]
  NOT: [ShopOrderScalarWhereWithAggregatesInput!]
  OR: [ShopOrderScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  order_date: StringNullableWithAggregatesFilter
  order_status: IntNullableWithAggregatesFilter
  order_total: IntNullableWithAggregatesFilter
  payment_method_id: StringWithAggregatesFilter
  shipping_address: IntNullableWithAggregatesFilter
  shipping_method: IntNullableWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

type ShopOrderSumAggregate {
  order_status: Int
  order_total: Int
  shipping_address: Int
  shipping_method: Int
}

input ShopOrderSumOrderByAggregateInput {
  order_status: SortOrder
  order_total: SortOrder
  shipping_address: SortOrder
  shipping_method: SortOrder
}

input ShopOrderUpdateInput {
  id: StringFieldUpdateOperationsInput
  order_date: NullableStringFieldUpdateOperationsInput
  order_status: NullableIntFieldUpdateOperationsInput
  order_total: NullableIntFieldUpdateOperationsInput
  payment_method_id: StringFieldUpdateOperationsInput
  shipping_address: NullableIntFieldUpdateOperationsInput
  shipping_method: NullableIntFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input ShopOrderUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  order_date: NullableStringFieldUpdateOperationsInput
  order_status: NullableIntFieldUpdateOperationsInput
  order_total: NullableIntFieldUpdateOperationsInput
  payment_method_id: StringFieldUpdateOperationsInput
  shipping_address: NullableIntFieldUpdateOperationsInput
  shipping_method: NullableIntFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input ShopOrderWhereInput {
  AND: [ShopOrderWhereInput!]
  NOT: [ShopOrderWhereInput!]
  OR: [ShopOrderWhereInput!]
  id: StringFilter
  order_date: StringNullableFilter
  order_status: IntNullableFilter
  order_total: IntNullableFilter
  payment_method_id: StringFilter
  shipping_address: IntNullableFilter
  shipping_method: IntNullableFilter
  user_id: StringFilter
}

input ShopOrderWhereUniqueInput {
  id: String
}

type ShoppingCart {
  id: String!
  user_id: String!
}

type ShoppingCartCountAggregate {
  _all: Int!
  id: Int!
  user_id: Int!
}

input ShoppingCartCountOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
}

input ShoppingCartCreateInput {
  id: String
  user_id: String!
}

input ShoppingCartCreateManyInput {
  id: String
  user_id: String!
}

type ShoppingCartGroupBy {
  _count: ShoppingCartCountAggregate
  _max: ShoppingCartMaxAggregate
  _min: ShoppingCartMinAggregate
  id: String!
  user_id: String!
}

type ShoppingCartItem {
  cart_id: String!
  id: String!
  product_item_id: String!
  qty: Int
}

type ShoppingCartItemAvgAggregate {
  qty: Float
}

input ShoppingCartItemAvgOrderByAggregateInput {
  qty: SortOrder
}

type ShoppingCartItemCountAggregate {
  _all: Int!
  cart_id: Int!
  id: Int!
  product_item_id: Int!
  qty: Int!
}

input ShoppingCartItemCountOrderByAggregateInput {
  cart_id: SortOrder
  id: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input ShoppingCartItemCreateInput {
  cart_id: String!
  id: String
  product_item_id: String!
  qty: Int
}

input ShoppingCartItemCreateManyInput {
  cart_id: String!
  id: String
  product_item_id: String!
  qty: Int
}

type ShoppingCartItemGroupBy {
  _avg: ShoppingCartItemAvgAggregate
  _count: ShoppingCartItemCountAggregate
  _max: ShoppingCartItemMaxAggregate
  _min: ShoppingCartItemMinAggregate
  _sum: ShoppingCartItemSumAggregate
  cart_id: String!
  id: String!
  product_item_id: String!
  qty: Int
}

type ShoppingCartItemMaxAggregate {
  cart_id: String
  id: String
  product_item_id: String
  qty: Int
}

input ShoppingCartItemMaxOrderByAggregateInput {
  cart_id: SortOrder
  id: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

type ShoppingCartItemMinAggregate {
  cart_id: String
  id: String
  product_item_id: String
  qty: Int
}

input ShoppingCartItemMinOrderByAggregateInput {
  cart_id: SortOrder
  id: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input ShoppingCartItemOrderByWithAggregationInput {
  _avg: ShoppingCartItemAvgOrderByAggregateInput
  _count: ShoppingCartItemCountOrderByAggregateInput
  _max: ShoppingCartItemMaxOrderByAggregateInput
  _min: ShoppingCartItemMinOrderByAggregateInput
  _sum: ShoppingCartItemSumOrderByAggregateInput
  cart_id: SortOrder
  id: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

input ShoppingCartItemOrderByWithRelationInput {
  cart_id: SortOrder
  id: SortOrder
  product_item_id: SortOrder
  qty: SortOrder
}

enum ShoppingCartItemScalarFieldEnum {
  cart_id
  id
  product_item_id
  qty
}

input ShoppingCartItemScalarWhereWithAggregatesInput {
  AND: [ShoppingCartItemScalarWhereWithAggregatesInput!]
  NOT: [ShoppingCartItemScalarWhereWithAggregatesInput!]
  OR: [ShoppingCartItemScalarWhereWithAggregatesInput!]
  cart_id: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  product_item_id: StringWithAggregatesFilter
  qty: IntNullableWithAggregatesFilter
}

type ShoppingCartItemSumAggregate {
  qty: Int
}

input ShoppingCartItemSumOrderByAggregateInput {
  qty: SortOrder
}

input ShoppingCartItemUpdateInput {
  cart_id: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product_item_id: StringFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
}

input ShoppingCartItemUpdateManyMutationInput {
  cart_id: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product_item_id: StringFieldUpdateOperationsInput
  qty: NullableIntFieldUpdateOperationsInput
}

input ShoppingCartItemWhereInput {
  AND: [ShoppingCartItemWhereInput!]
  NOT: [ShoppingCartItemWhereInput!]
  OR: [ShoppingCartItemWhereInput!]
  cart_id: StringFilter
  id: StringFilter
  product_item_id: StringFilter
  qty: IntNullableFilter
}

input ShoppingCartItemWhereUniqueInput {
  id: String
}

type ShoppingCartMaxAggregate {
  id: String
  user_id: String
}

input ShoppingCartMaxOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
}

type ShoppingCartMinAggregate {
  id: String
  user_id: String
}

input ShoppingCartMinOrderByAggregateInput {
  id: SortOrder
  user_id: SortOrder
}

input ShoppingCartOrderByWithAggregationInput {
  _count: ShoppingCartCountOrderByAggregateInput
  _max: ShoppingCartMaxOrderByAggregateInput
  _min: ShoppingCartMinOrderByAggregateInput
  id: SortOrder
  user_id: SortOrder
}

input ShoppingCartOrderByWithRelationInput {
  id: SortOrder
  user_id: SortOrder
}

enum ShoppingCartScalarFieldEnum {
  id
  user_id
}

input ShoppingCartScalarWhereWithAggregatesInput {
  AND: [ShoppingCartScalarWhereWithAggregatesInput!]
  NOT: [ShoppingCartScalarWhereWithAggregatesInput!]
  OR: [ShoppingCartScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

input ShoppingCartUpdateInput {
  id: StringFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input ShoppingCartUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input ShoppingCartWhereInput {
  AND: [ShoppingCartWhereInput!]
  NOT: [ShoppingCartWhereInput!]
  OR: [ShoppingCartWhereInput!]
  id: StringFilter
  user_id: StringFilter
}

input ShoppingCartWhereUniqueInput {
  id: String
}

type SiteUser {
  email_address: String
  id: String!
  password: String
  phone_number: String
}

type SiteUserCountAggregate {
  _all: Int!
  email_address: Int!
  id: Int!
  password: Int!
  phone_number: Int!
}

input SiteUserCountOrderByAggregateInput {
  email_address: SortOrder
  id: SortOrder
  password: SortOrder
  phone_number: SortOrder
}

input SiteUserCreateInput {
  email_address: String
  id: String
  password: String
  phone_number: String
}

input SiteUserCreateManyInput {
  email_address: String
  id: String
  password: String
  phone_number: String
}

type SiteUserGroupBy {
  _count: SiteUserCountAggregate
  _max: SiteUserMaxAggregate
  _min: SiteUserMinAggregate
  email_address: String
  id: String!
  password: String
  phone_number: String
}

type SiteUserMaxAggregate {
  email_address: String
  id: String
  password: String
  phone_number: String
}

input SiteUserMaxOrderByAggregateInput {
  email_address: SortOrder
  id: SortOrder
  password: SortOrder
  phone_number: SortOrder
}

type SiteUserMinAggregate {
  email_address: String
  id: String
  password: String
  phone_number: String
}

input SiteUserMinOrderByAggregateInput {
  email_address: SortOrder
  id: SortOrder
  password: SortOrder
  phone_number: SortOrder
}

input SiteUserOrderByWithAggregationInput {
  _count: SiteUserCountOrderByAggregateInput
  _max: SiteUserMaxOrderByAggregateInput
  _min: SiteUserMinOrderByAggregateInput
  email_address: SortOrder
  id: SortOrder
  password: SortOrder
  phone_number: SortOrder
}

input SiteUserOrderByWithRelationInput {
  email_address: SortOrder
  id: SortOrder
  password: SortOrder
  phone_number: SortOrder
}

enum SiteUserScalarFieldEnum {
  email_address
  id
  password
  phone_number
}

input SiteUserScalarWhereWithAggregatesInput {
  AND: [SiteUserScalarWhereWithAggregatesInput!]
  NOT: [SiteUserScalarWhereWithAggregatesInput!]
  OR: [SiteUserScalarWhereWithAggregatesInput!]
  email_address: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  password: StringNullableWithAggregatesFilter
  phone_number: StringNullableWithAggregatesFilter
}

input SiteUserUpdateInput {
  email_address: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phone_number: NullableStringFieldUpdateOperationsInput
}

input SiteUserUpdateManyMutationInput {
  email_address: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phone_number: NullableStringFieldUpdateOperationsInput
}

input SiteUserWhereInput {
  AND: [SiteUserWhereInput!]
  NOT: [SiteUserWhereInput!]
  OR: [SiteUserWhereInput!]
  email_address: StringNullableFilter
  id: StringFilter
  password: StringNullableFilter
  phone_number: StringNullableFilter
}

input SiteUserWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type UserAddress {
  address_id: String!
  is_default: Int
  user_id: String!
}

type UserAddressAvgAggregate {
  is_default: Float
}

input UserAddressAvgOrderByAggregateInput {
  is_default: SortOrder
}

type UserAddressCountAggregate {
  _all: Int!
  address_id: Int!
  is_default: Int!
  user_id: Int!
}

input UserAddressCountOrderByAggregateInput {
  address_id: SortOrder
  is_default: SortOrder
  user_id: SortOrder
}

input UserAddressCreateInput {
  address_id: String!
  is_default: Int
  user_id: String!
}

input UserAddressCreateManyInput {
  address_id: String!
  is_default: Int
  user_id: String!
}

type UserAddressGroupBy {
  _avg: UserAddressAvgAggregate
  _count: UserAddressCountAggregate
  _max: UserAddressMaxAggregate
  _min: UserAddressMinAggregate
  _sum: UserAddressSumAggregate
  address_id: String!
  is_default: Int
  user_id: String!
}

type UserAddressMaxAggregate {
  address_id: String
  is_default: Int
  user_id: String
}

input UserAddressMaxOrderByAggregateInput {
  address_id: SortOrder
  is_default: SortOrder
  user_id: SortOrder
}

type UserAddressMinAggregate {
  address_id: String
  is_default: Int
  user_id: String
}

input UserAddressMinOrderByAggregateInput {
  address_id: SortOrder
  is_default: SortOrder
  user_id: SortOrder
}

input UserAddressOrderByWithAggregationInput {
  _avg: UserAddressAvgOrderByAggregateInput
  _count: UserAddressCountOrderByAggregateInput
  _max: UserAddressMaxOrderByAggregateInput
  _min: UserAddressMinOrderByAggregateInput
  _sum: UserAddressSumOrderByAggregateInput
  address_id: SortOrder
  is_default: SortOrder
  user_id: SortOrder
}

input UserAddressOrderByWithRelationInput {
  address_id: SortOrder
  is_default: SortOrder
  user_id: SortOrder
}

enum UserAddressScalarFieldEnum {
  address_id
  is_default
  user_id
}

input UserAddressScalarWhereWithAggregatesInput {
  AND: [UserAddressScalarWhereWithAggregatesInput!]
  NOT: [UserAddressScalarWhereWithAggregatesInput!]
  OR: [UserAddressScalarWhereWithAggregatesInput!]
  address_id: StringWithAggregatesFilter
  is_default: IntNullableWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

type UserAddressSumAggregate {
  is_default: Int
}

input UserAddressSumOrderByAggregateInput {
  is_default: SortOrder
}

input UserAddressUpdateInput {
  address_id: StringFieldUpdateOperationsInput
  is_default: NullableIntFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input UserAddressUpdateManyMutationInput {
  address_id: StringFieldUpdateOperationsInput
  is_default: NullableIntFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input UserAddressUser_idAddress_idCompoundUniqueInput {
  address_id: String!
  user_id: String!
}

input UserAddressWhereInput {
  AND: [UserAddressWhereInput!]
  NOT: [UserAddressWhereInput!]
  OR: [UserAddressWhereInput!]
  address_id: StringFilter
  is_default: IntNullableFilter
  user_id: StringFilter
}

input UserAddressWhereUniqueInput {
  user_id_address_id: UserAddressUser_idAddress_idCompoundUniqueInput
}

type UserPaymentMethod {
  account_number: String
  id: String!
  is_default: Int
  payment_type_id: String!
  provider: String
  user_id: String!
}

type UserPaymentMethodAvgAggregate {
  is_default: Float
}

input UserPaymentMethodAvgOrderByAggregateInput {
  is_default: SortOrder
}

type UserPaymentMethodCountAggregate {
  _all: Int!
  account_number: Int!
  id: Int!
  is_default: Int!
  payment_type_id: Int!
  provider: Int!
  user_id: Int!
}

input UserPaymentMethodCountOrderByAggregateInput {
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  payment_type_id: SortOrder
  provider: SortOrder
  user_id: SortOrder
}

input UserPaymentMethodCreateInput {
  account_number: String
  id: String
  is_default: Int
  payment_type_id: String!
  provider: String
  user_id: String!
}

input UserPaymentMethodCreateManyInput {
  account_number: String
  id: String
  is_default: Int
  payment_type_id: String!
  provider: String
  user_id: String!
}

type UserPaymentMethodGroupBy {
  _avg: UserPaymentMethodAvgAggregate
  _count: UserPaymentMethodCountAggregate
  _max: UserPaymentMethodMaxAggregate
  _min: UserPaymentMethodMinAggregate
  _sum: UserPaymentMethodSumAggregate
  account_number: String
  id: String!
  is_default: Int
  payment_type_id: String!
  provider: String
  user_id: String!
}

type UserPaymentMethodMaxAggregate {
  account_number: String
  id: String
  is_default: Int
  payment_type_id: String
  provider: String
  user_id: String
}

input UserPaymentMethodMaxOrderByAggregateInput {
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  payment_type_id: SortOrder
  provider: SortOrder
  user_id: SortOrder
}

type UserPaymentMethodMinAggregate {
  account_number: String
  id: String
  is_default: Int
  payment_type_id: String
  provider: String
  user_id: String
}

input UserPaymentMethodMinOrderByAggregateInput {
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  payment_type_id: SortOrder
  provider: SortOrder
  user_id: SortOrder
}

input UserPaymentMethodOrderByWithAggregationInput {
  _avg: UserPaymentMethodAvgOrderByAggregateInput
  _count: UserPaymentMethodCountOrderByAggregateInput
  _max: UserPaymentMethodMaxOrderByAggregateInput
  _min: UserPaymentMethodMinOrderByAggregateInput
  _sum: UserPaymentMethodSumOrderByAggregateInput
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  payment_type_id: SortOrder
  provider: SortOrder
  user_id: SortOrder
}

input UserPaymentMethodOrderByWithRelationInput {
  account_number: SortOrder
  id: SortOrder
  is_default: SortOrder
  payment_type_id: SortOrder
  provider: SortOrder
  user_id: SortOrder
}

enum UserPaymentMethodScalarFieldEnum {
  account_number
  id
  is_default
  payment_type_id
  provider
  user_id
}

input UserPaymentMethodScalarWhereWithAggregatesInput {
  AND: [UserPaymentMethodScalarWhereWithAggregatesInput!]
  NOT: [UserPaymentMethodScalarWhereWithAggregatesInput!]
  OR: [UserPaymentMethodScalarWhereWithAggregatesInput!]
  account_number: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  is_default: IntNullableWithAggregatesFilter
  payment_type_id: StringWithAggregatesFilter
  provider: StringNullableWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

type UserPaymentMethodSumAggregate {
  is_default: Int
}

input UserPaymentMethodSumOrderByAggregateInput {
  is_default: SortOrder
}

input UserPaymentMethodUpdateInput {
  account_number: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_default: NullableIntFieldUpdateOperationsInput
  payment_type_id: StringFieldUpdateOperationsInput
  provider: NullableStringFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input UserPaymentMethodUpdateManyMutationInput {
  account_number: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  is_default: NullableIntFieldUpdateOperationsInput
  payment_type_id: StringFieldUpdateOperationsInput
  provider: NullableStringFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input UserPaymentMethodWhereInput {
  AND: [UserPaymentMethodWhereInput!]
  NOT: [UserPaymentMethodWhereInput!]
  OR: [UserPaymentMethodWhereInput!]
  account_number: StringNullableFilter
  id: StringFilter
  is_default: IntNullableFilter
  payment_type_id: StringFilter
  provider: StringNullableFilter
  user_id: StringFilter
}

input UserPaymentMethodWhereUniqueInput {
  id: String
}

type UserReview {
  comment: String
  id: String!
  ordered_product_id: String!
  rating_value: Int
  user_id: String!
}

type UserReviewAvgAggregate {
  rating_value: Float
}

input UserReviewAvgOrderByAggregateInput {
  rating_value: SortOrder
}

type UserReviewCountAggregate {
  _all: Int!
  comment: Int!
  id: Int!
  ordered_product_id: Int!
  rating_value: Int!
  user_id: Int!
}

input UserReviewCountOrderByAggregateInput {
  comment: SortOrder
  id: SortOrder
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user_id: SortOrder
}

input UserReviewCreateInput {
  comment: String
  id: String
  ordered_product_id: String!
  rating_value: Int
  user_id: String!
}

input UserReviewCreateManyInput {
  comment: String
  id: String
  ordered_product_id: String!
  rating_value: Int
  user_id: String!
}

type UserReviewGroupBy {
  _avg: UserReviewAvgAggregate
  _count: UserReviewCountAggregate
  _max: UserReviewMaxAggregate
  _min: UserReviewMinAggregate
  _sum: UserReviewSumAggregate
  comment: String
  id: String!
  ordered_product_id: String!
  rating_value: Int
  user_id: String!
}

type UserReviewMaxAggregate {
  comment: String
  id: String
  ordered_product_id: String
  rating_value: Int
  user_id: String
}

input UserReviewMaxOrderByAggregateInput {
  comment: SortOrder
  id: SortOrder
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user_id: SortOrder
}

type UserReviewMinAggregate {
  comment: String
  id: String
  ordered_product_id: String
  rating_value: Int
  user_id: String
}

input UserReviewMinOrderByAggregateInput {
  comment: SortOrder
  id: SortOrder
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user_id: SortOrder
}

input UserReviewOrderByWithAggregationInput {
  _avg: UserReviewAvgOrderByAggregateInput
  _count: UserReviewCountOrderByAggregateInput
  _max: UserReviewMaxOrderByAggregateInput
  _min: UserReviewMinOrderByAggregateInput
  _sum: UserReviewSumOrderByAggregateInput
  comment: SortOrder
  id: SortOrder
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user_id: SortOrder
}

input UserReviewOrderByWithRelationInput {
  comment: SortOrder
  id: SortOrder
  ordered_product_id: SortOrder
  rating_value: SortOrder
  user_id: SortOrder
}

enum UserReviewScalarFieldEnum {
  comment
  id
  ordered_product_id
  rating_value
  user_id
}

input UserReviewScalarWhereWithAggregatesInput {
  AND: [UserReviewScalarWhereWithAggregatesInput!]
  NOT: [UserReviewScalarWhereWithAggregatesInput!]
  OR: [UserReviewScalarWhereWithAggregatesInput!]
  comment: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  ordered_product_id: StringWithAggregatesFilter
  rating_value: IntNullableWithAggregatesFilter
  user_id: StringWithAggregatesFilter
}

type UserReviewSumAggregate {
  rating_value: Int
}

input UserReviewSumOrderByAggregateInput {
  rating_value: SortOrder
}

input UserReviewUpdateInput {
  comment: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ordered_product_id: StringFieldUpdateOperationsInput
  rating_value: NullableIntFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input UserReviewUpdateManyMutationInput {
  comment: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ordered_product_id: StringFieldUpdateOperationsInput
  rating_value: NullableIntFieldUpdateOperationsInput
  user_id: StringFieldUpdateOperationsInput
}

input UserReviewWhereInput {
  AND: [UserReviewWhereInput!]
  NOT: [UserReviewWhereInput!]
  OR: [UserReviewWhereInput!]
  comment: StringNullableFilter
  id: StringFilter
  ordered_product_id: StringFilter
  rating_value: IntNullableFilter
  user_id: StringFilter
}

input UserReviewWhereUniqueInput {
  id: String
}

type Variation {
  category_id: String!
  id: String!
  name: String
}

type VariationCountAggregate {
  _all: Int!
  category_id: Int!
  id: Int!
  name: Int!
}

input VariationCountOrderByAggregateInput {
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
}

input VariationCreateInput {
  category_id: String!
  id: String
  name: String
}

input VariationCreateManyInput {
  category_id: String!
  id: String
  name: String
}

type VariationGroupBy {
  _count: VariationCountAggregate
  _max: VariationMaxAggregate
  _min: VariationMinAggregate
  category_id: String!
  id: String!
  name: String
}

type VariationMaxAggregate {
  category_id: String
  id: String
  name: String
}

input VariationMaxOrderByAggregateInput {
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
}

type VariationMinAggregate {
  category_id: String
  id: String
  name: String
}

input VariationMinOrderByAggregateInput {
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
}

type VariationOption {
  id: String!
  value: String
  variation_id: String!
}

type VariationOptionCountAggregate {
  _all: Int!
  id: Int!
  value: Int!
  variation_id: Int!
}

input VariationOptionCountOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
  variation_id: SortOrder
}

input VariationOptionCreateInput {
  id: String
  value: String
  variation_id: String!
}

input VariationOptionCreateManyInput {
  id: String
  value: String
  variation_id: String!
}

type VariationOptionGroupBy {
  _count: VariationOptionCountAggregate
  _max: VariationOptionMaxAggregate
  _min: VariationOptionMinAggregate
  id: String!
  value: String
  variation_id: String!
}

type VariationOptionMaxAggregate {
  id: String
  value: String
  variation_id: String
}

input VariationOptionMaxOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
  variation_id: SortOrder
}

type VariationOptionMinAggregate {
  id: String
  value: String
  variation_id: String
}

input VariationOptionMinOrderByAggregateInput {
  id: SortOrder
  value: SortOrder
  variation_id: SortOrder
}

input VariationOptionOrderByWithAggregationInput {
  _count: VariationOptionCountOrderByAggregateInput
  _max: VariationOptionMaxOrderByAggregateInput
  _min: VariationOptionMinOrderByAggregateInput
  id: SortOrder
  value: SortOrder
  variation_id: SortOrder
}

input VariationOptionOrderByWithRelationInput {
  id: SortOrder
  value: SortOrder
  variation_id: SortOrder
}

enum VariationOptionScalarFieldEnum {
  id
  value
  variation_id
}

input VariationOptionScalarWhereWithAggregatesInput {
  AND: [VariationOptionScalarWhereWithAggregatesInput!]
  NOT: [VariationOptionScalarWhereWithAggregatesInput!]
  OR: [VariationOptionScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  value: StringNullableWithAggregatesFilter
  variation_id: StringWithAggregatesFilter
}

input VariationOptionUpdateInput {
  id: StringFieldUpdateOperationsInput
  value: NullableStringFieldUpdateOperationsInput
  variation_id: StringFieldUpdateOperationsInput
}

input VariationOptionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  value: NullableStringFieldUpdateOperationsInput
  variation_id: StringFieldUpdateOperationsInput
}

input VariationOptionWhereInput {
  AND: [VariationOptionWhereInput!]
  NOT: [VariationOptionWhereInput!]
  OR: [VariationOptionWhereInput!]
  id: StringFilter
  value: StringNullableFilter
  variation_id: StringFilter
}

input VariationOptionWhereUniqueInput {
  id: String
}

input VariationOrderByWithAggregationInput {
  _count: VariationCountOrderByAggregateInput
  _max: VariationMaxOrderByAggregateInput
  _min: VariationMinOrderByAggregateInput
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
}

input VariationOrderByWithRelationInput {
  category_id: SortOrder
  id: SortOrder
  name: SortOrder
}

enum VariationScalarFieldEnum {
  category_id
  id
  name
}

input VariationScalarWhereWithAggregatesInput {
  AND: [VariationScalarWhereWithAggregatesInput!]
  NOT: [VariationScalarWhereWithAggregatesInput!]
  OR: [VariationScalarWhereWithAggregatesInput!]
  category_id: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
}

input VariationUpdateInput {
  category_id: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input VariationUpdateManyMutationInput {
  category_id: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
}

input VariationWhereInput {
  AND: [VariationWhereInput!]
  NOT: [VariationWhereInput!]
  OR: [VariationWhereInput!]
  category_id: StringFilter
  id: StringFilter
  name: StringNullableFilter
}

input VariationWhereUniqueInput {
  id: String
}
