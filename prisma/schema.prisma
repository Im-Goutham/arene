// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(cuid())
  email     String?        @unique
  password  String?
  firstName String
  lastName  String
  providers UserProvider[]
  orders    Order[]
}

model UserProvider {
  id            String  @id @default(cuid())
  userId        String
  user          User    @relation(fields: [userId], references: [id])
  provider      String
  providerId    String
  facebookToken String?
  facebookEmail String?
}

model Product {
  id         String      @id @default(cuid())
  name       String
  sku        String      @unique
  price      Float
  image      String
  stock      Int
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  offers     Offer[]
  orders     OrderItem[]
}

model Category {
  id       String     @id @default(cuid())
  name     String
  parent   Category?  @relation("subcategories", fields: [parentId], references: [id])
  parentId String?
  children Category[] @relation("subcategories")
  products Product[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  total     Float
  createdAt DateTime    @default(now())
  items     OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Offer {
  id        String    @id @default(cuid())
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  type      String
  code      String?
  discount  Float
  startDate DateTime?
  endDate   DateTime?
}
